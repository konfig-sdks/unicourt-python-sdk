# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from unicourt_python_sdk.pydantic.attorney_representation_type import AttorneyRepresentationType
from unicourt_python_sdk.pydantic.contact import Contact
from unicourt_python_sdk.pydantic.party_attorney_associations import PartyAttorneyAssociations
from unicourt_python_sdk.pydantic.party_role import PartyRole
from unicourt_python_sdk.pydantic.possible_norm_party import PossibleNormParty

class Party(BaseModel):
    attorney_representation_type: AttorneyRepresentationType = Field(alias='attorneyRepresentationType')

    contact: Contact = Field(alias='contact')

    # When was the party first fetched from the court site.
    first_fetch_date: datetime = Field(alias='firstFetchDate')

    # First name of the party. This is normalized by UniCourt.
    first_name: typing.Optional[str] = Field(alias='firstName')

    # Signifies if the party as this party type is currently isVisible or not for the case.
    is_visible: bool = Field(alias='isVisible')

    # When was the party last fetched from the court site.
    last_fetch_date: datetime = Field(alias='lastFetchDate')

    # Last name of the party. This is normalized by UniCourt.
    last_name: typing.Optional[str] = Field(alias='lastName')

    # Middle name of the party. This is normalized by UniCourt.
    middle_name: typing.Optional[str] = Field(alias='middleName')

    # Name of the party as provided by Court.
    name: str = Field(alias='name')

    name_prefix: typing.Optional[str] = Field(alias='namePrefix')

    name_suffix: typing.Optional[str] = Field(alias='nameSuffix')

    # Name of the object
    object: str = Field(alias='object')

    party_attorney_associations: PartyAttorneyAssociations = Field(alias='partyAttorneyAssociations')

    # To know the type of an entity in a case, if it is an Individual, Company or Other. An entity to a case could be the parties, attorneys or judges involved.
    party_classification_type: Literal["INDIVIDUAL", "COMPANY", "OTHER"] = Field(alias='partyClassificationType')

    # ID for the party in this case. This ID is unique within a case and NOT across cases. If the same party were to appear in another case this ID would be different.
    party_id: str = Field(alias='partyId')

    party_role: PartyRole = Field(alias='partyRole')

    possible_norm_party_array: typing.List[PossibleNormParty] = Field(alias='possibleNormPartyArray')

    # Party Type as provided by Court.
    source_party_role: str = Field(alias='sourcePartyRole')
    class Config:
        arbitrary_types_allowed = True
