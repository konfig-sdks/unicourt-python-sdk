# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from unicourt_python_sdk.pydantic.attorney_law_firm import AttorneyLawFirm
from unicourt_python_sdk.pydantic.attorney_party_role_group_id_array import AttorneyPartyRoleGroupIdArray
from unicourt_python_sdk.pydantic.attorney_party_role_id_array import AttorneyPartyRoleIdArray
from unicourt_python_sdk.pydantic.attorney_type import AttorneyType
from unicourt_python_sdk.pydantic.contact import Contact
from unicourt_python_sdk.pydantic.party_attorney_associations import PartyAttorneyAssociations
from unicourt_python_sdk.pydantic.possible_norm_attorney import PossibleNormAttorney
from unicourt_python_sdk.pydantic.possible_norm_law_firm import PossibleNormLawFirm

class Attorney(BaseModel):
    # ID for the attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.
    attorney_id: str = Field(alias='attorneyId')

    attorney_law_firm_array: typing.List[AttorneyLawFirm] = Field(alias='attorneyLawFirmArray')

    attorney_type: AttorneyType = Field(alias='attorneyType')

    # The bar enrollment number of an attorney.
    bar_number: typing.Optional[str] = Field(alias='barNumber')

    contact: Contact = Field(alias='contact')

    # When was the attorney first fetched from the court site.
    first_fetch_date: datetime = Field(alias='firstFetchDate')

    # First name of the attorney. This is normalized by UniCourt.
    first_name: typing.Optional[str] = Field(alias='firstName')

    # Signifies if the attorney as this attorney type is currently isVisible or not for the case.
    is_visible: bool = Field(alias='isVisible')

    # When was the attorney last fetched from the court site.
    last_fetch_date: datetime = Field(alias='lastFetchDate')

    # Last name of the attorney. This is normalized by UniCourt.
    last_name: typing.Optional[str] = Field(alias='lastName')

    # Middle name of the attorney. This is normalized by UniCourt.
    middle_name: typing.Optional[str] = Field(alias='middleName')

    # Name of the attorney as provided by Court.
    name: str = Field(alias='name')

    name_prefix: typing.Optional[str] = Field(alias='namePrefix')

    name_suffix: typing.Optional[str] = Field(alias='nameSuffix')

    # Name of the object
    object: str = Field(alias='object')

    party_attorney_associations: PartyAttorneyAssociations = Field(alias='partyAttorneyAssociations')

    party_role_group_id_array: AttorneyPartyRoleGroupIdArray = Field(alias='partyRoleGroupIdArray')

    party_role_id_array: AttorneyPartyRoleIdArray = Field(alias='partyRoleIdArray')

    possible_norm_attorney_array: typing.List[PossibleNormAttorney] = Field(alias='possibleNormAttorneyArray')

    # Possible Norm Lawfirm array for a Attorney.
    possible_norm_law_firm_array: typing.List[PossibleNormLawFirm] = Field(alias='possibleNormLawFirmArray')

    # Attorney Type as provided by Court.
    source_attorney_type: str = Field(alias='sourceAttorneyType')
    class Config:
        arbitrary_types_allowed = True
