# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from unicourt_python_sdk.pydantic.case_document_child_document_id_array import CaseDocumentChildDocumentIdArray
from unicourt_python_sdk.pydantic.preview_document import PreviewDocument

class CaseDocument(BaseModel):
    # Description of the document.
    description: typing.Optional[str] = Field(alias='description')

    # Date and time when the document was downloaded and added to the UniCourt Crowd Source Library.
    added_to_library_date: typing.Optional[str] = Field(alias='addedToLibraryDate')

    # UniCourt's Case Document ID.
    case_document_id: str = Field(alias='caseDocumentId')

    child_document_id_array: CaseDocumentChildDocumentIdArray = Field(alias='childDocumentIdArray')

    # Document Date when it was filed. The document date will be either explicitly provided byt the court or if the document is associatated to a docket entry then the document date will be of docket entry date.
    document_filed_date: typing.Optional[str] = Field(alias='documentFiledDate')

    # Link to either view the document if it is downloaded and already present in the UniCourt CrowdSourced Library.
    download_a_p_i: typing.Optional[str] = Field(alias='downloadAPI')

    # Estimated duration of a Order.
    estimated_order_duration: Literal["estimateUnavailable", "withinMinutes", "withinHours", "withinDays", "withinWeeks"] = Field(alias='estimatedOrderDuration')

    # Is the date when the document was first fetched from the court site.
    first_fetch_date: str = Field(alias='firstFetchDate')

    # Determines if the document is present in the UniCourt Library or not.
    in_library: bool = Field(alias='inLibrary')

    # Determines if a preview is available for the case document.
    is_preview_available: bool = Field(alias='isPreviewAvailable')

    # Document name.
    name: typing.Optional[str] = Field(alias='name')

    # Name of the object
    object: str = Field(alias='object')

    # Total number of pages in the document.
    pages: typing.Optional[int] = Field(alias='pages')

    # Document ID which is the parent document for the current document. This will be null if the current document is a parent document.
    parent_document_id: typing.Optional[str] = Field(alias='parentDocumentId')

    preview_document: PreviewDocument = Field(alias='previewDocument')

    # Price of the document.
    price: typing.Optional[typing.Union[int, float]] = Field(alias='price')

    # Order of documents how it is being stored in UniCourt.
    sort_order: typing.Optional[int] = Field(alias='sortOrder')

    # The status of source data of document. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Document has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
    source_data_status: Literal["NO_LONGER_AVAILABLE_IN_COURT", "SOURCE_DEPRECATED", "SEALED", None] = Field(alias='sourceDataStatus')
    class Config:
        arbitrary_types_allowed = True
