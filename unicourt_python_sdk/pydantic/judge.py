# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from unicourt_python_sdk.pydantic.contact import Contact
from unicourt_python_sdk.pydantic.judge_type import JudgeType
from unicourt_python_sdk.pydantic.possible_norm_judge import PossibleNormJudge

class Judge(BaseModel):
    contact: Contact = Field(alias='contact')

    # When was the judge first fetched from the court site.
    first_fetch_date: datetime = Field(alias='firstFetchDate')

    # First name of the judge. This is normalized by UniCourt.
    first_name: typing.Optional[str] = Field(alias='firstName')

    # Signifies if the judge as this judge type is currently isVisible or not for the case.
    is_visible: bool = Field(alias='isVisible')

    # ID for the judge in this case. This ID is unique within a case and NOT across cases. If the same Judge were to appear in another case this ID would be different.
    judge_id: str = Field(alias='judgeId')

    judge_type: JudgeType = Field(alias='judgeType')

    # When was the judge last fetched from the court site.
    last_fetch_date: datetime = Field(alias='lastFetchDate')

    # Last name of the judge. This is normalized by UniCourt.
    last_name: typing.Optional[str] = Field(alias='lastName')

    # Middle name of the judge. This is normalized by UniCourt.
    middle_name: typing.Optional[str] = Field(alias='middleName')

    # Name of the judge as provided by Court.
    name: str = Field(alias='name')

    name_prefix: typing.Optional[str] = Field(alias='namePrefix')

    name_suffix: typing.Optional[str] = Field(alias='nameSuffix')

    # Name of the object
    object: str = Field(alias='object')

    possible_norm_judge_array: typing.List[PossibleNormJudge] = Field(alias='possibleNormJudgeArray')

    source_judge_type: str = Field(alias='sourceJudgeType')
    class Config:
        arbitrary_types_allowed = True
