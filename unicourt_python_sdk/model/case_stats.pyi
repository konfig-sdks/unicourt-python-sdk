# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CaseStats(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Count of each entitiy of a case is mentioned here so that you can calculate the number of requests needs to be done to obtain each entity results completely.
    """


    class MetaOapg:
        required = {
            "docketEntryCount",
            "freeCaseDocumentCount",
            "paidCaseDocumentCount",
            "hearingCount",
            "caseDocumentInLibraryCount",
            "judgeCount",
            "allCaseDocumentCount",
            "attorneyCount",
            "partyCount",
            "object",
            "relatedCaseCount",
        }
        
        class properties:
            allCaseDocumentCount = schemas.IntSchema
            attorneyCount = schemas.IntSchema
            caseDocumentInLibraryCount = schemas.IntSchema
            docketEntryCount = schemas.IntSchema
            freeCaseDocumentCount = schemas.IntSchema
            hearingCount = schemas.IntSchema
            judgeCount = schemas.IntSchema
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            paidCaseDocumentCount = schemas.IntSchema
            partyCount = schemas.IntSchema
            relatedCaseCount = schemas.IntSchema
            __annotations__ = {
                "allCaseDocumentCount": allCaseDocumentCount,
                "attorneyCount": attorneyCount,
                "caseDocumentInLibraryCount": caseDocumentInLibraryCount,
                "docketEntryCount": docketEntryCount,
                "freeCaseDocumentCount": freeCaseDocumentCount,
                "hearingCount": hearingCount,
                "judgeCount": judgeCount,
                "object": object,
                "paidCaseDocumentCount": paidCaseDocumentCount,
                "partyCount": partyCount,
                "relatedCaseCount": relatedCaseCount,
            }
    
    docketEntryCount: MetaOapg.properties.docketEntryCount
    freeCaseDocumentCount: MetaOapg.properties.freeCaseDocumentCount
    paidCaseDocumentCount: MetaOapg.properties.paidCaseDocumentCount
    hearingCount: MetaOapg.properties.hearingCount
    caseDocumentInLibraryCount: MetaOapg.properties.caseDocumentInLibraryCount
    judgeCount: MetaOapg.properties.judgeCount
    allCaseDocumentCount: MetaOapg.properties.allCaseDocumentCount
    attorneyCount: MetaOapg.properties.attorneyCount
    partyCount: MetaOapg.properties.partyCount
    object: MetaOapg.properties.object
    relatedCaseCount: MetaOapg.properties.relatedCaseCount
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allCaseDocumentCount"]) -> MetaOapg.properties.allCaseDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attorneyCount"]) -> MetaOapg.properties.attorneyCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseDocumentInLibraryCount"]) -> MetaOapg.properties.caseDocumentInLibraryCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docketEntryCount"]) -> MetaOapg.properties.docketEntryCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freeCaseDocumentCount"]) -> MetaOapg.properties.freeCaseDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hearingCount"]) -> MetaOapg.properties.hearingCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["judgeCount"]) -> MetaOapg.properties.judgeCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidCaseDocumentCount"]) -> MetaOapg.properties.paidCaseDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partyCount"]) -> MetaOapg.properties.partyCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedCaseCount"]) -> MetaOapg.properties.relatedCaseCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allCaseDocumentCount", "attorneyCount", "caseDocumentInLibraryCount", "docketEntryCount", "freeCaseDocumentCount", "hearingCount", "judgeCount", "object", "paidCaseDocumentCount", "partyCount", "relatedCaseCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allCaseDocumentCount"]) -> MetaOapg.properties.allCaseDocumentCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attorneyCount"]) -> MetaOapg.properties.attorneyCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseDocumentInLibraryCount"]) -> MetaOapg.properties.caseDocumentInLibraryCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docketEntryCount"]) -> MetaOapg.properties.docketEntryCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freeCaseDocumentCount"]) -> MetaOapg.properties.freeCaseDocumentCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hearingCount"]) -> MetaOapg.properties.hearingCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["judgeCount"]) -> MetaOapg.properties.judgeCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidCaseDocumentCount"]) -> MetaOapg.properties.paidCaseDocumentCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partyCount"]) -> MetaOapg.properties.partyCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedCaseCount"]) -> MetaOapg.properties.relatedCaseCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allCaseDocumentCount", "attorneyCount", "caseDocumentInLibraryCount", "docketEntryCount", "freeCaseDocumentCount", "hearingCount", "judgeCount", "object", "paidCaseDocumentCount", "partyCount", "relatedCaseCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        docketEntryCount: typing.Union[MetaOapg.properties.docketEntryCount, decimal.Decimal, int, ],
        freeCaseDocumentCount: typing.Union[MetaOapg.properties.freeCaseDocumentCount, decimal.Decimal, int, ],
        paidCaseDocumentCount: typing.Union[MetaOapg.properties.paidCaseDocumentCount, decimal.Decimal, int, ],
        hearingCount: typing.Union[MetaOapg.properties.hearingCount, decimal.Decimal, int, ],
        caseDocumentInLibraryCount: typing.Union[MetaOapg.properties.caseDocumentInLibraryCount, decimal.Decimal, int, ],
        judgeCount: typing.Union[MetaOapg.properties.judgeCount, decimal.Decimal, int, ],
        allCaseDocumentCount: typing.Union[MetaOapg.properties.allCaseDocumentCount, decimal.Decimal, int, ],
        attorneyCount: typing.Union[MetaOapg.properties.attorneyCount, decimal.Decimal, int, ],
        partyCount: typing.Union[MetaOapg.properties.partyCount, decimal.Decimal, int, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        relatedCaseCount: typing.Union[MetaOapg.properties.relatedCaseCount, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaseStats':
        return super().__new__(
            cls,
            *args,
            docketEntryCount=docketEntryCount,
            freeCaseDocumentCount=freeCaseDocumentCount,
            paidCaseDocumentCount=paidCaseDocumentCount,
            hearingCount=hearingCount,
            caseDocumentInLibraryCount=caseDocumentInLibraryCount,
            judgeCount=judgeCount,
            allCaseDocumentCount=allCaseDocumentCount,
            attorneyCount=attorneyCount,
            partyCount=partyCount,
            object=object,
            relatedCaseCount=relatedCaseCount,
            _configuration=_configuration,
            **kwargs,
        )
