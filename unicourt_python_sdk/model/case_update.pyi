# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CaseUpdate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "exception",
            "pacerOptions",
            "caseId",
            "caseAPI",
            "requestedDate",
            "case",
            "object",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def case() -> typing.Type['Case']:
                return Case
            
            
            class caseAPI(
                schemas.StrSchema
            ):
                pass
            
            
            class caseId(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def exception() -> typing.Type['Exception']:
                return Exception
            
            
            class object(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def pacerOptions() -> typing.Type['CaseUpdatePacerOptionsResponse']:
                return CaseUpdatePacerOptionsResponse
            
            
            class requestedDate(
                schemas.DateTimeSchema
            ):
                pass
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COMPLETE(cls):
                    return cls("COMPLETE")
                
                @schemas.classproperty
                def FAILURE(cls):
                    return cls("FAILURE")
                
                @schemas.classproperty
                def IN_PROGRESS(cls):
                    return cls("IN_PROGRESS")
            __annotations__ = {
                "case": case,
                "caseAPI": caseAPI,
                "caseId": caseId,
                "exception": exception,
                "object": object,
                "pacerOptions": pacerOptions,
                "requestedDate": requestedDate,
                "status": status,
            }
    
    exception: 'Exception'
    pacerOptions: 'CaseUpdatePacerOptionsResponse'
    caseId: MetaOapg.properties.caseId
    caseAPI: MetaOapg.properties.caseAPI
    requestedDate: MetaOapg.properties.requestedDate
    case: 'Case'
    object: MetaOapg.properties.object
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["case"]) -> 'Case': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseAPI"]) -> MetaOapg.properties.caseAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseId"]) -> MetaOapg.properties.caseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exception"]) -> 'Exception': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pacerOptions"]) -> 'CaseUpdatePacerOptionsResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestedDate"]) -> MetaOapg.properties.requestedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["case", "caseAPI", "caseId", "exception", "object", "pacerOptions", "requestedDate", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["case"]) -> 'Case': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseAPI"]) -> MetaOapg.properties.caseAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseId"]) -> MetaOapg.properties.caseId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exception"]) -> 'Exception': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pacerOptions"]) -> 'CaseUpdatePacerOptionsResponse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestedDate"]) -> MetaOapg.properties.requestedDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["case", "caseAPI", "caseId", "exception", "object", "pacerOptions", "requestedDate", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        exception: 'Exception',
        pacerOptions: 'CaseUpdatePacerOptionsResponse',
        caseId: typing.Union[MetaOapg.properties.caseId, str, ],
        caseAPI: typing.Union[MetaOapg.properties.caseAPI, str, ],
        requestedDate: typing.Union[MetaOapg.properties.requestedDate, str, datetime, ],
        case: 'Case',
        object: typing.Union[MetaOapg.properties.object, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaseUpdate':
        return super().__new__(
            cls,
            *args,
            exception=exception,
            pacerOptions=pacerOptions,
            caseId=caseId,
            caseAPI=caseAPI,
            requestedDate=requestedDate,
            case=case,
            object=object,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.case import Case
from unicourt_python_sdk.model.case_update_pacer_options_response import CaseUpdatePacerOptionsResponse
from unicourt_python_sdk.model.exception import Exception
