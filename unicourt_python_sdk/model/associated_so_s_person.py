# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class AssociatedSoSPerson(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "entityName",
            "entityType",
            "contact",
            "object",
        }
        
        class properties:
        
            @staticmethod
            def contact() -> typing.Type['Contact']:
                return Contact
            
            
            class entityName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
            
            
            class entityType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    enum_value_to_name = {
                        "Partner": "PARTNER",
                        "Agent": "AGENT",
                        "CEO": "CEO",
                        "Partner/General Member": "PARTNER_GENERAL_MEMBER",
                        "Partner/GeneralMember": "PARTNER_GENERAL_MEMBER",
                    }
                
                @schemas.classproperty
                def PARTNER(cls):
                    return cls("Partner")
                
                @schemas.classproperty
                def AGENT(cls):
                    return cls("Agent")
                
                @schemas.classproperty
                def CEO(cls):
                    return cls("CEO")
                
                @schemas.classproperty
                def PARTNER_GENERAL_MEMBER(cls):
                    return cls("Partner/General Member")
                
                @schemas.classproperty
                def PARTNER_GENERAL_MEMBER(cls):
                    return cls("Partner/GeneralMember")
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 19
            __annotations__ = {
                "contact": contact,
                "entityName": entityName,
                "entityType": entityType,
                "object": object,
            }
    
    entityName: MetaOapg.properties.entityName
    entityType: MetaOapg.properties.entityType
    contact: 'Contact'
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityName"]) -> MetaOapg.properties.entityName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contact", "entityName", "entityType", "object", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> 'Contact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityName"]) -> MetaOapg.properties.entityName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entityType"]) -> MetaOapg.properties.entityType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contact", "entityName", "entityType", "object", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        entityName: typing.Union[MetaOapg.properties.entityName, str, ],
        entityType: typing.Union[MetaOapg.properties.entityType, str, ],
        contact: 'Contact',
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssociatedSoSPerson':
        return super().__new__(
            cls,
            *args,
            entityName=entityName,
            entityType=entityType,
            contact=contact,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.contact import Contact
