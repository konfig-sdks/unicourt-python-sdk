# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class ServiceHistory(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A timeline of courts where the judge has been employed.
    """


    class MetaOapg:
        required = {
            "fromDate",
            "toYear",
            "fromYear",
            "appointedBy",
            "sourceCourt",
            "toDate",
            "reasonForTermination",
            "isVisible",
            "title",
            "object",
        }
        
        class properties:
            
            
            class title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class appointedBy(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'appointedBy':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fromDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fromDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fromYear(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fromYear':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isVisible = schemas.BoolSchema
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            
            
            class reasonForTermination(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reasonForTermination':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sourceCourt(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceCourt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class toDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'toDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class toYear(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'toYear':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "title": title,
                "appointedBy": appointedBy,
                "fromDate": fromDate,
                "fromYear": fromYear,
                "isVisible": isVisible,
                "object": object,
                "reasonForTermination": reasonForTermination,
                "sourceCourt": sourceCourt,
                "toDate": toDate,
                "toYear": toYear,
            }
    
    fromDate: MetaOapg.properties.fromDate
    toYear: MetaOapg.properties.toYear
    fromYear: MetaOapg.properties.fromYear
    appointedBy: MetaOapg.properties.appointedBy
    sourceCourt: MetaOapg.properties.sourceCourt
    toDate: MetaOapg.properties.toDate
    reasonForTermination: MetaOapg.properties.reasonForTermination
    isVisible: MetaOapg.properties.isVisible
    title: MetaOapg.properties.title
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appointedBy"]) -> MetaOapg.properties.appointedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromDate"]) -> MetaOapg.properties.fromDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fromYear"]) -> MetaOapg.properties.fromYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isVisible"]) -> MetaOapg.properties.isVisible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reasonForTermination"]) -> MetaOapg.properties.reasonForTermination: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceCourt"]) -> MetaOapg.properties.sourceCourt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toDate"]) -> MetaOapg.properties.toDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["toYear"]) -> MetaOapg.properties.toYear: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "appointedBy", "fromDate", "fromYear", "isVisible", "object", "reasonForTermination", "sourceCourt", "toDate", "toYear", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appointedBy"]) -> MetaOapg.properties.appointedBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromDate"]) -> MetaOapg.properties.fromDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fromYear"]) -> MetaOapg.properties.fromYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isVisible"]) -> MetaOapg.properties.isVisible: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reasonForTermination"]) -> MetaOapg.properties.reasonForTermination: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceCourt"]) -> MetaOapg.properties.sourceCourt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toDate"]) -> MetaOapg.properties.toDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["toYear"]) -> MetaOapg.properties.toYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "appointedBy", "fromDate", "fromYear", "isVisible", "object", "reasonForTermination", "sourceCourt", "toDate", "toYear", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        fromDate: typing.Union[MetaOapg.properties.fromDate, None, str, datetime, ],
        toYear: typing.Union[MetaOapg.properties.toYear, None, decimal.Decimal, int, ],
        fromYear: typing.Union[MetaOapg.properties.fromYear, None, decimal.Decimal, int, ],
        appointedBy: typing.Union[MetaOapg.properties.appointedBy, None, str, ],
        sourceCourt: typing.Union[MetaOapg.properties.sourceCourt, None, str, ],
        toDate: typing.Union[MetaOapg.properties.toDate, None, str, datetime, ],
        reasonForTermination: typing.Union[MetaOapg.properties.reasonForTermination, None, str, ],
        isVisible: typing.Union[MetaOapg.properties.isVisible, bool, ],
        title: typing.Union[MetaOapg.properties.title, None, str, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServiceHistory':
        return super().__new__(
            cls,
            *args,
            fromDate=fromDate,
            toYear=toYear,
            fromYear=fromYear,
            appointedBy=appointedBy,
            sourceCourt=sourceCourt,
            toDate=toDate,
            reasonForTermination=reasonForTermination,
            isVisible=isVisible,
            title=title,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )
