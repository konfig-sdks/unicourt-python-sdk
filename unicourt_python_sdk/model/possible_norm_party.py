# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class PossibleNormParty(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "confidenceScore",
            "bestMatch",
            "normPartyAPI",
            "associatedNormJudgesAPI",
            "associatedNormAttorneysAPI",
            "associatedNormLawFirmsAPI",
            "scoreConstituents",
            "caseCountAnalyticsByNormPartyAPI",
            "normPartyId",
            "normPartyName",
            "caseCountAnalyticsByOpposingNormPartyAPI",
            "object",
        }
        
        class properties:
            
            
            class associatedNormAttorneysAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'url'
                    max_length = 255
            
            
            class associatedNormJudgesAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'url'
                    max_length = 255
            
            
            class associatedNormLawFirmsAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'url'
                    max_length = 255
            bestMatch = schemas.BoolSchema
            
            
            class caseCountAnalyticsByNormPartyAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByOpposingNormPartyAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'url'
                    max_length = 255
            confidenceScore = schemas.Float32Schema
            
            
            class normPartyAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'url'
                    max_length = 255
            
            
            class normPartyId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            
            
            class normPartyName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 17
                    min_length = 17
        
            @staticmethod
            def scoreConstituents() -> typing.Type['PossibleNormPartyScoreConstituents']:
                return PossibleNormPartyScoreConstituents
            __annotations__ = {
                "associatedNormAttorneysAPI": associatedNormAttorneysAPI,
                "associatedNormJudgesAPI": associatedNormJudgesAPI,
                "associatedNormLawFirmsAPI": associatedNormLawFirmsAPI,
                "bestMatch": bestMatch,
                "caseCountAnalyticsByNormPartyAPI": caseCountAnalyticsByNormPartyAPI,
                "caseCountAnalyticsByOpposingNormPartyAPI": caseCountAnalyticsByOpposingNormPartyAPI,
                "confidenceScore": confidenceScore,
                "normPartyAPI": normPartyAPI,
                "normPartyId": normPartyId,
                "normPartyName": normPartyName,
                "object": object,
                "scoreConstituents": scoreConstituents,
            }

    
    confidenceScore: MetaOapg.properties.confidenceScore
    bestMatch: MetaOapg.properties.bestMatch
    normPartyAPI: MetaOapg.properties.normPartyAPI
    associatedNormJudgesAPI: MetaOapg.properties.associatedNormJudgesAPI
    associatedNormAttorneysAPI: MetaOapg.properties.associatedNormAttorneysAPI
    associatedNormLawFirmsAPI: MetaOapg.properties.associatedNormLawFirmsAPI
    scoreConstituents: 'PossibleNormPartyScoreConstituents'
    caseCountAnalyticsByNormPartyAPI: MetaOapg.properties.caseCountAnalyticsByNormPartyAPI
    normPartyId: MetaOapg.properties.normPartyId
    normPartyName: MetaOapg.properties.normPartyName
    caseCountAnalyticsByOpposingNormPartyAPI: MetaOapg.properties.caseCountAnalyticsByOpposingNormPartyAPI
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedNormAttorneysAPI"]) -> MetaOapg.properties.associatedNormAttorneysAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedNormJudgesAPI"]) -> MetaOapg.properties.associatedNormJudgesAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedNormLawFirmsAPI"]) -> MetaOapg.properties.associatedNormLawFirmsAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bestMatch"]) -> MetaOapg.properties.bestMatch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByNormPartyAPI"]) -> MetaOapg.properties.caseCountAnalyticsByNormPartyAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByOpposingNormPartyAPI"]) -> MetaOapg.properties.caseCountAnalyticsByOpposingNormPartyAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["confidenceScore"]) -> MetaOapg.properties.confidenceScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normPartyAPI"]) -> MetaOapg.properties.normPartyAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normPartyId"]) -> MetaOapg.properties.normPartyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normPartyName"]) -> MetaOapg.properties.normPartyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scoreConstituents"]) -> 'PossibleNormPartyScoreConstituents': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["associatedNormAttorneysAPI", "associatedNormJudgesAPI", "associatedNormLawFirmsAPI", "bestMatch", "caseCountAnalyticsByNormPartyAPI", "caseCountAnalyticsByOpposingNormPartyAPI", "confidenceScore", "normPartyAPI", "normPartyId", "normPartyName", "object", "scoreConstituents", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedNormAttorneysAPI"]) -> MetaOapg.properties.associatedNormAttorneysAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedNormJudgesAPI"]) -> MetaOapg.properties.associatedNormJudgesAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedNormLawFirmsAPI"]) -> MetaOapg.properties.associatedNormLawFirmsAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bestMatch"]) -> MetaOapg.properties.bestMatch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByNormPartyAPI"]) -> MetaOapg.properties.caseCountAnalyticsByNormPartyAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByOpposingNormPartyAPI"]) -> MetaOapg.properties.caseCountAnalyticsByOpposingNormPartyAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["confidenceScore"]) -> MetaOapg.properties.confidenceScore: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normPartyAPI"]) -> MetaOapg.properties.normPartyAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normPartyId"]) -> MetaOapg.properties.normPartyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normPartyName"]) -> MetaOapg.properties.normPartyName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scoreConstituents"]) -> 'PossibleNormPartyScoreConstituents': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["associatedNormAttorneysAPI", "associatedNormJudgesAPI", "associatedNormLawFirmsAPI", "bestMatch", "caseCountAnalyticsByNormPartyAPI", "caseCountAnalyticsByOpposingNormPartyAPI", "confidenceScore", "normPartyAPI", "normPartyId", "normPartyName", "object", "scoreConstituents", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PossibleNormParty':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.possible_norm_party_score_constituents import PossibleNormPartyScoreConstituents
