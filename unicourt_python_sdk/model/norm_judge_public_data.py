# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class NormJudgePublicData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    This contains the Judge Public details that is obtained from various sources.
    """


    class MetaOapg:
        required = {
            "educationArray",
            "lastFetchDateWithUpdates",
            "serviceHistoryArray",
            "abaRatings",
            "bio",
            "professionalCareerArray",
            "lastFetchDate",
            "nameHistoryArray",
            "judicialStatus",
            "judicialSource",
            "contact",
            "aliasArray",
            "firstFetchDate",
            "object",
        }
        
        class properties:
        
            @staticmethod
            def abaRatings() -> typing.Type['NormJudgePublicDataAbaRatings']:
                return NormJudgePublicDataAbaRatings
        
            @staticmethod
            def aliasArray() -> typing.Type['NormJudgePublicDataAliasArray']:
                return NormJudgePublicDataAliasArray
        
            @staticmethod
            def bio() -> typing.Type['NormJudgePublicDataBio']:
                return NormJudgePublicDataBio
        
            @staticmethod
            def contact() -> typing.Type['Contact']:
                return Contact
        
            @staticmethod
            def educationArray() -> typing.Type['NormJudgePublicDataEducationArray']:
                return NormJudgePublicDataEducationArray
            
            
            class firstFetchDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstFetchDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def judicialSource() -> typing.Type['NormJudgePublicDataJudicialSource']:
                return NormJudgePublicDataJudicialSource
            
            
            class judicialStatus(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'judicialStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastFetchDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastFetchDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastFetchDateWithUpdates(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastFetchDateWithUpdates':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def nameHistoryArray() -> typing.Type['NormJudgePublicDataNameHistoryArray']:
                return NormJudgePublicDataNameHistoryArray
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 19
        
            @staticmethod
            def professionalCareerArray() -> typing.Type['NormJudgePublicDataProfessionalCareerArray']:
                return NormJudgePublicDataProfessionalCareerArray
            
            
            class serviceHistoryArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ServiceHistory']:
                        return ServiceHistory
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ServiceHistory'], typing.List['ServiceHistory']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'serviceHistoryArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ServiceHistory':
                    return super().__getitem__(i)
            __annotations__ = {
                "abaRatings": abaRatings,
                "aliasArray": aliasArray,
                "bio": bio,
                "contact": contact,
                "educationArray": educationArray,
                "firstFetchDate": firstFetchDate,
                "judicialSource": judicialSource,
                "judicialStatus": judicialStatus,
                "lastFetchDate": lastFetchDate,
                "lastFetchDateWithUpdates": lastFetchDateWithUpdates,
                "nameHistoryArray": nameHistoryArray,
                "object": object,
                "professionalCareerArray": professionalCareerArray,
                "serviceHistoryArray": serviceHistoryArray,
            }
    
    educationArray: 'NormJudgePublicDataEducationArray'
    lastFetchDateWithUpdates: MetaOapg.properties.lastFetchDateWithUpdates
    serviceHistoryArray: MetaOapg.properties.serviceHistoryArray
    abaRatings: 'NormJudgePublicDataAbaRatings'
    bio: 'NormJudgePublicDataBio'
    professionalCareerArray: 'NormJudgePublicDataProfessionalCareerArray'
    lastFetchDate: MetaOapg.properties.lastFetchDate
    nameHistoryArray: 'NormJudgePublicDataNameHistoryArray'
    judicialStatus: MetaOapg.properties.judicialStatus
    judicialSource: 'NormJudgePublicDataJudicialSource'
    contact: 'Contact'
    aliasArray: 'NormJudgePublicDataAliasArray'
    firstFetchDate: MetaOapg.properties.firstFetchDate
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["abaRatings"]) -> 'NormJudgePublicDataAbaRatings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["aliasArray"]) -> 'NormJudgePublicDataAliasArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bio"]) -> 'NormJudgePublicDataBio': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["educationArray"]) -> 'NormJudgePublicDataEducationArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["judicialSource"]) -> 'NormJudgePublicDataJudicialSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["judicialStatus"]) -> MetaOapg.properties.judicialStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDateWithUpdates"]) -> MetaOapg.properties.lastFetchDateWithUpdates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameHistoryArray"]) -> 'NormJudgePublicDataNameHistoryArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["professionalCareerArray"]) -> 'NormJudgePublicDataProfessionalCareerArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceHistoryArray"]) -> MetaOapg.properties.serviceHistoryArray: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["abaRatings", "aliasArray", "bio", "contact", "educationArray", "firstFetchDate", "judicialSource", "judicialStatus", "lastFetchDate", "lastFetchDateWithUpdates", "nameHistoryArray", "object", "professionalCareerArray", "serviceHistoryArray", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["abaRatings"]) -> 'NormJudgePublicDataAbaRatings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["aliasArray"]) -> 'NormJudgePublicDataAliasArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bio"]) -> 'NormJudgePublicDataBio': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> 'Contact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["educationArray"]) -> 'NormJudgePublicDataEducationArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["judicialSource"]) -> 'NormJudgePublicDataJudicialSource': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["judicialStatus"]) -> MetaOapg.properties.judicialStatus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDateWithUpdates"]) -> MetaOapg.properties.lastFetchDateWithUpdates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameHistoryArray"]) -> 'NormJudgePublicDataNameHistoryArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["professionalCareerArray"]) -> 'NormJudgePublicDataProfessionalCareerArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceHistoryArray"]) -> MetaOapg.properties.serviceHistoryArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["abaRatings", "aliasArray", "bio", "contact", "educationArray", "firstFetchDate", "judicialSource", "judicialStatus", "lastFetchDate", "lastFetchDateWithUpdates", "nameHistoryArray", "object", "professionalCareerArray", "serviceHistoryArray", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        educationArray: 'NormJudgePublicDataEducationArray',
        lastFetchDateWithUpdates: typing.Union[MetaOapg.properties.lastFetchDateWithUpdates, None, str, datetime, ],
        serviceHistoryArray: typing.Union[MetaOapg.properties.serviceHistoryArray, list, tuple, ],
        abaRatings: 'NormJudgePublicDataAbaRatings',
        bio: 'NormJudgePublicDataBio',
        professionalCareerArray: 'NormJudgePublicDataProfessionalCareerArray',
        lastFetchDate: typing.Union[MetaOapg.properties.lastFetchDate, None, str, datetime, ],
        nameHistoryArray: 'NormJudgePublicDataNameHistoryArray',
        judicialStatus: typing.Union[MetaOapg.properties.judicialStatus, None, str, ],
        judicialSource: 'NormJudgePublicDataJudicialSource',
        contact: 'Contact',
        aliasArray: 'NormJudgePublicDataAliasArray',
        firstFetchDate: typing.Union[MetaOapg.properties.firstFetchDate, None, str, datetime, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NormJudgePublicData':
        return super().__new__(
            cls,
            *args,
            educationArray=educationArray,
            lastFetchDateWithUpdates=lastFetchDateWithUpdates,
            serviceHistoryArray=serviceHistoryArray,
            abaRatings=abaRatings,
            bio=bio,
            professionalCareerArray=professionalCareerArray,
            lastFetchDate=lastFetchDate,
            nameHistoryArray=nameHistoryArray,
            judicialStatus=judicialStatus,
            judicialSource=judicialSource,
            contact=contact,
            aliasArray=aliasArray,
            firstFetchDate=firstFetchDate,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.contact import Contact
from unicourt_python_sdk.model.norm_judge_public_data_aba_ratings import NormJudgePublicDataAbaRatings
from unicourt_python_sdk.model.norm_judge_public_data_alias_array import NormJudgePublicDataAliasArray
from unicourt_python_sdk.model.norm_judge_public_data_bio import NormJudgePublicDataBio
from unicourt_python_sdk.model.norm_judge_public_data_education_array import NormJudgePublicDataEducationArray
from unicourt_python_sdk.model.norm_judge_public_data_judicial_source import NormJudgePublicDataJudicialSource
from unicourt_python_sdk.model.norm_judge_public_data_name_history_array import NormJudgePublicDataNameHistoryArray
from unicourt_python_sdk.model.norm_judge_public_data_professional_career_array import NormJudgePublicDataProfessionalCareerArray
from unicourt_python_sdk.model.service_history import ServiceHistory
