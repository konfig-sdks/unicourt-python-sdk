# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class DocketEntry(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "boundary",
            "docketEntryPrimaryDocuments",
            "lastFetchDate",
            "sortOrder",
            "docketBadge",
            "docketEntrySecondaryDocuments",
            "docketEntryDate",
            "text",
            "referencedDocketNumberArray",
            "docketNumber",
            "object",
            "textStructured",
        }
        
        class properties:
            
            
            class boundary(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "first": "FIRST",
                        "last": "LAST",
                        "single_docket_entry": "SINGLE_DOCKET_ENTRY",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def FIRST(cls):
                    return cls("first")
                
                @schemas.classproperty
                def LAST(cls):
                    return cls("last")
                
                @schemas.classproperty
                def SINGLE_DOCKET_ENTRY(cls):
                    return cls("single_docket_entry")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'boundary':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class docketBadge(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DOCKET(cls):
                    return cls("DOCKET")
                
                @schemas.classproperty
                def CHARGE(cls):
                    return cls("CHARGE")
                
                @schemas.classproperty
                def HEARING(cls):
                    return cls("HEARING")
                
                @schemas.classproperty
                def JUDGEMENT(cls):
                    return cls("JUDGEMENT")
                
                @schemas.classproperty
                def FINANCIAL(cls):
                    return cls("FINANCIAL")
                
                @schemas.classproperty
                def DISPOSITION(cls):
                    return cls("DISPOSITION")
                
                @schemas.classproperty
                def SENTENCE(cls):
                    return cls("SENTENCE")
                
                @schemas.classproperty
                def BOND(cls):
                    return cls("BOND")
                
                @schemas.classproperty
                def BAIL(cls):
                    return cls("BAIL")
                
                @schemas.classproperty
                def CAUSE_OF_ACTION(cls):
                    return cls("CAUSE_OF_ACTION")
                
                @schemas.classproperty
                def ARREST(cls):
                    return cls("ARREST")
                
                @schemas.classproperty
                def WARRANT(cls):
                    return cls("WARRANT")
                
                @schemas.classproperty
                def SUMMON(cls):
                    return cls("SUMMON")
                
                @schemas.classproperty
                def TICKLER(cls):
                    return cls("TICKLER")
                
                @schemas.classproperty
                def OPINION(cls):
                    return cls("OPINION")
            
            
            class docketEntryDate(
                schemas.DateTimeSchema
            ):
                pass
        
            @staticmethod
            def docketEntryPrimaryDocuments() -> typing.Type['DocketEntryPrimaryDocuments']:
                return DocketEntryPrimaryDocuments
        
            @staticmethod
            def docketEntrySecondaryDocuments() -> typing.Type['DocketEntrySecondaryDocuments']:
                return DocketEntrySecondaryDocuments
            
            
            class docketNumber(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'docketNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class lastFetchDate(
                schemas.StrSchema
            ):
                pass
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            
            
            class referencedDocketNumberArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReferencedDocketNumber']:
                        return ReferencedDocketNumber
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['ReferencedDocketNumber'], typing.List['ReferencedDocketNumber']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'referencedDocketNumberArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReferencedDocketNumber':
                    return super().__getitem__(i)
            sortOrder = schemas.IntSchema
            
            
            class text(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def textStructured() -> typing.Type['SourceStructuredData']:
                return SourceStructuredData
            __annotations__ = {
                "boundary": boundary,
                "docketBadge": docketBadge,
                "docketEntryDate": docketEntryDate,
                "docketEntryPrimaryDocuments": docketEntryPrimaryDocuments,
                "docketEntrySecondaryDocuments": docketEntrySecondaryDocuments,
                "docketNumber": docketNumber,
                "lastFetchDate": lastFetchDate,
                "object": object,
                "referencedDocketNumberArray": referencedDocketNumberArray,
                "sortOrder": sortOrder,
                "text": text,
                "textStructured": textStructured,
            }

    
    boundary: MetaOapg.properties.boundary
    docketEntryPrimaryDocuments: 'DocketEntryPrimaryDocuments'
    lastFetchDate: MetaOapg.properties.lastFetchDate
    sortOrder: MetaOapg.properties.sortOrder
    docketBadge: MetaOapg.properties.docketBadge
    docketEntrySecondaryDocuments: 'DocketEntrySecondaryDocuments'
    docketEntryDate: MetaOapg.properties.docketEntryDate
    text: MetaOapg.properties.text
    referencedDocketNumberArray: MetaOapg.properties.referencedDocketNumberArray
    docketNumber: MetaOapg.properties.docketNumber
    object: MetaOapg.properties.object
    textStructured: 'SourceStructuredData'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["boundary"]) -> MetaOapg.properties.boundary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docketBadge"]) -> MetaOapg.properties.docketBadge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docketEntryDate"]) -> MetaOapg.properties.docketEntryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docketEntryPrimaryDocuments"]) -> 'DocketEntryPrimaryDocuments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docketEntrySecondaryDocuments"]) -> 'DocketEntrySecondaryDocuments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docketNumber"]) -> MetaOapg.properties.docketNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referencedDocketNumberArray"]) -> MetaOapg.properties.referencedDocketNumberArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["textStructured"]) -> 'SourceStructuredData': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["boundary", "docketBadge", "docketEntryDate", "docketEntryPrimaryDocuments", "docketEntrySecondaryDocuments", "docketNumber", "lastFetchDate", "object", "referencedDocketNumberArray", "sortOrder", "text", "textStructured", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["boundary"]) -> MetaOapg.properties.boundary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docketBadge"]) -> MetaOapg.properties.docketBadge: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docketEntryDate"]) -> MetaOapg.properties.docketEntryDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docketEntryPrimaryDocuments"]) -> 'DocketEntryPrimaryDocuments': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docketEntrySecondaryDocuments"]) -> 'DocketEntrySecondaryDocuments': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docketNumber"]) -> MetaOapg.properties.docketNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referencedDocketNumberArray"]) -> MetaOapg.properties.referencedDocketNumberArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["textStructured"]) -> 'SourceStructuredData': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["boundary", "docketBadge", "docketEntryDate", "docketEntryPrimaryDocuments", "docketEntrySecondaryDocuments", "docketNumber", "lastFetchDate", "object", "referencedDocketNumberArray", "sortOrder", "text", "textStructured", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DocketEntry':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.docket_entry_primary_documents import DocketEntryPrimaryDocuments
from unicourt_python_sdk.model.docket_entry_secondary_documents import DocketEntrySecondaryDocuments
from unicourt_python_sdk.model.referenced_docket_number import ReferencedDocketNumber
from unicourt_python_sdk.model.source_structured_data import SourceStructuredData
