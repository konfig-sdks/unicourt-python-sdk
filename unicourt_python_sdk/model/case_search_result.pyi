# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CaseSearchResult(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "lastFetchDateWithUpdates",
            "caseStatus",
            "matchedObjectArray",
            "court",
            "filedDate",
            "caseType",
            "lastFetchDate",
            "caseNumber",
            "caseId",
            "caseAPI",
            "courtLocation",
            "participantsLastFetchDate",
            "caseName",
            "firstFetchDate",
            "object",
        }
        
        class properties:
            
            
            class caseAPI(
                schemas.StrSchema
            ):
                pass
            
            
            class caseId(
                schemas.StrSchema
            ):
                pass
            
            
            class caseName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'caseName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class caseNumber(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def caseStatus() -> typing.Type['CaseStatus']:
                return CaseStatus
        
            @staticmethod
            def caseType() -> typing.Type['CaseType']:
                return CaseType
        
            @staticmethod
            def court() -> typing.Type['Court']:
                return Court
        
            @staticmethod
            def courtLocation() -> typing.Type['CourtLocation']:
                return CourtLocation
            
            
            class filedDate(
                schemas.DateTimeSchema
            ):
                pass
            
            
            class firstFetchDate(
                schemas.DateTimeSchema
            ):
                pass
            
            
            class lastFetchDate(
                schemas.DateTimeSchema
            ):
                pass
            
            
            class lastFetchDateWithUpdates(
                schemas.DateTimeSchema
            ):
                pass
            
            
            class matchedObjectArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MatchedObject']:
                        return MatchedObject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['MatchedObject'], typing.List['MatchedObject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'matchedObjectArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MatchedObject':
                    return super().__getitem__(i)
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            
            
            class participantsLastFetchDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'participantsLastFetchDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "caseAPI": caseAPI,
                "caseId": caseId,
                "caseName": caseName,
                "caseNumber": caseNumber,
                "caseStatus": caseStatus,
                "caseType": caseType,
                "court": court,
                "courtLocation": courtLocation,
                "filedDate": filedDate,
                "firstFetchDate": firstFetchDate,
                "lastFetchDate": lastFetchDate,
                "lastFetchDateWithUpdates": lastFetchDateWithUpdates,
                "matchedObjectArray": matchedObjectArray,
                "object": object,
                "participantsLastFetchDate": participantsLastFetchDate,
            }
    
    lastFetchDateWithUpdates: MetaOapg.properties.lastFetchDateWithUpdates
    caseStatus: 'CaseStatus'
    matchedObjectArray: MetaOapg.properties.matchedObjectArray
    court: 'Court'
    filedDate: MetaOapg.properties.filedDate
    caseType: 'CaseType'
    lastFetchDate: MetaOapg.properties.lastFetchDate
    caseNumber: MetaOapg.properties.caseNumber
    caseId: MetaOapg.properties.caseId
    caseAPI: MetaOapg.properties.caseAPI
    courtLocation: 'CourtLocation'
    participantsLastFetchDate: MetaOapg.properties.participantsLastFetchDate
    caseName: MetaOapg.properties.caseName
    firstFetchDate: MetaOapg.properties.firstFetchDate
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseAPI"]) -> MetaOapg.properties.caseAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseId"]) -> MetaOapg.properties.caseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseName"]) -> MetaOapg.properties.caseName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseNumber"]) -> MetaOapg.properties.caseNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseStatus"]) -> 'CaseStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseType"]) -> 'CaseType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["court"]) -> 'Court': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtLocation"]) -> 'CourtLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filedDate"]) -> MetaOapg.properties.filedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDateWithUpdates"]) -> MetaOapg.properties.lastFetchDateWithUpdates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchedObjectArray"]) -> MetaOapg.properties.matchedObjectArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participantsLastFetchDate"]) -> MetaOapg.properties.participantsLastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseAPI", "caseId", "caseName", "caseNumber", "caseStatus", "caseType", "court", "courtLocation", "filedDate", "firstFetchDate", "lastFetchDate", "lastFetchDateWithUpdates", "matchedObjectArray", "object", "participantsLastFetchDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseAPI"]) -> MetaOapg.properties.caseAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseId"]) -> MetaOapg.properties.caseId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseName"]) -> MetaOapg.properties.caseName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseNumber"]) -> MetaOapg.properties.caseNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseStatus"]) -> 'CaseStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseType"]) -> 'CaseType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["court"]) -> 'Court': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtLocation"]) -> 'CourtLocation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filedDate"]) -> MetaOapg.properties.filedDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDateWithUpdates"]) -> MetaOapg.properties.lastFetchDateWithUpdates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchedObjectArray"]) -> MetaOapg.properties.matchedObjectArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participantsLastFetchDate"]) -> MetaOapg.properties.participantsLastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseAPI", "caseId", "caseName", "caseNumber", "caseStatus", "caseType", "court", "courtLocation", "filedDate", "firstFetchDate", "lastFetchDate", "lastFetchDateWithUpdates", "matchedObjectArray", "object", "participantsLastFetchDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        lastFetchDateWithUpdates: typing.Union[MetaOapg.properties.lastFetchDateWithUpdates, str, datetime, ],
        caseStatus: 'CaseStatus',
        matchedObjectArray: typing.Union[MetaOapg.properties.matchedObjectArray, list, tuple, ],
        court: 'Court',
        filedDate: typing.Union[MetaOapg.properties.filedDate, str, datetime, ],
        caseType: 'CaseType',
        lastFetchDate: typing.Union[MetaOapg.properties.lastFetchDate, str, datetime, ],
        caseNumber: typing.Union[MetaOapg.properties.caseNumber, str, ],
        caseId: typing.Union[MetaOapg.properties.caseId, str, ],
        caseAPI: typing.Union[MetaOapg.properties.caseAPI, str, ],
        courtLocation: 'CourtLocation',
        participantsLastFetchDate: typing.Union[MetaOapg.properties.participantsLastFetchDate, None, str, datetime, ],
        caseName: typing.Union[MetaOapg.properties.caseName, None, str, ],
        firstFetchDate: typing.Union[MetaOapg.properties.firstFetchDate, str, datetime, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaseSearchResult':
        return super().__new__(
            cls,
            *args,
            lastFetchDateWithUpdates=lastFetchDateWithUpdates,
            caseStatus=caseStatus,
            matchedObjectArray=matchedObjectArray,
            court=court,
            filedDate=filedDate,
            caseType=caseType,
            lastFetchDate=lastFetchDate,
            caseNumber=caseNumber,
            caseId=caseId,
            caseAPI=caseAPI,
            courtLocation=courtLocation,
            participantsLastFetchDate=participantsLastFetchDate,
            caseName=caseName,
            firstFetchDate=firstFetchDate,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.case_status import CaseStatus
from unicourt_python_sdk.model.case_type import CaseType
from unicourt_python_sdk.model.court import Court
from unicourt_python_sdk.model.court_location import CourtLocation
from unicourt_python_sdk.model.matched_object import MatchedObject
