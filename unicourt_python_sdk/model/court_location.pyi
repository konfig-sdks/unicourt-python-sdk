# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CourtLocation(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "courtLocationId",
            "createdDate",
            "courtServiceStatusAPI",
            "city",
            "stateName",
            "courtsForCourtLocationAPI",
            "name",
            "streetAddress1",
            "streetAddress2",
            "object",
        }
        
        class properties:
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class courtLocationId(
                schemas.StrSchema
            ):
                pass
            
            
            class courtServiceStatusAPI(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'courtServiceStatusAPI':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class courtsForCourtLocationAPI(
                schemas.StrSchema
            ):
                pass
            
            
            class createdDate(
                schemas.DateTimeSchema
            ):
                pass
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            
            
            class stateName(
                schemas.StrSchema
            ):
                pass
            
            
            class streetAddress1(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'streetAddress1':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class streetAddress2(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'streetAddress2':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "city": city,
                "courtLocationId": courtLocationId,
                "courtServiceStatusAPI": courtServiceStatusAPI,
                "courtsForCourtLocationAPI": courtsForCourtLocationAPI,
                "createdDate": createdDate,
                "name": name,
                "object": object,
                "stateName": stateName,
                "streetAddress1": streetAddress1,
                "streetAddress2": streetAddress2,
            }

    
    courtLocationId: MetaOapg.properties.courtLocationId
    createdDate: MetaOapg.properties.createdDate
    courtServiceStatusAPI: MetaOapg.properties.courtServiceStatusAPI
    city: MetaOapg.properties.city
    stateName: MetaOapg.properties.stateName
    courtsForCourtLocationAPI: MetaOapg.properties.courtsForCourtLocationAPI
    name: MetaOapg.properties.name
    streetAddress1: MetaOapg.properties.streetAddress1
    streetAddress2: MetaOapg.properties.streetAddress2
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtLocationId"]) -> MetaOapg.properties.courtLocationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtServiceStatusAPI"]) -> MetaOapg.properties.courtServiceStatusAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtsForCourtLocationAPI"]) -> MetaOapg.properties.courtsForCourtLocationAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateName"]) -> MetaOapg.properties.stateName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetAddress1"]) -> MetaOapg.properties.streetAddress1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streetAddress2"]) -> MetaOapg.properties.streetAddress2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["city", "courtLocationId", "courtServiceStatusAPI", "courtsForCourtLocationAPI", "createdDate", "name", "object", "stateName", "streetAddress1", "streetAddress2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtLocationId"]) -> MetaOapg.properties.courtLocationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtServiceStatusAPI"]) -> MetaOapg.properties.courtServiceStatusAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtsForCourtLocationAPI"]) -> MetaOapg.properties.courtsForCourtLocationAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDate"]) -> MetaOapg.properties.createdDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateName"]) -> MetaOapg.properties.stateName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetAddress1"]) -> MetaOapg.properties.streetAddress1: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streetAddress2"]) -> MetaOapg.properties.streetAddress2: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["city", "courtLocationId", "courtServiceStatusAPI", "courtsForCourtLocationAPI", "createdDate", "name", "object", "stateName", "streetAddress1", "streetAddress2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CourtLocation':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
