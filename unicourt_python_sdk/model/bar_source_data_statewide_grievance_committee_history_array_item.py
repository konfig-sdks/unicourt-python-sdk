# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class BarSourceDataStatewideGrievanceCommitteeHistoryArrayItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "publicComments",
            "finalDecision",
            "finalDecisionDate",
            "grievanceComplaintNumber",
        }
        
        class properties:
            
            
            class finalDecision(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'finalDecision':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class finalDecisionDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'finalDecisionDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class grievanceComplaintNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'grievanceComplaintNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class publicComments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'publicComments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "finalDecision": finalDecision,
                "finalDecisionDate": finalDecisionDate,
                "grievanceComplaintNumber": grievanceComplaintNumber,
                "publicComments": publicComments,
            }
    
    publicComments: MetaOapg.properties.publicComments
    finalDecision: MetaOapg.properties.finalDecision
    finalDecisionDate: MetaOapg.properties.finalDecisionDate
    grievanceComplaintNumber: MetaOapg.properties.grievanceComplaintNumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalDecision"]) -> MetaOapg.properties.finalDecision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalDecisionDate"]) -> MetaOapg.properties.finalDecisionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grievanceComplaintNumber"]) -> MetaOapg.properties.grievanceComplaintNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicComments"]) -> MetaOapg.properties.publicComments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["finalDecision", "finalDecisionDate", "grievanceComplaintNumber", "publicComments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalDecision"]) -> MetaOapg.properties.finalDecision: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalDecisionDate"]) -> MetaOapg.properties.finalDecisionDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grievanceComplaintNumber"]) -> MetaOapg.properties.grievanceComplaintNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicComments"]) -> MetaOapg.properties.publicComments: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["finalDecision", "finalDecisionDate", "grievanceComplaintNumber", "publicComments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        publicComments: typing.Union[MetaOapg.properties.publicComments, None, str, ],
        finalDecision: typing.Union[MetaOapg.properties.finalDecision, None, str, ],
        finalDecisionDate: typing.Union[MetaOapg.properties.finalDecisionDate, None, str, datetime, ],
        grievanceComplaintNumber: typing.Union[MetaOapg.properties.grievanceComplaintNumber, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BarSourceDataStatewideGrievanceCommitteeHistoryArrayItem':
        return super().__new__(
            cls,
            *args,
            publicComments=publicComments,
            finalDecision=finalDecision,
            finalDecisionDate=finalDecisionDate,
            grievanceComplaintNumber=grievanceComplaintNumber,
            _configuration=_configuration,
            **kwargs,
        )
