# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class SOSData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "associatedSoSPersonArray",
            "registeredDate",
            "lastFetchDateWithUpdates",
            "domesticRegistration",
            "nameChangesArray",
            "sosNumber",
            "fein",
            "isActive",
            "lastFetchDate",
            "contact",
            "sosAssociatedNormOrganizationArray",
            "stateCode",
            "firstFetchDate",
            "inactivationDate",
            "object",
            "status",
        }
        
        class properties:
            
            
            class associatedSoSPersonArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AssociatedSoSPerson']:
                        return AssociatedSoSPerson
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AssociatedSoSPerson'], typing.List['AssociatedSoSPerson']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associatedSoSPersonArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AssociatedSoSPerson':
                    return super().__getitem__(i)
        
            @staticmethod
            def contact() -> typing.Type['Contact']:
                return Contact
            domesticRegistration = schemas.BoolSchema
            
            
            class fein(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 16
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fein':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firstFetchDate(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
            class inactivationDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inactivationDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isActive = schemas.BoolSchema
            
            
            class lastFetchDate(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
            class lastFetchDateWithUpdates(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
            class nameChangesArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SOSNameChange']:
                        return SOSNameChange
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SOSNameChange'], typing.List['SOSNameChange']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nameChangesArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SOSNameChange':
                    return super().__getitem__(i)
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 7
            
            
            class registeredDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'registeredDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sosAssociatedNormOrganizationArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SOSAssociatedNormOrganization']:
                        return SOSAssociatedNormOrganization
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SOSAssociatedNormOrganization'], typing.List['SOSAssociatedNormOrganization']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sosAssociatedNormOrganizationArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SOSAssociatedNormOrganization':
                    return super().__getitem__(i)
            
            
            class sosNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sosNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stateCode(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2
            
            
            class status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Active": "ACTIVE",
                    }
                    max_length = 10
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("Active")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "associatedSoSPersonArray": associatedSoSPersonArray,
                "contact": contact,
                "domesticRegistration": domesticRegistration,
                "fein": fein,
                "firstFetchDate": firstFetchDate,
                "inactivationDate": inactivationDate,
                "isActive": isActive,
                "lastFetchDate": lastFetchDate,
                "lastFetchDateWithUpdates": lastFetchDateWithUpdates,
                "nameChangesArray": nameChangesArray,
                "object": object,
                "registeredDate": registeredDate,
                "sosAssociatedNormOrganizationArray": sosAssociatedNormOrganizationArray,
                "sosNumber": sosNumber,
                "stateCode": stateCode,
                "status": status,
            }
    
    associatedSoSPersonArray: MetaOapg.properties.associatedSoSPersonArray
    registeredDate: MetaOapg.properties.registeredDate
    lastFetchDateWithUpdates: MetaOapg.properties.lastFetchDateWithUpdates
    domesticRegistration: MetaOapg.properties.domesticRegistration
    nameChangesArray: MetaOapg.properties.nameChangesArray
    sosNumber: MetaOapg.properties.sosNumber
    fein: MetaOapg.properties.fein
    isActive: MetaOapg.properties.isActive
    lastFetchDate: MetaOapg.properties.lastFetchDate
    contact: 'Contact'
    sosAssociatedNormOrganizationArray: MetaOapg.properties.sosAssociatedNormOrganizationArray
    stateCode: MetaOapg.properties.stateCode
    firstFetchDate: MetaOapg.properties.firstFetchDate
    inactivationDate: MetaOapg.properties.inactivationDate
    object: MetaOapg.properties.object
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedSoSPersonArray"]) -> MetaOapg.properties.associatedSoSPersonArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domesticRegistration"]) -> MetaOapg.properties.domesticRegistration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fein"]) -> MetaOapg.properties.fein: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inactivationDate"]) -> MetaOapg.properties.inactivationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDateWithUpdates"]) -> MetaOapg.properties.lastFetchDateWithUpdates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameChangesArray"]) -> MetaOapg.properties.nameChangesArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registeredDate"]) -> MetaOapg.properties.registeredDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sosAssociatedNormOrganizationArray"]) -> MetaOapg.properties.sosAssociatedNormOrganizationArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sosNumber"]) -> MetaOapg.properties.sosNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateCode"]) -> MetaOapg.properties.stateCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["associatedSoSPersonArray", "contact", "domesticRegistration", "fein", "firstFetchDate", "inactivationDate", "isActive", "lastFetchDate", "lastFetchDateWithUpdates", "nameChangesArray", "object", "registeredDate", "sosAssociatedNormOrganizationArray", "sosNumber", "stateCode", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedSoSPersonArray"]) -> MetaOapg.properties.associatedSoSPersonArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> 'Contact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domesticRegistration"]) -> MetaOapg.properties.domesticRegistration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fein"]) -> MetaOapg.properties.fein: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inactivationDate"]) -> MetaOapg.properties.inactivationDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isActive"]) -> MetaOapg.properties.isActive: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDateWithUpdates"]) -> MetaOapg.properties.lastFetchDateWithUpdates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameChangesArray"]) -> MetaOapg.properties.nameChangesArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registeredDate"]) -> MetaOapg.properties.registeredDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sosAssociatedNormOrganizationArray"]) -> MetaOapg.properties.sosAssociatedNormOrganizationArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sosNumber"]) -> MetaOapg.properties.sosNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateCode"]) -> MetaOapg.properties.stateCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["associatedSoSPersonArray", "contact", "domesticRegistration", "fein", "firstFetchDate", "inactivationDate", "isActive", "lastFetchDate", "lastFetchDateWithUpdates", "nameChangesArray", "object", "registeredDate", "sosAssociatedNormOrganizationArray", "sosNumber", "stateCode", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        associatedSoSPersonArray: typing.Union[MetaOapg.properties.associatedSoSPersonArray, list, tuple, ],
        registeredDate: typing.Union[MetaOapg.properties.registeredDate, None, str, datetime, ],
        lastFetchDateWithUpdates: typing.Union[MetaOapg.properties.lastFetchDateWithUpdates, str, datetime, ],
        domesticRegistration: typing.Union[MetaOapg.properties.domesticRegistration, bool, ],
        nameChangesArray: typing.Union[MetaOapg.properties.nameChangesArray, list, tuple, ],
        sosNumber: typing.Union[MetaOapg.properties.sosNumber, None, str, ],
        fein: typing.Union[MetaOapg.properties.fein, None, str, ],
        isActive: typing.Union[MetaOapg.properties.isActive, bool, ],
        lastFetchDate: typing.Union[MetaOapg.properties.lastFetchDate, str, datetime, ],
        contact: 'Contact',
        sosAssociatedNormOrganizationArray: typing.Union[MetaOapg.properties.sosAssociatedNormOrganizationArray, list, tuple, ],
        stateCode: typing.Union[MetaOapg.properties.stateCode, str, ],
        firstFetchDate: typing.Union[MetaOapg.properties.firstFetchDate, str, datetime, ],
        inactivationDate: typing.Union[MetaOapg.properties.inactivationDate, None, str, datetime, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        status: typing.Union[MetaOapg.properties.status, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SOSData':
        return super().__new__(
            cls,
            *args,
            associatedSoSPersonArray=associatedSoSPersonArray,
            registeredDate=registeredDate,
            lastFetchDateWithUpdates=lastFetchDateWithUpdates,
            domesticRegistration=domesticRegistration,
            nameChangesArray=nameChangesArray,
            sosNumber=sosNumber,
            fein=fein,
            isActive=isActive,
            lastFetchDate=lastFetchDate,
            contact=contact,
            sosAssociatedNormOrganizationArray=sosAssociatedNormOrganizationArray,
            stateCode=stateCode,
            firstFetchDate=firstFetchDate,
            inactivationDate=inactivationDate,
            object=object,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.associated_so_s_person import AssociatedSoSPerson
from unicourt_python_sdk.model.contact import Contact
from unicourt_python_sdk.model.sos_associated_norm_organization import SOSAssociatedNormOrganization
from unicourt_python_sdk.model.sos_name_change import SOSNameChange
