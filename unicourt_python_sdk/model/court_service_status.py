# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CourtServiceStatus(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "caseClassIdArray",
            "courtIdArray",
            "courtServiceStatusId",
            "serviceStatusAsOn",
            "caseTrackServiceStatus",
            "caseUpdateServiceStatus",
            "caseDocumentOrderServiceStatus",
            "courtLocationIdArray",
            "object",
        }
        
        class properties:
        
            @staticmethod
            def caseClassIdArray() -> typing.Type['CourtServiceStatusCaseClassIdArray']:
                return CourtServiceStatusCaseClassIdArray
        
            @staticmethod
            def caseDocumentOrderServiceStatus() -> typing.Type['ServiceStatus']:
                return ServiceStatus
        
            @staticmethod
            def caseTrackServiceStatus() -> typing.Type['ServiceStatus']:
                return ServiceStatus
        
            @staticmethod
            def caseUpdateServiceStatus() -> typing.Type['ServiceStatus']:
                return ServiceStatus
        
            @staticmethod
            def courtIdArray() -> typing.Type['CourtServiceStatusCourtIdArray']:
                return CourtServiceStatusCourtIdArray
        
            @staticmethod
            def courtLocationIdArray() -> typing.Type['CourtServiceStatusCourtLocationIdArray']:
                return CourtServiceStatusCourtLocationIdArray
            
            
            class courtServiceStatusId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            
            
            class serviceStatusAsOn(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 25
                    min_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'serviceStatusAsOn':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "caseClassIdArray": caseClassIdArray,
                "caseDocumentOrderServiceStatus": caseDocumentOrderServiceStatus,
                "caseTrackServiceStatus": caseTrackServiceStatus,
                "caseUpdateServiceStatus": caseUpdateServiceStatus,
                "courtIdArray": courtIdArray,
                "courtLocationIdArray": courtLocationIdArray,
                "courtServiceStatusId": courtServiceStatusId,
                "object": object,
                "serviceStatusAsOn": serviceStatusAsOn,
            }

    
    caseClassIdArray: 'CourtServiceStatusCaseClassIdArray'
    courtIdArray: 'CourtServiceStatusCourtIdArray'
    courtServiceStatusId: MetaOapg.properties.courtServiceStatusId
    serviceStatusAsOn: MetaOapg.properties.serviceStatusAsOn
    caseTrackServiceStatus: 'ServiceStatus'
    caseUpdateServiceStatus: 'ServiceStatus'
    caseDocumentOrderServiceStatus: 'ServiceStatus'
    courtLocationIdArray: 'CourtServiceStatusCourtLocationIdArray'
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseClassIdArray"]) -> 'CourtServiceStatusCaseClassIdArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseDocumentOrderServiceStatus"]) -> 'ServiceStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseTrackServiceStatus"]) -> 'ServiceStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseUpdateServiceStatus"]) -> 'ServiceStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtIdArray"]) -> 'CourtServiceStatusCourtIdArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtLocationIdArray"]) -> 'CourtServiceStatusCourtLocationIdArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtServiceStatusId"]) -> MetaOapg.properties.courtServiceStatusId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceStatusAsOn"]) -> MetaOapg.properties.serviceStatusAsOn: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseClassIdArray", "caseDocumentOrderServiceStatus", "caseTrackServiceStatus", "caseUpdateServiceStatus", "courtIdArray", "courtLocationIdArray", "courtServiceStatusId", "object", "serviceStatusAsOn", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseClassIdArray"]) -> 'CourtServiceStatusCaseClassIdArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseDocumentOrderServiceStatus"]) -> 'ServiceStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseTrackServiceStatus"]) -> 'ServiceStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseUpdateServiceStatus"]) -> 'ServiceStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtIdArray"]) -> 'CourtServiceStatusCourtIdArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtLocationIdArray"]) -> 'CourtServiceStatusCourtLocationIdArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtServiceStatusId"]) -> MetaOapg.properties.courtServiceStatusId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceStatusAsOn"]) -> MetaOapg.properties.serviceStatusAsOn: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseClassIdArray", "caseDocumentOrderServiceStatus", "caseTrackServiceStatus", "caseUpdateServiceStatus", "courtIdArray", "courtLocationIdArray", "courtServiceStatusId", "object", "serviceStatusAsOn", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CourtServiceStatus':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.court_service_status_case_class_id_array import CourtServiceStatusCaseClassIdArray
from unicourt_python_sdk.model.court_service_status_court_id_array import CourtServiceStatusCourtIdArray
from unicourt_python_sdk.model.court_service_status_court_location_id_array import CourtServiceStatusCourtLocationIdArray
from unicourt_python_sdk.model.service_status import ServiceStatus
