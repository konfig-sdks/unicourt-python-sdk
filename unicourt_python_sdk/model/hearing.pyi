# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class Hearing(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "lastFetchDate",
            "hearingStructured",
            "hearingDate",
            "hearingDescription",
            "location",
            "firstFetchDate",
            "object",
        }
        
        class properties:
            
            
            class firstFetchDate(
                schemas.StrSchema
            ):
                pass
            
            
            class hearingDate(
                schemas.DateTimeSchema
            ):
                pass
            
            
            class hearingDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hearingDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def hearingStructured() -> typing.Type['SourceStructuredData']:
                return SourceStructuredData
            
            
            class lastFetchDate(
                schemas.StrSchema
            ):
                pass
            
            
            class location(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'location':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "firstFetchDate": firstFetchDate,
                "hearingDate": hearingDate,
                "hearingDescription": hearingDescription,
                "hearingStructured": hearingStructured,
                "lastFetchDate": lastFetchDate,
                "location": location,
                "object": object,
            }

    
    lastFetchDate: MetaOapg.properties.lastFetchDate
    hearingStructured: 'SourceStructuredData'
    hearingDate: MetaOapg.properties.hearingDate
    hearingDescription: MetaOapg.properties.hearingDescription
    location: MetaOapg.properties.location
    firstFetchDate: MetaOapg.properties.firstFetchDate
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hearingDate"]) -> MetaOapg.properties.hearingDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hearingDescription"]) -> MetaOapg.properties.hearingDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hearingStructured"]) -> 'SourceStructuredData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstFetchDate", "hearingDate", "hearingDescription", "hearingStructured", "lastFetchDate", "location", "object", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hearingDate"]) -> MetaOapg.properties.hearingDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hearingDescription"]) -> MetaOapg.properties.hearingDescription: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hearingStructured"]) -> 'SourceStructuredData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstFetchDate", "hearingDate", "hearingDescription", "hearingStructured", "lastFetchDate", "location", "object", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Hearing':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.source_structured_data import SourceStructuredData
