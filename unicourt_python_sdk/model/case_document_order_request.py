# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CaseDocumentOrderRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "isPreviewOnly",
            "caseDocumentId",
        }
        
        class properties:
            
            
            class caseDocumentId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            isPreviewOnly = schemas.BoolSchema
        
            @staticmethod
            def pacerOptions() -> typing.Type['CaseDocumentOrderPacerOptions']:
                return CaseDocumentOrderPacerOptions
            __annotations__ = {
                "caseDocumentId": caseDocumentId,
                "isPreviewOnly": isPreviewOnly,
                "pacerOptions": pacerOptions,
            }
    
    isPreviewOnly: MetaOapg.properties.isPreviewOnly
    caseDocumentId: MetaOapg.properties.caseDocumentId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseDocumentId"]) -> MetaOapg.properties.caseDocumentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPreviewOnly"]) -> MetaOapg.properties.isPreviewOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pacerOptions"]) -> 'CaseDocumentOrderPacerOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseDocumentId", "isPreviewOnly", "pacerOptions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseDocumentId"]) -> MetaOapg.properties.caseDocumentId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPreviewOnly"]) -> MetaOapg.properties.isPreviewOnly: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pacerOptions"]) -> typing.Union['CaseDocumentOrderPacerOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseDocumentId", "isPreviewOnly", "pacerOptions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        isPreviewOnly: typing.Union[MetaOapg.properties.isPreviewOnly, bool, ],
        caseDocumentId: typing.Union[MetaOapg.properties.caseDocumentId, str, ],
        pacerOptions: typing.Union['CaseDocumentOrderPacerOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaseDocumentOrderRequest':
        return super().__new__(
            cls,
            *args,
            isPreviewOnly=isPreviewOnly,
            caseDocumentId=caseDocumentId,
            pacerOptions=pacerOptions,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.case_document_order_pacer_options import CaseDocumentOrderPacerOptions
