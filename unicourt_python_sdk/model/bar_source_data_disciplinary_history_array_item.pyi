# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class BarSourceDataDisciplinaryHistoryArrayItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "note",
            "typeOfAction",
            "contactId",
            "entryDate",
            "link",
            "ruleNumber",
            "sectionDate",
            "rule",
            "stayDate",
            "reinstatedDate",
            "complaint",
            "caseNumber",
            "action",
            "definition",
            "information",
            "term",
            "dateOfAction",
            "supremeCourt",
            "probationDate",
            "disciplinaryDecision",
            "status",
        }
        
        class properties:
            
            
            class action(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'action':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class caseNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'caseNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class complaint(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'complaint':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class contactId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'contactId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class dateOfAction(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dateOfAction':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class definition(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'definition':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class disciplinaryDecision(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'disciplinaryDecision':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class entryDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entryDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class information(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'information':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class note(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'note':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class probationDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'probationDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class reinstatedDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reinstatedDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class rule(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rule':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ruleNumber(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ruleNumber':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sectionDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sectionDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class status(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stayDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stayDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class supremeCourt(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supremeCourt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class term(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'term':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class typeOfAction(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'typeOfAction':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "action": action,
                "caseNumber": caseNumber,
                "complaint": complaint,
                "contactId": contactId,
                "dateOfAction": dateOfAction,
                "definition": definition,
                "disciplinaryDecision": disciplinaryDecision,
                "entryDate": entryDate,
                "information": information,
                "link": link,
                "note": note,
                "probationDate": probationDate,
                "reinstatedDate": reinstatedDate,
                "rule": rule,
                "ruleNumber": ruleNumber,
                "sectionDate": sectionDate,
                "status": status,
                "stayDate": stayDate,
                "supremeCourt": supremeCourt,
                "term": term,
                "typeOfAction": typeOfAction,
            }
    
    note: MetaOapg.properties.note
    typeOfAction: MetaOapg.properties.typeOfAction
    contactId: MetaOapg.properties.contactId
    entryDate: MetaOapg.properties.entryDate
    link: MetaOapg.properties.link
    ruleNumber: MetaOapg.properties.ruleNumber
    sectionDate: MetaOapg.properties.sectionDate
    rule: MetaOapg.properties.rule
    stayDate: MetaOapg.properties.stayDate
    reinstatedDate: MetaOapg.properties.reinstatedDate
    complaint: MetaOapg.properties.complaint
    caseNumber: MetaOapg.properties.caseNumber
    action: MetaOapg.properties.action
    definition: MetaOapg.properties.definition
    information: MetaOapg.properties.information
    term: MetaOapg.properties.term
    dateOfAction: MetaOapg.properties.dateOfAction
    supremeCourt: MetaOapg.properties.supremeCourt
    probationDate: MetaOapg.properties.probationDate
    disciplinaryDecision: MetaOapg.properties.disciplinaryDecision
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseNumber"]) -> MetaOapg.properties.caseNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complaint"]) -> MetaOapg.properties.complaint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contactId"]) -> MetaOapg.properties.contactId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dateOfAction"]) -> MetaOapg.properties.dateOfAction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definition"]) -> MetaOapg.properties.definition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disciplinaryDecision"]) -> MetaOapg.properties.disciplinaryDecision: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entryDate"]) -> MetaOapg.properties.entryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["information"]) -> MetaOapg.properties.information: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["probationDate"]) -> MetaOapg.properties.probationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reinstatedDate"]) -> MetaOapg.properties.reinstatedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rule"]) -> MetaOapg.properties.rule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ruleNumber"]) -> MetaOapg.properties.ruleNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sectionDate"]) -> MetaOapg.properties.sectionDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stayDate"]) -> MetaOapg.properties.stayDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supremeCourt"]) -> MetaOapg.properties.supremeCourt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeOfAction"]) -> MetaOapg.properties.typeOfAction: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["action", "caseNumber", "complaint", "contactId", "dateOfAction", "definition", "disciplinaryDecision", "entryDate", "information", "link", "note", "probationDate", "reinstatedDate", "rule", "ruleNumber", "sectionDate", "status", "stayDate", "supremeCourt", "term", "typeOfAction", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseNumber"]) -> MetaOapg.properties.caseNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complaint"]) -> MetaOapg.properties.complaint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contactId"]) -> MetaOapg.properties.contactId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dateOfAction"]) -> MetaOapg.properties.dateOfAction: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definition"]) -> MetaOapg.properties.definition: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disciplinaryDecision"]) -> MetaOapg.properties.disciplinaryDecision: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entryDate"]) -> MetaOapg.properties.entryDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["information"]) -> MetaOapg.properties.information: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["note"]) -> MetaOapg.properties.note: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["probationDate"]) -> MetaOapg.properties.probationDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reinstatedDate"]) -> MetaOapg.properties.reinstatedDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rule"]) -> MetaOapg.properties.rule: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ruleNumber"]) -> MetaOapg.properties.ruleNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sectionDate"]) -> MetaOapg.properties.sectionDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stayDate"]) -> MetaOapg.properties.stayDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supremeCourt"]) -> MetaOapg.properties.supremeCourt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeOfAction"]) -> MetaOapg.properties.typeOfAction: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action", "caseNumber", "complaint", "contactId", "dateOfAction", "definition", "disciplinaryDecision", "entryDate", "information", "link", "note", "probationDate", "reinstatedDate", "rule", "ruleNumber", "sectionDate", "status", "stayDate", "supremeCourt", "term", "typeOfAction", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        note: typing.Union[MetaOapg.properties.note, None, str, ],
        typeOfAction: typing.Union[MetaOapg.properties.typeOfAction, None, str, ],
        contactId: typing.Union[MetaOapg.properties.contactId, None, str, ],
        entryDate: typing.Union[MetaOapg.properties.entryDate, None, str, datetime, ],
        link: typing.Union[MetaOapg.properties.link, None, str, ],
        ruleNumber: typing.Union[MetaOapg.properties.ruleNumber, None, str, ],
        sectionDate: typing.Union[MetaOapg.properties.sectionDate, None, str, datetime, ],
        rule: typing.Union[MetaOapg.properties.rule, None, str, ],
        stayDate: typing.Union[MetaOapg.properties.stayDate, None, str, datetime, ],
        reinstatedDate: typing.Union[MetaOapg.properties.reinstatedDate, None, str, datetime, ],
        complaint: typing.Union[MetaOapg.properties.complaint, None, str, ],
        caseNumber: typing.Union[MetaOapg.properties.caseNumber, None, str, ],
        action: typing.Union[MetaOapg.properties.action, None, str, ],
        definition: typing.Union[MetaOapg.properties.definition, None, str, ],
        information: typing.Union[MetaOapg.properties.information, None, str, ],
        term: typing.Union[MetaOapg.properties.term, None, str, ],
        dateOfAction: typing.Union[MetaOapg.properties.dateOfAction, None, str, datetime, ],
        supremeCourt: typing.Union[MetaOapg.properties.supremeCourt, None, str, ],
        probationDate: typing.Union[MetaOapg.properties.probationDate, None, str, datetime, ],
        disciplinaryDecision: typing.Union[MetaOapg.properties.disciplinaryDecision, None, str, ],
        status: typing.Union[MetaOapg.properties.status, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BarSourceDataDisciplinaryHistoryArrayItem':
        return super().__new__(
            cls,
            *args,
            note=note,
            typeOfAction=typeOfAction,
            contactId=contactId,
            entryDate=entryDate,
            link=link,
            ruleNumber=ruleNumber,
            sectionDate=sectionDate,
            rule=rule,
            stayDate=stayDate,
            reinstatedDate=reinstatedDate,
            complaint=complaint,
            caseNumber=caseNumber,
            action=action,
            definition=definition,
            information=information,
            term=term,
            dateOfAction=dateOfAction,
            supremeCourt=supremeCourt,
            probationDate=probationDate,
            disciplinaryDecision=disciplinaryDecision,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
