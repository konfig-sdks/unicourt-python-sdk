# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class BarSourceData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "insurance",
            "statusDate",
            "clientsRepresentedArray",
            "attorneyGroup",
            "bio",
            "firmSize",
            "appellateCourtDistrict",
            "administrativeActionsArray",
            "legalSpecialityArray",
            "employmentHistoryArray",
            "firstAdmittedYear",
            "parish",
            "authorized",
            "sectionsArray",
            "nextRenewalDate",
            "judicialDistrict",
            "yearsOfPractice",
            "admissionType",
            "relatedCasesArray",
            "profileLastCertified",
            "jurisType",
            "otherNameArray",
            "statusHistoryArray",
            "nextRegistration",
            "barLawFirm",
            "inGoodStanding",
            "dismissalsArray",
            "district",
            "firmWebsite",
            "courtServiceEmail",
            "name",
            "appellateDivisionDepartment",
            "position",
            "pendingProceedingArray",
            "servicesArray",
            "barStatusArray",
            "object",
            "status",
            "circuit",
            "statewideGrievanceCommitteeHistoryArray",
            "boardDistrict",
            "practiceAreaArray",
            "licenseType",
            "courtOfAdmissions",
            "sourceInfo",
            "advancedDegreeArray",
            "homeCounty",
            "practiceLocationArray",
            "committeesArray",
            "publicHearingArray",
            "courtHistoryArray",
            "statusHint",
            "lastRenewalDate",
            "expirationDate",
            "barServiceClass",
            "comments",
            "disciplineSummariesArray",
            "otherJurisdictionArray",
            "firstAdmittedDate",
            "involvementsArray",
            "lawSchoolArray",
            "tenYearDisciplineArray",
            "undergraduateSchool",
            "feesOptionsArray",
            "privateLawPractice",
            "boardCertificationsArray",
            "openActionStatusArray",
            "disciplinaryHistoryArray",
            "reasonForInactivation",
            "languagesArray",
        }
        
        class properties:
        
            @staticmethod
            def administrativeActionsArray() -> typing.Type['BarSourceDataAdministrativeActionsArray']:
                return BarSourceDataAdministrativeActionsArray
            
            
            class admissionType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'admissionType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def advancedDegreeArray() -> typing.Type['BarSourceDataAdvancedDegreeArray']:
                return BarSourceDataAdvancedDegreeArray
            
            
            class appellateCourtDistrict(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'appellateCourtDistrict':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class appellateDivisionDepartment(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'appellateDivisionDepartment':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class attorneyGroup(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'attorneyGroup':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class authorized(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'authorized':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class barLawFirm(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'barLawFirm':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class barServiceClass(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'barServiceClass':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def barStatusArray() -> typing.Type['BarSourceDataBarStatusArray']:
                return BarSourceDataBarStatusArray
            
            
            class bio(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 5000
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bio':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def boardCertificationsArray() -> typing.Type['BarSourceDataBoardCertificationsArray']:
                return BarSourceDataBoardCertificationsArray
            
            
            class boardDistrict(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'boardDistrict':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class circuit(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'circuit':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def clientsRepresentedArray() -> typing.Type['BarSourceDataClientsRepresentedArray']:
                return BarSourceDataClientsRepresentedArray
            
            
            class comments(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def committeesArray() -> typing.Type['BarSourceDataCommitteesArray']:
                return BarSourceDataCommitteesArray
        
            @staticmethod
            def courtHistoryArray() -> typing.Type['BarSourceDataCourtHistoryArray']:
                return BarSourceDataCourtHistoryArray
        
            @staticmethod
            def courtOfAdmissions() -> typing.Type['BarSourceDataCourtOfAdmissions']:
                return BarSourceDataCourtOfAdmissions
            
            
            class courtServiceEmail(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'courtServiceEmail':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def disciplinaryHistoryArray() -> typing.Type['BarSourceDataDisciplinaryHistoryArray']:
                return BarSourceDataDisciplinaryHistoryArray
        
            @staticmethod
            def disciplineSummariesArray() -> typing.Type['BarSourceDataDisciplineSummariesArray']:
                return BarSourceDataDisciplineSummariesArray
        
            @staticmethod
            def dismissalsArray() -> typing.Type['BarSourceDataDismissalsArray']:
                return BarSourceDataDismissalsArray
            
            
            class district(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'district':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def employmentHistoryArray() -> typing.Type['BarSourceDataEmploymentHistoryArray']:
                return BarSourceDataEmploymentHistoryArray
            
            
            class expirationDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'expirationDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def feesOptionsArray() -> typing.Type['BarSourceDataFeesOptionsArray']:
                return BarSourceDataFeesOptionsArray
            
            
            class firmSize(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firmSize':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firmWebsite(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 1000
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firmWebsite':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firstAdmittedDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstAdmittedDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firstAdmittedYear(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstAdmittedYear':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class homeCounty(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'homeCounty':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class inGoodStanding(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'inGoodStanding':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class insurance(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 500
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'insurance':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def involvementsArray() -> typing.Type['BarSourceDataInvolvementsArray']:
                return BarSourceDataInvolvementsArray
            
            
            class judicialDistrict(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'judicialDistrict':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class jurisType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'jurisType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def languagesArray() -> typing.Type['BarSourceDataLanguagesArray']:
                return BarSourceDataLanguagesArray
            
            
            class lastRenewalDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastRenewalDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def lawSchoolArray() -> typing.Type['BarSourceDataLawSchoolArray']:
                return BarSourceDataLawSchoolArray
        
            @staticmethod
            def legalSpecialityArray() -> typing.Type['BarSourceDataLegalSpecialityArray']:
                return BarSourceDataLegalSpecialityArray
            
            
            class licenseType(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'licenseType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def name() -> typing.Type['BarSourceDataName']:
                return BarSourceDataName
            
            
            class nextRegistration(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nextRegistration':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class nextRenewalDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nextRenewalDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 13
        
            @staticmethod
            def openActionStatusArray() -> typing.Type['BarSourceDataOpenActionStatusArray']:
                return BarSourceDataOpenActionStatusArray
        
            @staticmethod
            def otherJurisdictionArray() -> typing.Type['BarSourceDataOtherJurisdictionArray']:
                return BarSourceDataOtherJurisdictionArray
        
            @staticmethod
            def otherNameArray() -> typing.Type['BarSourceDataOtherNameArray']:
                return BarSourceDataOtherNameArray
            
            
            class parish(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parish':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def pendingProceedingArray() -> typing.Type['BarSourceDataPendingProceedingArray']:
                return BarSourceDataPendingProceedingArray
            
            
            class position(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'position':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def practiceAreaArray() -> typing.Type['BarSourceDataPracticeAreaArray']:
                return BarSourceDataPracticeAreaArray
        
            @staticmethod
            def practiceLocationArray() -> typing.Type['BarSourceDataPracticeLocationArray']:
                return BarSourceDataPracticeLocationArray
            
            
            class privateLawPractice(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'privateLawPractice':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class profileLastCertified(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'profileLastCertified':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def publicHearingArray() -> typing.Type['BarSourceDataPublicHearingArray']:
                return BarSourceDataPublicHearingArray
        
            @staticmethod
            def reasonForInactivation() -> typing.Type['BarSourceDataReasonForInactivation']:
                return BarSourceDataReasonForInactivation
        
            @staticmethod
            def relatedCasesArray() -> typing.Type['BarSourceDataRelatedCasesArray']:
                return BarSourceDataRelatedCasesArray
        
            @staticmethod
            def sectionsArray() -> typing.Type['BarSourceDataSectionsArray']:
                return BarSourceDataSectionsArray
        
            @staticmethod
            def servicesArray() -> typing.Type['BarSourceDataServicesArray']:
                return BarSourceDataServicesArray
        
            @staticmethod
            def sourceInfo() -> typing.Type['BarSourceDataSourceInfo']:
                return BarSourceDataSourceInfo
        
            @staticmethod
            def statewideGrievanceCommitteeHistoryArray() -> typing.Type['BarSourceDataStatewideGrievanceCommitteeHistoryArray']:
                return BarSourceDataStatewideGrievanceCommitteeHistoryArray
            
            
            class status(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 500
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class statusDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statusDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class statusHint(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 500
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statusHint':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def statusHistoryArray() -> typing.Type['BarSourceDataStatusHistoryArray']:
                return BarSourceDataStatusHistoryArray
        
            @staticmethod
            def tenYearDisciplineArray() -> typing.Type['BarSourceDataTenYearDisciplineArray']:
                return BarSourceDataTenYearDisciplineArray
            
            
            class undergraduateSchool(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'undergraduateSchool':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class yearsOfPractice(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'yearsOfPractice':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "administrativeActionsArray": administrativeActionsArray,
                "admissionType": admissionType,
                "advancedDegreeArray": advancedDegreeArray,
                "appellateCourtDistrict": appellateCourtDistrict,
                "appellateDivisionDepartment": appellateDivisionDepartment,
                "attorneyGroup": attorneyGroup,
                "authorized": authorized,
                "barLawFirm": barLawFirm,
                "barServiceClass": barServiceClass,
                "barStatusArray": barStatusArray,
                "bio": bio,
                "boardCertificationsArray": boardCertificationsArray,
                "boardDistrict": boardDistrict,
                "circuit": circuit,
                "clientsRepresentedArray": clientsRepresentedArray,
                "comments": comments,
                "committeesArray": committeesArray,
                "courtHistoryArray": courtHistoryArray,
                "courtOfAdmissions": courtOfAdmissions,
                "courtServiceEmail": courtServiceEmail,
                "disciplinaryHistoryArray": disciplinaryHistoryArray,
                "disciplineSummariesArray": disciplineSummariesArray,
                "dismissalsArray": dismissalsArray,
                "district": district,
                "employmentHistoryArray": employmentHistoryArray,
                "expirationDate": expirationDate,
                "feesOptionsArray": feesOptionsArray,
                "firmSize": firmSize,
                "firmWebsite": firmWebsite,
                "firstAdmittedDate": firstAdmittedDate,
                "firstAdmittedYear": firstAdmittedYear,
                "homeCounty": homeCounty,
                "inGoodStanding": inGoodStanding,
                "insurance": insurance,
                "involvementsArray": involvementsArray,
                "judicialDistrict": judicialDistrict,
                "jurisType": jurisType,
                "languagesArray": languagesArray,
                "lastRenewalDate": lastRenewalDate,
                "lawSchoolArray": lawSchoolArray,
                "legalSpecialityArray": legalSpecialityArray,
                "licenseType": licenseType,
                "name": name,
                "nextRegistration": nextRegistration,
                "nextRenewalDate": nextRenewalDate,
                "object": object,
                "openActionStatusArray": openActionStatusArray,
                "otherJurisdictionArray": otherJurisdictionArray,
                "otherNameArray": otherNameArray,
                "parish": parish,
                "pendingProceedingArray": pendingProceedingArray,
                "position": position,
                "practiceAreaArray": practiceAreaArray,
                "practiceLocationArray": practiceLocationArray,
                "privateLawPractice": privateLawPractice,
                "profileLastCertified": profileLastCertified,
                "publicHearingArray": publicHearingArray,
                "reasonForInactivation": reasonForInactivation,
                "relatedCasesArray": relatedCasesArray,
                "sectionsArray": sectionsArray,
                "servicesArray": servicesArray,
                "sourceInfo": sourceInfo,
                "statewideGrievanceCommitteeHistoryArray": statewideGrievanceCommitteeHistoryArray,
                "status": status,
                "statusDate": statusDate,
                "statusHint": statusHint,
                "statusHistoryArray": statusHistoryArray,
                "tenYearDisciplineArray": tenYearDisciplineArray,
                "undergraduateSchool": undergraduateSchool,
                "yearsOfPractice": yearsOfPractice,
            }
    
    insurance: MetaOapg.properties.insurance
    statusDate: MetaOapg.properties.statusDate
    clientsRepresentedArray: 'BarSourceDataClientsRepresentedArray'
    attorneyGroup: MetaOapg.properties.attorneyGroup
    bio: MetaOapg.properties.bio
    firmSize: MetaOapg.properties.firmSize
    appellateCourtDistrict: MetaOapg.properties.appellateCourtDistrict
    administrativeActionsArray: 'BarSourceDataAdministrativeActionsArray'
    legalSpecialityArray: 'BarSourceDataLegalSpecialityArray'
    employmentHistoryArray: 'BarSourceDataEmploymentHistoryArray'
    firstAdmittedYear: MetaOapg.properties.firstAdmittedYear
    parish: MetaOapg.properties.parish
    authorized: MetaOapg.properties.authorized
    sectionsArray: 'BarSourceDataSectionsArray'
    nextRenewalDate: MetaOapg.properties.nextRenewalDate
    judicialDistrict: MetaOapg.properties.judicialDistrict
    yearsOfPractice: MetaOapg.properties.yearsOfPractice
    admissionType: MetaOapg.properties.admissionType
    relatedCasesArray: 'BarSourceDataRelatedCasesArray'
    profileLastCertified: MetaOapg.properties.profileLastCertified
    jurisType: MetaOapg.properties.jurisType
    otherNameArray: 'BarSourceDataOtherNameArray'
    statusHistoryArray: 'BarSourceDataStatusHistoryArray'
    nextRegistration: MetaOapg.properties.nextRegistration
    barLawFirm: MetaOapg.properties.barLawFirm
    inGoodStanding: MetaOapg.properties.inGoodStanding
    dismissalsArray: 'BarSourceDataDismissalsArray'
    district: MetaOapg.properties.district
    firmWebsite: MetaOapg.properties.firmWebsite
    courtServiceEmail: MetaOapg.properties.courtServiceEmail
    name: 'BarSourceDataName'
    appellateDivisionDepartment: MetaOapg.properties.appellateDivisionDepartment
    position: MetaOapg.properties.position
    pendingProceedingArray: 'BarSourceDataPendingProceedingArray'
    servicesArray: 'BarSourceDataServicesArray'
    barStatusArray: 'BarSourceDataBarStatusArray'
    object: MetaOapg.properties.object
    status: MetaOapg.properties.status
    circuit: MetaOapg.properties.circuit
    statewideGrievanceCommitteeHistoryArray: 'BarSourceDataStatewideGrievanceCommitteeHistoryArray'
    boardDistrict: MetaOapg.properties.boardDistrict
    practiceAreaArray: 'BarSourceDataPracticeAreaArray'
    licenseType: MetaOapg.properties.licenseType
    courtOfAdmissions: 'BarSourceDataCourtOfAdmissions'
    sourceInfo: 'BarSourceDataSourceInfo'
    advancedDegreeArray: 'BarSourceDataAdvancedDegreeArray'
    homeCounty: MetaOapg.properties.homeCounty
    practiceLocationArray: 'BarSourceDataPracticeLocationArray'
    committeesArray: 'BarSourceDataCommitteesArray'
    publicHearingArray: 'BarSourceDataPublicHearingArray'
    courtHistoryArray: 'BarSourceDataCourtHistoryArray'
    statusHint: MetaOapg.properties.statusHint
    lastRenewalDate: MetaOapg.properties.lastRenewalDate
    expirationDate: MetaOapg.properties.expirationDate
    barServiceClass: MetaOapg.properties.barServiceClass
    comments: MetaOapg.properties.comments
    disciplineSummariesArray: 'BarSourceDataDisciplineSummariesArray'
    otherJurisdictionArray: 'BarSourceDataOtherJurisdictionArray'
    firstAdmittedDate: MetaOapg.properties.firstAdmittedDate
    involvementsArray: 'BarSourceDataInvolvementsArray'
    lawSchoolArray: 'BarSourceDataLawSchoolArray'
    tenYearDisciplineArray: 'BarSourceDataTenYearDisciplineArray'
    undergraduateSchool: MetaOapg.properties.undergraduateSchool
    feesOptionsArray: 'BarSourceDataFeesOptionsArray'
    privateLawPractice: MetaOapg.properties.privateLawPractice
    boardCertificationsArray: 'BarSourceDataBoardCertificationsArray'
    openActionStatusArray: 'BarSourceDataOpenActionStatusArray'
    disciplinaryHistoryArray: 'BarSourceDataDisciplinaryHistoryArray'
    reasonForInactivation: 'BarSourceDataReasonForInactivation'
    languagesArray: 'BarSourceDataLanguagesArray'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["administrativeActionsArray"]) -> 'BarSourceDataAdministrativeActionsArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admissionType"]) -> MetaOapg.properties.admissionType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["advancedDegreeArray"]) -> 'BarSourceDataAdvancedDegreeArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appellateCourtDistrict"]) -> MetaOapg.properties.appellateCourtDistrict: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appellateDivisionDepartment"]) -> MetaOapg.properties.appellateDivisionDepartment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attorneyGroup"]) -> MetaOapg.properties.attorneyGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorized"]) -> MetaOapg.properties.authorized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barLawFirm"]) -> MetaOapg.properties.barLawFirm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barServiceClass"]) -> MetaOapg.properties.barServiceClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barStatusArray"]) -> 'BarSourceDataBarStatusArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bio"]) -> MetaOapg.properties.bio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["boardCertificationsArray"]) -> 'BarSourceDataBoardCertificationsArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["boardDistrict"]) -> MetaOapg.properties.boardDistrict: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["circuit"]) -> MetaOapg.properties.circuit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientsRepresentedArray"]) -> 'BarSourceDataClientsRepresentedArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["committeesArray"]) -> 'BarSourceDataCommitteesArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtHistoryArray"]) -> 'BarSourceDataCourtHistoryArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtOfAdmissions"]) -> 'BarSourceDataCourtOfAdmissions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtServiceEmail"]) -> MetaOapg.properties.courtServiceEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disciplinaryHistoryArray"]) -> 'BarSourceDataDisciplinaryHistoryArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disciplineSummariesArray"]) -> 'BarSourceDataDisciplineSummariesArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dismissalsArray"]) -> 'BarSourceDataDismissalsArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["district"]) -> MetaOapg.properties.district: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employmentHistoryArray"]) -> 'BarSourceDataEmploymentHistoryArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feesOptionsArray"]) -> 'BarSourceDataFeesOptionsArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmSize"]) -> MetaOapg.properties.firmSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmWebsite"]) -> MetaOapg.properties.firmWebsite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstAdmittedDate"]) -> MetaOapg.properties.firstAdmittedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstAdmittedYear"]) -> MetaOapg.properties.firstAdmittedYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["homeCounty"]) -> MetaOapg.properties.homeCounty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inGoodStanding"]) -> MetaOapg.properties.inGoodStanding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insurance"]) -> MetaOapg.properties.insurance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["involvementsArray"]) -> 'BarSourceDataInvolvementsArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["judicialDistrict"]) -> MetaOapg.properties.judicialDistrict: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jurisType"]) -> MetaOapg.properties.jurisType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["languagesArray"]) -> 'BarSourceDataLanguagesArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastRenewalDate"]) -> MetaOapg.properties.lastRenewalDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lawSchoolArray"]) -> 'BarSourceDataLawSchoolArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalSpecialityArray"]) -> 'BarSourceDataLegalSpecialityArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licenseType"]) -> MetaOapg.properties.licenseType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> 'BarSourceDataName': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextRegistration"]) -> MetaOapg.properties.nextRegistration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextRenewalDate"]) -> MetaOapg.properties.nextRenewalDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["openActionStatusArray"]) -> 'BarSourceDataOpenActionStatusArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherJurisdictionArray"]) -> 'BarSourceDataOtherJurisdictionArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherNameArray"]) -> 'BarSourceDataOtherNameArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parish"]) -> MetaOapg.properties.parish: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pendingProceedingArray"]) -> 'BarSourceDataPendingProceedingArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["practiceAreaArray"]) -> 'BarSourceDataPracticeAreaArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["practiceLocationArray"]) -> 'BarSourceDataPracticeLocationArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateLawPractice"]) -> MetaOapg.properties.privateLawPractice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profileLastCertified"]) -> MetaOapg.properties.profileLastCertified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicHearingArray"]) -> 'BarSourceDataPublicHearingArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reasonForInactivation"]) -> 'BarSourceDataReasonForInactivation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedCasesArray"]) -> 'BarSourceDataRelatedCasesArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sectionsArray"]) -> 'BarSourceDataSectionsArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["servicesArray"]) -> 'BarSourceDataServicesArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceInfo"]) -> 'BarSourceDataSourceInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statewideGrievanceCommitteeHistoryArray"]) -> 'BarSourceDataStatewideGrievanceCommitteeHistoryArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusDate"]) -> MetaOapg.properties.statusDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusHint"]) -> MetaOapg.properties.statusHint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statusHistoryArray"]) -> 'BarSourceDataStatusHistoryArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenYearDisciplineArray"]) -> 'BarSourceDataTenYearDisciplineArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["undergraduateSchool"]) -> MetaOapg.properties.undergraduateSchool: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yearsOfPractice"]) -> MetaOapg.properties.yearsOfPractice: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["administrativeActionsArray", "admissionType", "advancedDegreeArray", "appellateCourtDistrict", "appellateDivisionDepartment", "attorneyGroup", "authorized", "barLawFirm", "barServiceClass", "barStatusArray", "bio", "boardCertificationsArray", "boardDistrict", "circuit", "clientsRepresentedArray", "comments", "committeesArray", "courtHistoryArray", "courtOfAdmissions", "courtServiceEmail", "disciplinaryHistoryArray", "disciplineSummariesArray", "dismissalsArray", "district", "employmentHistoryArray", "expirationDate", "feesOptionsArray", "firmSize", "firmWebsite", "firstAdmittedDate", "firstAdmittedYear", "homeCounty", "inGoodStanding", "insurance", "involvementsArray", "judicialDistrict", "jurisType", "languagesArray", "lastRenewalDate", "lawSchoolArray", "legalSpecialityArray", "licenseType", "name", "nextRegistration", "nextRenewalDate", "object", "openActionStatusArray", "otherJurisdictionArray", "otherNameArray", "parish", "pendingProceedingArray", "position", "practiceAreaArray", "practiceLocationArray", "privateLawPractice", "profileLastCertified", "publicHearingArray", "reasonForInactivation", "relatedCasesArray", "sectionsArray", "servicesArray", "sourceInfo", "statewideGrievanceCommitteeHistoryArray", "status", "statusDate", "statusHint", "statusHistoryArray", "tenYearDisciplineArray", "undergraduateSchool", "yearsOfPractice", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["administrativeActionsArray"]) -> 'BarSourceDataAdministrativeActionsArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admissionType"]) -> MetaOapg.properties.admissionType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["advancedDegreeArray"]) -> 'BarSourceDataAdvancedDegreeArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appellateCourtDistrict"]) -> MetaOapg.properties.appellateCourtDistrict: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appellateDivisionDepartment"]) -> MetaOapg.properties.appellateDivisionDepartment: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attorneyGroup"]) -> MetaOapg.properties.attorneyGroup: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorized"]) -> MetaOapg.properties.authorized: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barLawFirm"]) -> MetaOapg.properties.barLawFirm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barServiceClass"]) -> MetaOapg.properties.barServiceClass: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barStatusArray"]) -> 'BarSourceDataBarStatusArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bio"]) -> MetaOapg.properties.bio: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["boardCertificationsArray"]) -> 'BarSourceDataBoardCertificationsArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["boardDistrict"]) -> MetaOapg.properties.boardDistrict: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["circuit"]) -> MetaOapg.properties.circuit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientsRepresentedArray"]) -> 'BarSourceDataClientsRepresentedArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> MetaOapg.properties.comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["committeesArray"]) -> 'BarSourceDataCommitteesArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtHistoryArray"]) -> 'BarSourceDataCourtHistoryArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtOfAdmissions"]) -> 'BarSourceDataCourtOfAdmissions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtServiceEmail"]) -> MetaOapg.properties.courtServiceEmail: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disciplinaryHistoryArray"]) -> 'BarSourceDataDisciplinaryHistoryArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disciplineSummariesArray"]) -> 'BarSourceDataDisciplineSummariesArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dismissalsArray"]) -> 'BarSourceDataDismissalsArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["district"]) -> MetaOapg.properties.district: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employmentHistoryArray"]) -> 'BarSourceDataEmploymentHistoryArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feesOptionsArray"]) -> 'BarSourceDataFeesOptionsArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmSize"]) -> MetaOapg.properties.firmSize: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmWebsite"]) -> MetaOapg.properties.firmWebsite: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstAdmittedDate"]) -> MetaOapg.properties.firstAdmittedDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstAdmittedYear"]) -> MetaOapg.properties.firstAdmittedYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["homeCounty"]) -> MetaOapg.properties.homeCounty: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inGoodStanding"]) -> MetaOapg.properties.inGoodStanding: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insurance"]) -> MetaOapg.properties.insurance: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["involvementsArray"]) -> 'BarSourceDataInvolvementsArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["judicialDistrict"]) -> MetaOapg.properties.judicialDistrict: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jurisType"]) -> MetaOapg.properties.jurisType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["languagesArray"]) -> 'BarSourceDataLanguagesArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastRenewalDate"]) -> MetaOapg.properties.lastRenewalDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lawSchoolArray"]) -> 'BarSourceDataLawSchoolArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalSpecialityArray"]) -> 'BarSourceDataLegalSpecialityArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licenseType"]) -> MetaOapg.properties.licenseType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> 'BarSourceDataName': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextRegistration"]) -> MetaOapg.properties.nextRegistration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextRenewalDate"]) -> MetaOapg.properties.nextRenewalDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["openActionStatusArray"]) -> 'BarSourceDataOpenActionStatusArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherJurisdictionArray"]) -> 'BarSourceDataOtherJurisdictionArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherNameArray"]) -> 'BarSourceDataOtherNameArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parish"]) -> MetaOapg.properties.parish: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pendingProceedingArray"]) -> 'BarSourceDataPendingProceedingArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["practiceAreaArray"]) -> 'BarSourceDataPracticeAreaArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["practiceLocationArray"]) -> 'BarSourceDataPracticeLocationArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateLawPractice"]) -> MetaOapg.properties.privateLawPractice: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profileLastCertified"]) -> MetaOapg.properties.profileLastCertified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicHearingArray"]) -> 'BarSourceDataPublicHearingArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reasonForInactivation"]) -> 'BarSourceDataReasonForInactivation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedCasesArray"]) -> 'BarSourceDataRelatedCasesArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sectionsArray"]) -> 'BarSourceDataSectionsArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["servicesArray"]) -> 'BarSourceDataServicesArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceInfo"]) -> 'BarSourceDataSourceInfo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statewideGrievanceCommitteeHistoryArray"]) -> 'BarSourceDataStatewideGrievanceCommitteeHistoryArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusDate"]) -> MetaOapg.properties.statusDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusHint"]) -> MetaOapg.properties.statusHint: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statusHistoryArray"]) -> 'BarSourceDataStatusHistoryArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenYearDisciplineArray"]) -> 'BarSourceDataTenYearDisciplineArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["undergraduateSchool"]) -> MetaOapg.properties.undergraduateSchool: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yearsOfPractice"]) -> MetaOapg.properties.yearsOfPractice: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["administrativeActionsArray", "admissionType", "advancedDegreeArray", "appellateCourtDistrict", "appellateDivisionDepartment", "attorneyGroup", "authorized", "barLawFirm", "barServiceClass", "barStatusArray", "bio", "boardCertificationsArray", "boardDistrict", "circuit", "clientsRepresentedArray", "comments", "committeesArray", "courtHistoryArray", "courtOfAdmissions", "courtServiceEmail", "disciplinaryHistoryArray", "disciplineSummariesArray", "dismissalsArray", "district", "employmentHistoryArray", "expirationDate", "feesOptionsArray", "firmSize", "firmWebsite", "firstAdmittedDate", "firstAdmittedYear", "homeCounty", "inGoodStanding", "insurance", "involvementsArray", "judicialDistrict", "jurisType", "languagesArray", "lastRenewalDate", "lawSchoolArray", "legalSpecialityArray", "licenseType", "name", "nextRegistration", "nextRenewalDate", "object", "openActionStatusArray", "otherJurisdictionArray", "otherNameArray", "parish", "pendingProceedingArray", "position", "practiceAreaArray", "practiceLocationArray", "privateLawPractice", "profileLastCertified", "publicHearingArray", "reasonForInactivation", "relatedCasesArray", "sectionsArray", "servicesArray", "sourceInfo", "statewideGrievanceCommitteeHistoryArray", "status", "statusDate", "statusHint", "statusHistoryArray", "tenYearDisciplineArray", "undergraduateSchool", "yearsOfPractice", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        insurance: typing.Union[MetaOapg.properties.insurance, None, str, ],
        statusDate: typing.Union[MetaOapg.properties.statusDate, None, str, datetime, ],
        clientsRepresentedArray: 'BarSourceDataClientsRepresentedArray',
        attorneyGroup: typing.Union[MetaOapg.properties.attorneyGroup, None, str, ],
        bio: typing.Union[MetaOapg.properties.bio, None, str, ],
        firmSize: typing.Union[MetaOapg.properties.firmSize, None, str, ],
        appellateCourtDistrict: typing.Union[MetaOapg.properties.appellateCourtDistrict, None, str, ],
        administrativeActionsArray: 'BarSourceDataAdministrativeActionsArray',
        legalSpecialityArray: 'BarSourceDataLegalSpecialityArray',
        employmentHistoryArray: 'BarSourceDataEmploymentHistoryArray',
        firstAdmittedYear: typing.Union[MetaOapg.properties.firstAdmittedYear, None, decimal.Decimal, int, ],
        parish: typing.Union[MetaOapg.properties.parish, None, str, ],
        authorized: typing.Union[MetaOapg.properties.authorized, None, str, ],
        sectionsArray: 'BarSourceDataSectionsArray',
        nextRenewalDate: typing.Union[MetaOapg.properties.nextRenewalDate, None, str, datetime, ],
        judicialDistrict: typing.Union[MetaOapg.properties.judicialDistrict, None, str, ],
        yearsOfPractice: typing.Union[MetaOapg.properties.yearsOfPractice, None, str, ],
        admissionType: typing.Union[MetaOapg.properties.admissionType, None, str, ],
        relatedCasesArray: 'BarSourceDataRelatedCasesArray',
        profileLastCertified: typing.Union[MetaOapg.properties.profileLastCertified, None, str, datetime, ],
        jurisType: typing.Union[MetaOapg.properties.jurisType, None, str, ],
        otherNameArray: 'BarSourceDataOtherNameArray',
        statusHistoryArray: 'BarSourceDataStatusHistoryArray',
        nextRegistration: typing.Union[MetaOapg.properties.nextRegistration, None, str, datetime, ],
        barLawFirm: typing.Union[MetaOapg.properties.barLawFirm, None, str, ],
        inGoodStanding: typing.Union[MetaOapg.properties.inGoodStanding, None, str, ],
        dismissalsArray: 'BarSourceDataDismissalsArray',
        district: typing.Union[MetaOapg.properties.district, None, str, ],
        firmWebsite: typing.Union[MetaOapg.properties.firmWebsite, None, str, ],
        courtServiceEmail: typing.Union[MetaOapg.properties.courtServiceEmail, None, str, ],
        name: 'BarSourceDataName',
        appellateDivisionDepartment: typing.Union[MetaOapg.properties.appellateDivisionDepartment, None, str, ],
        position: typing.Union[MetaOapg.properties.position, None, str, ],
        pendingProceedingArray: 'BarSourceDataPendingProceedingArray',
        servicesArray: 'BarSourceDataServicesArray',
        barStatusArray: 'BarSourceDataBarStatusArray',
        object: typing.Union[MetaOapg.properties.object, str, ],
        status: typing.Union[MetaOapg.properties.status, None, str, ],
        circuit: typing.Union[MetaOapg.properties.circuit, None, str, ],
        statewideGrievanceCommitteeHistoryArray: 'BarSourceDataStatewideGrievanceCommitteeHistoryArray',
        boardDistrict: typing.Union[MetaOapg.properties.boardDistrict, None, str, ],
        practiceAreaArray: 'BarSourceDataPracticeAreaArray',
        licenseType: typing.Union[MetaOapg.properties.licenseType, None, str, ],
        courtOfAdmissions: 'BarSourceDataCourtOfAdmissions',
        sourceInfo: 'BarSourceDataSourceInfo',
        advancedDegreeArray: 'BarSourceDataAdvancedDegreeArray',
        homeCounty: typing.Union[MetaOapg.properties.homeCounty, None, str, ],
        practiceLocationArray: 'BarSourceDataPracticeLocationArray',
        committeesArray: 'BarSourceDataCommitteesArray',
        publicHearingArray: 'BarSourceDataPublicHearingArray',
        courtHistoryArray: 'BarSourceDataCourtHistoryArray',
        statusHint: typing.Union[MetaOapg.properties.statusHint, None, str, ],
        lastRenewalDate: typing.Union[MetaOapg.properties.lastRenewalDate, None, str, datetime, ],
        expirationDate: typing.Union[MetaOapg.properties.expirationDate, None, str, datetime, ],
        barServiceClass: typing.Union[MetaOapg.properties.barServiceClass, None, str, ],
        comments: typing.Union[MetaOapg.properties.comments, None, str, ],
        disciplineSummariesArray: 'BarSourceDataDisciplineSummariesArray',
        otherJurisdictionArray: 'BarSourceDataOtherJurisdictionArray',
        firstAdmittedDate: typing.Union[MetaOapg.properties.firstAdmittedDate, None, str, datetime, ],
        involvementsArray: 'BarSourceDataInvolvementsArray',
        lawSchoolArray: 'BarSourceDataLawSchoolArray',
        tenYearDisciplineArray: 'BarSourceDataTenYearDisciplineArray',
        undergraduateSchool: typing.Union[MetaOapg.properties.undergraduateSchool, None, str, ],
        feesOptionsArray: 'BarSourceDataFeesOptionsArray',
        privateLawPractice: typing.Union[MetaOapg.properties.privateLawPractice, None, str, ],
        boardCertificationsArray: 'BarSourceDataBoardCertificationsArray',
        openActionStatusArray: 'BarSourceDataOpenActionStatusArray',
        disciplinaryHistoryArray: 'BarSourceDataDisciplinaryHistoryArray',
        reasonForInactivation: 'BarSourceDataReasonForInactivation',
        languagesArray: 'BarSourceDataLanguagesArray',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BarSourceData':
        return super().__new__(
            cls,
            *args,
            insurance=insurance,
            statusDate=statusDate,
            clientsRepresentedArray=clientsRepresentedArray,
            attorneyGroup=attorneyGroup,
            bio=bio,
            firmSize=firmSize,
            appellateCourtDistrict=appellateCourtDistrict,
            administrativeActionsArray=administrativeActionsArray,
            legalSpecialityArray=legalSpecialityArray,
            employmentHistoryArray=employmentHistoryArray,
            firstAdmittedYear=firstAdmittedYear,
            parish=parish,
            authorized=authorized,
            sectionsArray=sectionsArray,
            nextRenewalDate=nextRenewalDate,
            judicialDistrict=judicialDistrict,
            yearsOfPractice=yearsOfPractice,
            admissionType=admissionType,
            relatedCasesArray=relatedCasesArray,
            profileLastCertified=profileLastCertified,
            jurisType=jurisType,
            otherNameArray=otherNameArray,
            statusHistoryArray=statusHistoryArray,
            nextRegistration=nextRegistration,
            barLawFirm=barLawFirm,
            inGoodStanding=inGoodStanding,
            dismissalsArray=dismissalsArray,
            district=district,
            firmWebsite=firmWebsite,
            courtServiceEmail=courtServiceEmail,
            name=name,
            appellateDivisionDepartment=appellateDivisionDepartment,
            position=position,
            pendingProceedingArray=pendingProceedingArray,
            servicesArray=servicesArray,
            barStatusArray=barStatusArray,
            object=object,
            status=status,
            circuit=circuit,
            statewideGrievanceCommitteeHistoryArray=statewideGrievanceCommitteeHistoryArray,
            boardDistrict=boardDistrict,
            practiceAreaArray=practiceAreaArray,
            licenseType=licenseType,
            courtOfAdmissions=courtOfAdmissions,
            sourceInfo=sourceInfo,
            advancedDegreeArray=advancedDegreeArray,
            homeCounty=homeCounty,
            practiceLocationArray=practiceLocationArray,
            committeesArray=committeesArray,
            publicHearingArray=publicHearingArray,
            courtHistoryArray=courtHistoryArray,
            statusHint=statusHint,
            lastRenewalDate=lastRenewalDate,
            expirationDate=expirationDate,
            barServiceClass=barServiceClass,
            comments=comments,
            disciplineSummariesArray=disciplineSummariesArray,
            otherJurisdictionArray=otherJurisdictionArray,
            firstAdmittedDate=firstAdmittedDate,
            involvementsArray=involvementsArray,
            lawSchoolArray=lawSchoolArray,
            tenYearDisciplineArray=tenYearDisciplineArray,
            undergraduateSchool=undergraduateSchool,
            feesOptionsArray=feesOptionsArray,
            privateLawPractice=privateLawPractice,
            boardCertificationsArray=boardCertificationsArray,
            openActionStatusArray=openActionStatusArray,
            disciplinaryHistoryArray=disciplinaryHistoryArray,
            reasonForInactivation=reasonForInactivation,
            languagesArray=languagesArray,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.bar_source_data_administrative_actions_array import BarSourceDataAdministrativeActionsArray
from unicourt_python_sdk.model.bar_source_data_advanced_degree_array import BarSourceDataAdvancedDegreeArray
from unicourt_python_sdk.model.bar_source_data_bar_status_array import BarSourceDataBarStatusArray
from unicourt_python_sdk.model.bar_source_data_board_certifications_array import BarSourceDataBoardCertificationsArray
from unicourt_python_sdk.model.bar_source_data_clients_represented_array import BarSourceDataClientsRepresentedArray
from unicourt_python_sdk.model.bar_source_data_committees_array import BarSourceDataCommitteesArray
from unicourt_python_sdk.model.bar_source_data_court_history_array import BarSourceDataCourtHistoryArray
from unicourt_python_sdk.model.bar_source_data_court_of_admissions import BarSourceDataCourtOfAdmissions
from unicourt_python_sdk.model.bar_source_data_disciplinary_history_array import BarSourceDataDisciplinaryHistoryArray
from unicourt_python_sdk.model.bar_source_data_discipline_summaries_array import BarSourceDataDisciplineSummariesArray
from unicourt_python_sdk.model.bar_source_data_dismissals_array import BarSourceDataDismissalsArray
from unicourt_python_sdk.model.bar_source_data_employment_history_array import BarSourceDataEmploymentHistoryArray
from unicourt_python_sdk.model.bar_source_data_fees_options_array import BarSourceDataFeesOptionsArray
from unicourt_python_sdk.model.bar_source_data_involvements_array import BarSourceDataInvolvementsArray
from unicourt_python_sdk.model.bar_source_data_languages_array import BarSourceDataLanguagesArray
from unicourt_python_sdk.model.bar_source_data_law_school_array import BarSourceDataLawSchoolArray
from unicourt_python_sdk.model.bar_source_data_legal_speciality_array import BarSourceDataLegalSpecialityArray
from unicourt_python_sdk.model.bar_source_data_name import BarSourceDataName
from unicourt_python_sdk.model.bar_source_data_open_action_status_array import BarSourceDataOpenActionStatusArray
from unicourt_python_sdk.model.bar_source_data_other_jurisdiction_array import BarSourceDataOtherJurisdictionArray
from unicourt_python_sdk.model.bar_source_data_other_name_array import BarSourceDataOtherNameArray
from unicourt_python_sdk.model.bar_source_data_pending_proceeding_array import BarSourceDataPendingProceedingArray
from unicourt_python_sdk.model.bar_source_data_practice_area_array import BarSourceDataPracticeAreaArray
from unicourt_python_sdk.model.bar_source_data_practice_location_array import BarSourceDataPracticeLocationArray
from unicourt_python_sdk.model.bar_source_data_public_hearing_array import BarSourceDataPublicHearingArray
from unicourt_python_sdk.model.bar_source_data_reason_for_inactivation import BarSourceDataReasonForInactivation
from unicourt_python_sdk.model.bar_source_data_related_cases_array import BarSourceDataRelatedCasesArray
from unicourt_python_sdk.model.bar_source_data_sections_array import BarSourceDataSectionsArray
from unicourt_python_sdk.model.bar_source_data_services_array import BarSourceDataServicesArray
from unicourt_python_sdk.model.bar_source_data_source_info import BarSourceDataSourceInfo
from unicourt_python_sdk.model.bar_source_data_statewide_grievance_committee_history_array import BarSourceDataStatewideGrievanceCommitteeHistoryArray
from unicourt_python_sdk.model.bar_source_data_status_history_array import BarSourceDataStatusHistoryArray
from unicourt_python_sdk.model.bar_source_data_ten_year_discipline_array import BarSourceDataTenYearDisciplineArray
