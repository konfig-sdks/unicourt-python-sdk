# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class NormOrganization(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "normCorporateGroupArray",
            "normPartyAPI",
            "cik",
            "sic",
            "sosDataArray",
            "organizationType",
            "lei",
            "tickerArray",
            "isInvolvedInLitigation",
            "naicsDescription",
            "normOrganizationId",
            "name",
            "naics",
            "sicDescription",
            "object",
        }
        
        class properties:
            
            
            class cik(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 15
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cik':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isInvolvedInLitigation = schemas.BoolSchema
            
            
            class lei(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lei':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class naics(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'naics':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class naicsDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'naicsDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
            
            
            class normCorporateGroupArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NormCorporateGroup']:
                        return NormCorporateGroup
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['NormCorporateGroup'], typing.List['NormCorporateGroup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'normCorporateGroupArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NormCorporateGroup':
                    return super().__getitem__(i)
            
            
            class normOrganizationId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            
            
            class normPartyAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 16
            
            
            class organizationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
                    enum_value_to_name = {
                        "Business": "BUSINESS",
                        "GovernmentAgency": "GOVERNMENT_AGENCY",
                    }
                
                @schemas.classproperty
                def BUSINESS(cls):
                    return cls("Business")
                
                @schemas.classproperty
                def GOVERNMENT_AGENCY(cls):
                    return cls("GovernmentAgency")
            
            
            class sic(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 10
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sic':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sicDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sicDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sosDataArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SOSData']:
                        return SOSData
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SOSData'], typing.List['SOSData']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sosDataArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SOSData':
                    return super().__getitem__(i)
        
            @staticmethod
            def tickerArray() -> typing.Type['NormOrganizationTickerArray']:
                return NormOrganizationTickerArray
            __annotations__ = {
                "cik": cik,
                "isInvolvedInLitigation": isInvolvedInLitigation,
                "lei": lei,
                "naics": naics,
                "naicsDescription": naicsDescription,
                "name": name,
                "normCorporateGroupArray": normCorporateGroupArray,
                "normOrganizationId": normOrganizationId,
                "normPartyAPI": normPartyAPI,
                "object": object,
                "organizationType": organizationType,
                "sic": sic,
                "sicDescription": sicDescription,
                "sosDataArray": sosDataArray,
                "tickerArray": tickerArray,
            }
    
    normCorporateGroupArray: MetaOapg.properties.normCorporateGroupArray
    normPartyAPI: MetaOapg.properties.normPartyAPI
    cik: MetaOapg.properties.cik
    sic: MetaOapg.properties.sic
    sosDataArray: MetaOapg.properties.sosDataArray
    organizationType: MetaOapg.properties.organizationType
    lei: MetaOapg.properties.lei
    tickerArray: 'NormOrganizationTickerArray'
    isInvolvedInLitigation: MetaOapg.properties.isInvolvedInLitigation
    naicsDescription: MetaOapg.properties.naicsDescription
    normOrganizationId: MetaOapg.properties.normOrganizationId
    name: MetaOapg.properties.name
    naics: MetaOapg.properties.naics
    sicDescription: MetaOapg.properties.sicDescription
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cik"]) -> MetaOapg.properties.cik: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isInvolvedInLitigation"]) -> MetaOapg.properties.isInvolvedInLitigation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lei"]) -> MetaOapg.properties.lei: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["naics"]) -> MetaOapg.properties.naics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["naicsDescription"]) -> MetaOapg.properties.naicsDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normCorporateGroupArray"]) -> MetaOapg.properties.normCorporateGroupArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normOrganizationId"]) -> MetaOapg.properties.normOrganizationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normPartyAPI"]) -> MetaOapg.properties.normPartyAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationType"]) -> MetaOapg.properties.organizationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sic"]) -> MetaOapg.properties.sic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sicDescription"]) -> MetaOapg.properties.sicDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sosDataArray"]) -> MetaOapg.properties.sosDataArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tickerArray"]) -> 'NormOrganizationTickerArray': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cik", "isInvolvedInLitigation", "lei", "naics", "naicsDescription", "name", "normCorporateGroupArray", "normOrganizationId", "normPartyAPI", "object", "organizationType", "sic", "sicDescription", "sosDataArray", "tickerArray", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cik"]) -> MetaOapg.properties.cik: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isInvolvedInLitigation"]) -> MetaOapg.properties.isInvolvedInLitigation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lei"]) -> MetaOapg.properties.lei: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["naics"]) -> MetaOapg.properties.naics: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["naicsDescription"]) -> MetaOapg.properties.naicsDescription: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normCorporateGroupArray"]) -> MetaOapg.properties.normCorporateGroupArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normOrganizationId"]) -> MetaOapg.properties.normOrganizationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normPartyAPI"]) -> MetaOapg.properties.normPartyAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationType"]) -> MetaOapg.properties.organizationType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sic"]) -> MetaOapg.properties.sic: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sicDescription"]) -> MetaOapg.properties.sicDescription: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sosDataArray"]) -> MetaOapg.properties.sosDataArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tickerArray"]) -> 'NormOrganizationTickerArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cik", "isInvolvedInLitigation", "lei", "naics", "naicsDescription", "name", "normCorporateGroupArray", "normOrganizationId", "normPartyAPI", "object", "organizationType", "sic", "sicDescription", "sosDataArray", "tickerArray", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        normCorporateGroupArray: typing.Union[MetaOapg.properties.normCorporateGroupArray, list, tuple, ],
        normPartyAPI: typing.Union[MetaOapg.properties.normPartyAPI, str, ],
        cik: typing.Union[MetaOapg.properties.cik, None, str, ],
        sic: typing.Union[MetaOapg.properties.sic, None, str, ],
        sosDataArray: typing.Union[MetaOapg.properties.sosDataArray, list, tuple, ],
        organizationType: typing.Union[MetaOapg.properties.organizationType, str, ],
        lei: typing.Union[MetaOapg.properties.lei, None, str, ],
        tickerArray: 'NormOrganizationTickerArray',
        isInvolvedInLitigation: typing.Union[MetaOapg.properties.isInvolvedInLitigation, bool, ],
        naicsDescription: typing.Union[MetaOapg.properties.naicsDescription, None, str, ],
        normOrganizationId: typing.Union[MetaOapg.properties.normOrganizationId, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        naics: typing.Union[MetaOapg.properties.naics, None, str, ],
        sicDescription: typing.Union[MetaOapg.properties.sicDescription, None, str, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NormOrganization':
        return super().__new__(
            cls,
            *args,
            normCorporateGroupArray=normCorporateGroupArray,
            normPartyAPI=normPartyAPI,
            cik=cik,
            sic=sic,
            sosDataArray=sosDataArray,
            organizationType=organizationType,
            lei=lei,
            tickerArray=tickerArray,
            isInvolvedInLitigation=isInvolvedInLitigation,
            naicsDescription=naicsDescription,
            normOrganizationId=normOrganizationId,
            name=name,
            naics=naics,
            sicDescription=sicDescription,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.norm_corporate_group import NormCorporateGroup
from unicourt_python_sdk.model.norm_organization_ticker_array import NormOrganizationTickerArray
from unicourt_python_sdk.model.sos_data import SOSData
