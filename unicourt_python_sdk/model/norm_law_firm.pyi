# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class NormLawFirm(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Schema for Norm Law Firm containing Organization sub-field.
    """


    class MetaOapg:
        required = {
            "lawFirmAnalyticsAPI",
            "caseSearchAPI",
            "caseAnalyticsAPI",
            "normLawFirmId",
            "normOrganizationData",
            "name",
            "object",
        }
        
        class properties:
        
            @staticmethod
            def caseAnalyticsAPI() -> typing.Type['CaseAnalyticsAPI']:
                return CaseAnalyticsAPI
            
            
            class caseSearchAPI(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def lawFirmAnalyticsAPI() -> typing.Type['LawFirmAnalyticsAPI']:
                return LawFirmAnalyticsAPI
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class normLawFirmId(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def normOrganizationData() -> typing.Type['NormOrganization']:
                return NormOrganization
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "caseAnalyticsAPI": caseAnalyticsAPI,
                "caseSearchAPI": caseSearchAPI,
                "lawFirmAnalyticsAPI": lawFirmAnalyticsAPI,
                "name": name,
                "normLawFirmId": normLawFirmId,
                "normOrganizationData": normOrganizationData,
                "object": object,
            }
    
    lawFirmAnalyticsAPI: 'LawFirmAnalyticsAPI'
    caseSearchAPI: MetaOapg.properties.caseSearchAPI
    caseAnalyticsAPI: 'CaseAnalyticsAPI'
    normLawFirmId: MetaOapg.properties.normLawFirmId
    normOrganizationData: 'NormOrganization'
    name: MetaOapg.properties.name
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseAnalyticsAPI"]) -> 'CaseAnalyticsAPI': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseSearchAPI"]) -> MetaOapg.properties.caseSearchAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lawFirmAnalyticsAPI"]) -> 'LawFirmAnalyticsAPI': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normLawFirmId"]) -> MetaOapg.properties.normLawFirmId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normOrganizationData"]) -> 'NormOrganization': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseAnalyticsAPI", "caseSearchAPI", "lawFirmAnalyticsAPI", "name", "normLawFirmId", "normOrganizationData", "object", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseAnalyticsAPI"]) -> 'CaseAnalyticsAPI': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseSearchAPI"]) -> MetaOapg.properties.caseSearchAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lawFirmAnalyticsAPI"]) -> 'LawFirmAnalyticsAPI': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normLawFirmId"]) -> MetaOapg.properties.normLawFirmId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normOrganizationData"]) -> 'NormOrganization': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseAnalyticsAPI", "caseSearchAPI", "lawFirmAnalyticsAPI", "name", "normLawFirmId", "normOrganizationData", "object", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        lawFirmAnalyticsAPI: 'LawFirmAnalyticsAPI',
        caseSearchAPI: typing.Union[MetaOapg.properties.caseSearchAPI, str, ],
        caseAnalyticsAPI: 'CaseAnalyticsAPI',
        normLawFirmId: typing.Union[MetaOapg.properties.normLawFirmId, str, ],
        normOrganizationData: 'NormOrganization',
        name: typing.Union[MetaOapg.properties.name, str, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NormLawFirm':
        return super().__new__(
            cls,
            *args,
            lawFirmAnalyticsAPI=lawFirmAnalyticsAPI,
            caseSearchAPI=caseSearchAPI,
            caseAnalyticsAPI=caseAnalyticsAPI,
            normLawFirmId=normLawFirmId,
            normOrganizationData=normOrganizationData,
            name=name,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.case_analytics_api import CaseAnalyticsAPI
from unicourt_python_sdk.model.law_firm_analytics_api import LawFirmAnalyticsAPI
from unicourt_python_sdk.model.norm_organization import NormOrganization
