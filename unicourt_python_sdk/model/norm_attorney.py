# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class NormAttorney(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Norm Attorney
    """


    class MetaOapg:
        required = {
            "hasAssociatedPublicData",
            "firstName",
            "lastName",
            "caseSearchAPI",
            "caseAnalyticsAPI",
            "barRecordArray",
            "normAttorneyId",
            "name",
            "middleName",
            "similarNormAttorneyArray",
            "attorneyAnalyticsAPI",
            "object",
        }
        
        class properties:
        
            @staticmethod
            def attorneyAnalyticsAPI() -> typing.Type['AttorneyAnalyticsAPI']:
                return AttorneyAnalyticsAPI
            
            
            class barRecordArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BarRecord']:
                        return BarRecord
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BarRecord'], typing.List['BarRecord']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'barRecordArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BarRecord':
                    return super().__getitem__(i)
        
            @staticmethod
            def caseAnalyticsAPI() -> typing.Type['CaseAnalyticsAPI']:
                return CaseAnalyticsAPI
            
            
            class caseSearchAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class firstName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
            hasAssociatedPublicData = schemas.BoolSchema
            
            
            class lastName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
            
            
            class middleName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 500
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'middleName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 500
            
            
            class normAttorneyId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 12
            
            
            class similarNormAttorneyArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SimilarNormAttorney']:
                        return SimilarNormAttorney
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SimilarNormAttorney'], typing.List['SimilarNormAttorney']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'similarNormAttorneyArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SimilarNormAttorney':
                    return super().__getitem__(i)
            __annotations__ = {
                "attorneyAnalyticsAPI": attorneyAnalyticsAPI,
                "barRecordArray": barRecordArray,
                "caseAnalyticsAPI": caseAnalyticsAPI,
                "caseSearchAPI": caseSearchAPI,
                "firstName": firstName,
                "hasAssociatedPublicData": hasAssociatedPublicData,
                "lastName": lastName,
                "middleName": middleName,
                "name": name,
                "normAttorneyId": normAttorneyId,
                "object": object,
                "similarNormAttorneyArray": similarNormAttorneyArray,
            }
    
    hasAssociatedPublicData: MetaOapg.properties.hasAssociatedPublicData
    firstName: MetaOapg.properties.firstName
    lastName: MetaOapg.properties.lastName
    caseSearchAPI: MetaOapg.properties.caseSearchAPI
    caseAnalyticsAPI: 'CaseAnalyticsAPI'
    barRecordArray: MetaOapg.properties.barRecordArray
    normAttorneyId: MetaOapg.properties.normAttorneyId
    name: MetaOapg.properties.name
    middleName: MetaOapg.properties.middleName
    similarNormAttorneyArray: MetaOapg.properties.similarNormAttorneyArray
    attorneyAnalyticsAPI: 'AttorneyAnalyticsAPI'
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attorneyAnalyticsAPI"]) -> 'AttorneyAnalyticsAPI': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barRecordArray"]) -> MetaOapg.properties.barRecordArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseAnalyticsAPI"]) -> 'CaseAnalyticsAPI': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseSearchAPI"]) -> MetaOapg.properties.caseSearchAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasAssociatedPublicData"]) -> MetaOapg.properties.hasAssociatedPublicData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normAttorneyId"]) -> MetaOapg.properties.normAttorneyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["similarNormAttorneyArray"]) -> MetaOapg.properties.similarNormAttorneyArray: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attorneyAnalyticsAPI", "barRecordArray", "caseAnalyticsAPI", "caseSearchAPI", "firstName", "hasAssociatedPublicData", "lastName", "middleName", "name", "normAttorneyId", "object", "similarNormAttorneyArray", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attorneyAnalyticsAPI"]) -> 'AttorneyAnalyticsAPI': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barRecordArray"]) -> MetaOapg.properties.barRecordArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseAnalyticsAPI"]) -> 'CaseAnalyticsAPI': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseSearchAPI"]) -> MetaOapg.properties.caseSearchAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasAssociatedPublicData"]) -> MetaOapg.properties.hasAssociatedPublicData: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normAttorneyId"]) -> MetaOapg.properties.normAttorneyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["similarNormAttorneyArray"]) -> MetaOapg.properties.similarNormAttorneyArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attorneyAnalyticsAPI", "barRecordArray", "caseAnalyticsAPI", "caseSearchAPI", "firstName", "hasAssociatedPublicData", "lastName", "middleName", "name", "normAttorneyId", "object", "similarNormAttorneyArray", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        hasAssociatedPublicData: typing.Union[MetaOapg.properties.hasAssociatedPublicData, bool, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        caseSearchAPI: typing.Union[MetaOapg.properties.caseSearchAPI, str, ],
        caseAnalyticsAPI: 'CaseAnalyticsAPI',
        barRecordArray: typing.Union[MetaOapg.properties.barRecordArray, list, tuple, ],
        normAttorneyId: typing.Union[MetaOapg.properties.normAttorneyId, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        middleName: typing.Union[MetaOapg.properties.middleName, None, str, ],
        similarNormAttorneyArray: typing.Union[MetaOapg.properties.similarNormAttorneyArray, list, tuple, ],
        attorneyAnalyticsAPI: 'AttorneyAnalyticsAPI',
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NormAttorney':
        return super().__new__(
            cls,
            *args,
            hasAssociatedPublicData=hasAssociatedPublicData,
            firstName=firstName,
            lastName=lastName,
            caseSearchAPI=caseSearchAPI,
            caseAnalyticsAPI=caseAnalyticsAPI,
            barRecordArray=barRecordArray,
            normAttorneyId=normAttorneyId,
            name=name,
            middleName=middleName,
            similarNormAttorneyArray=similarNormAttorneyArray,
            attorneyAnalyticsAPI=attorneyAnalyticsAPI,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.attorney_analytics_api import AttorneyAnalyticsAPI
from unicourt_python_sdk.model.bar_record import BarRecord
from unicourt_python_sdk.model.case_analytics_api import CaseAnalyticsAPI
from unicourt_python_sdk.model.similar_norm_attorney import SimilarNormAttorney
