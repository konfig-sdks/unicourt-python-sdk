# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class PACERSearchReceipt(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "firmId",
            "search",
            "searchFee",
            "csoId",
            "loginId",
            "reportId",
            "clientCode",
            "description",
            "transactionDate",
            "billablePages",
            "object",
        }
        
        class properties:
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            billablePages = schemas.IntSchema
            
            
            class clientCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clientCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class csoId(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'csoId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class firmId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firmId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class loginId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 40
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            
            
            class reportId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reportId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class search(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'search':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class searchFee(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 5
                    min_length = 3
            
            
            class transactionDate(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
                    min_length = 25
            __annotations__ = {
                "description": description,
                "billablePages": billablePages,
                "clientCode": clientCode,
                "csoId": csoId,
                "firmId": firmId,
                "loginId": loginId,
                "object": object,
                "reportId": reportId,
                "search": search,
                "searchFee": searchFee,
                "transactionDate": transactionDate,
            }
    
    firmId: MetaOapg.properties.firmId
    search: MetaOapg.properties.search
    searchFee: MetaOapg.properties.searchFee
    csoId: MetaOapg.properties.csoId
    loginId: MetaOapg.properties.loginId
    reportId: MetaOapg.properties.reportId
    clientCode: MetaOapg.properties.clientCode
    description: MetaOapg.properties.description
    transactionDate: MetaOapg.properties.transactionDate
    billablePages: MetaOapg.properties.billablePages
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billablePages"]) -> MetaOapg.properties.billablePages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientCode"]) -> MetaOapg.properties.clientCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csoId"]) -> MetaOapg.properties.csoId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmId"]) -> MetaOapg.properties.firmId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loginId"]) -> MetaOapg.properties.loginId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportId"]) -> MetaOapg.properties.reportId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["search"]) -> MetaOapg.properties.search: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["searchFee"]) -> MetaOapg.properties.searchFee: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transactionDate"]) -> MetaOapg.properties.transactionDate: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "billablePages", "clientCode", "csoId", "firmId", "loginId", "object", "reportId", "search", "searchFee", "transactionDate", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billablePages"]) -> MetaOapg.properties.billablePages: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientCode"]) -> MetaOapg.properties.clientCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csoId"]) -> MetaOapg.properties.csoId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmId"]) -> MetaOapg.properties.firmId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loginId"]) -> MetaOapg.properties.loginId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportId"]) -> MetaOapg.properties.reportId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["search"]) -> MetaOapg.properties.search: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["searchFee"]) -> MetaOapg.properties.searchFee: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transactionDate"]) -> MetaOapg.properties.transactionDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "billablePages", "clientCode", "csoId", "firmId", "loginId", "object", "reportId", "search", "searchFee", "transactionDate", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        firmId: typing.Union[MetaOapg.properties.firmId, None, str, ],
        search: typing.Union[MetaOapg.properties.search, None, str, ],
        searchFee: typing.Union[MetaOapg.properties.searchFee, str, ],
        csoId: typing.Union[MetaOapg.properties.csoId, None, decimal.Decimal, int, ],
        loginId: typing.Union[MetaOapg.properties.loginId, str, ],
        reportId: typing.Union[MetaOapg.properties.reportId, None, str, ],
        clientCode: typing.Union[MetaOapg.properties.clientCode, None, str, ],
        description: typing.Union[MetaOapg.properties.description, None, str, ],
        transactionDate: typing.Union[MetaOapg.properties.transactionDate, str, datetime, ],
        billablePages: typing.Union[MetaOapg.properties.billablePages, decimal.Decimal, int, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PACERSearchReceipt':
        return super().__new__(
            cls,
            *args,
            firmId=firmId,
            search=search,
            searchFee=searchFee,
            csoId=csoId,
            loginId=loginId,
            reportId=reportId,
            clientCode=clientCode,
            description=description,
            transactionDate=transactionDate,
            billablePages=billablePages,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )
