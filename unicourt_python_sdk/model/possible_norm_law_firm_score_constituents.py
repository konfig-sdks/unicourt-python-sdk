# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class PossibleNormLawFirmScoreConstituents(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "address",
            "nameSimilarityScore",
            "phone",
            "email",
            "secretaryOfStateId",
            "otherPotentialNormLawFirms",
        }
        
        class properties:
            
            
            class address(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 250
                    enum_value_to_name = {
                        "Matched": "MATCHED",
                        "Mismatched": "MISMATCHED",
                        "Not_Provided_By_Data_Source": "NOT_PROVIDED_BY_DATA_SOURCE",
                    }
                
                @schemas.classproperty
                def MATCHED(cls):
                    return cls("Matched")
                
                @schemas.classproperty
                def MISMATCHED(cls):
                    return cls("Mismatched")
                
                @schemas.classproperty
                def NOT_PROVIDED_BY_DATA_SOURCE(cls):
                    return cls("Not_Provided_By_Data_Source")
            
            
            class email(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 250
                    enum_value_to_name = {
                        "Matched": "MATCHED",
                        "Mismatched": "MISMATCHED",
                        "Not_Provided_By_Data_Source": "NOT_PROVIDED_BY_DATA_SOURCE",
                    }
                
                @schemas.classproperty
                def MATCHED(cls):
                    return cls("Matched")
                
                @schemas.classproperty
                def MISMATCHED(cls):
                    return cls("Mismatched")
                
                @schemas.classproperty
                def NOT_PROVIDED_BY_DATA_SOURCE(cls):
                    return cls("Not_Provided_By_Data_Source")
            nameSimilarityScore = schemas.Float32Schema
            otherPotentialNormLawFirms = schemas.IntSchema
            
            
            class phone(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 250
                    enum_value_to_name = {
                        "Matched": "MATCHED",
                        "Mismatched": "MISMATCHED",
                        "Not_Provided_By_Data_Source": "NOT_PROVIDED_BY_DATA_SOURCE",
                    }
                
                @schemas.classproperty
                def MATCHED(cls):
                    return cls("Matched")
                
                @schemas.classproperty
                def MISMATCHED(cls):
                    return cls("Mismatched")
                
                @schemas.classproperty
                def NOT_PROVIDED_BY_DATA_SOURCE(cls):
                    return cls("Not_Provided_By_Data_Source")
            
            
            class secretaryOfStateId(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 250
                    enum_value_to_name = {
                        "Matched": "MATCHED",
                        "Mismatched": "MISMATCHED",
                        "Not_Provided_By_Data_Source": "NOT_PROVIDED_BY_DATA_SOURCE",
                    }
                
                @schemas.classproperty
                def MATCHED(cls):
                    return cls("Matched")
                
                @schemas.classproperty
                def MISMATCHED(cls):
                    return cls("Mismatched")
                
                @schemas.classproperty
                def NOT_PROVIDED_BY_DATA_SOURCE(cls):
                    return cls("Not_Provided_By_Data_Source")
            __annotations__ = {
                "address": address,
                "email": email,
                "nameSimilarityScore": nameSimilarityScore,
                "otherPotentialNormLawFirms": otherPotentialNormLawFirms,
                "phone": phone,
                "secretaryOfStateId": secretaryOfStateId,
            }
    
    address: MetaOapg.properties.address
    nameSimilarityScore: MetaOapg.properties.nameSimilarityScore
    phone: MetaOapg.properties.phone
    email: MetaOapg.properties.email
    secretaryOfStateId: MetaOapg.properties.secretaryOfStateId
    otherPotentialNormLawFirms: MetaOapg.properties.otherPotentialNormLawFirms
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameSimilarityScore"]) -> MetaOapg.properties.nameSimilarityScore: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherPotentialNormLawFirms"]) -> MetaOapg.properties.otherPotentialNormLawFirms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secretaryOfStateId"]) -> MetaOapg.properties.secretaryOfStateId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address", "email", "nameSimilarityScore", "otherPotentialNormLawFirms", "phone", "secretaryOfStateId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameSimilarityScore"]) -> MetaOapg.properties.nameSimilarityScore: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherPotentialNormLawFirms"]) -> MetaOapg.properties.otherPotentialNormLawFirms: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secretaryOfStateId"]) -> MetaOapg.properties.secretaryOfStateId: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address", "email", "nameSimilarityScore", "otherPotentialNormLawFirms", "phone", "secretaryOfStateId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address: typing.Union[MetaOapg.properties.address, str, ],
        nameSimilarityScore: typing.Union[MetaOapg.properties.nameSimilarityScore, decimal.Decimal, int, float, ],
        phone: typing.Union[MetaOapg.properties.phone, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        secretaryOfStateId: typing.Union[MetaOapg.properties.secretaryOfStateId, str, ],
        otherPotentialNormLawFirms: typing.Union[MetaOapg.properties.otherPotentialNormLawFirms, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PossibleNormLawFirmScoreConstituents':
        return super().__new__(
            cls,
            *args,
            address=address,
            nameSimilarityScore=nameSimilarityScore,
            phone=phone,
            email=email,
            secretaryOfStateId=secretaryOfStateId,
            otherPotentialNormLawFirms=otherPotentialNormLawFirms,
            _configuration=_configuration,
            **kwargs,
        )
