# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CourtCoverage(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "totalFreeCaseDocumentsInLastThirtyDaysCount",
            "totalFreeCaseDocumentCount",
            "caseClassCoverageArray",
            "totalPaidCaseDocumentCount",
            "lastUpdateCountDate",
            "totalCaseDocumentInLibraryCount",
            "totalPaidCaseDocumentsInLastThirtyDaysCount",
            "court",
            "totalCaseCount",
            "totalCaseDocumentInLibraryInLastThirtyDaysCount",
            "totalCasesInLastThirtyDaysCount",
            "object",
        }
        
        class properties:
            
            
            class caseClassCoverageArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CaseClassCoverage']:
                        return CaseClassCoverage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CaseClassCoverage'], typing.List['CaseClassCoverage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'caseClassCoverageArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CaseClassCoverage':
                    return super().__getitem__(i)
        
            @staticmethod
            def court() -> typing.Type['Court']:
                return Court
            
            
            class lastUpdateCountDate(
                schemas.StrSchema
            ):
                pass
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            totalCaseCount = schemas.IntSchema
            totalCaseDocumentInLibraryCount = schemas.IntSchema
            totalCaseDocumentInLibraryInLastThirtyDaysCount = schemas.IntSchema
            totalCasesInLastThirtyDaysCount = schemas.IntSchema
            totalFreeCaseDocumentCount = schemas.IntSchema
            totalFreeCaseDocumentsInLastThirtyDaysCount = schemas.IntSchema
            totalPaidCaseDocumentCount = schemas.IntSchema
            totalPaidCaseDocumentsInLastThirtyDaysCount = schemas.IntSchema
            __annotations__ = {
                "caseClassCoverageArray": caseClassCoverageArray,
                "court": court,
                "lastUpdateCountDate": lastUpdateCountDate,
                "object": object,
                "totalCaseCount": totalCaseCount,
                "totalCaseDocumentInLibraryCount": totalCaseDocumentInLibraryCount,
                "totalCaseDocumentInLibraryInLastThirtyDaysCount": totalCaseDocumentInLibraryInLastThirtyDaysCount,
                "totalCasesInLastThirtyDaysCount": totalCasesInLastThirtyDaysCount,
                "totalFreeCaseDocumentCount": totalFreeCaseDocumentCount,
                "totalFreeCaseDocumentsInLastThirtyDaysCount": totalFreeCaseDocumentsInLastThirtyDaysCount,
                "totalPaidCaseDocumentCount": totalPaidCaseDocumentCount,
                "totalPaidCaseDocumentsInLastThirtyDaysCount": totalPaidCaseDocumentsInLastThirtyDaysCount,
            }

    
    totalFreeCaseDocumentsInLastThirtyDaysCount: MetaOapg.properties.totalFreeCaseDocumentsInLastThirtyDaysCount
    totalFreeCaseDocumentCount: MetaOapg.properties.totalFreeCaseDocumentCount
    caseClassCoverageArray: MetaOapg.properties.caseClassCoverageArray
    totalPaidCaseDocumentCount: MetaOapg.properties.totalPaidCaseDocumentCount
    lastUpdateCountDate: MetaOapg.properties.lastUpdateCountDate
    totalCaseDocumentInLibraryCount: MetaOapg.properties.totalCaseDocumentInLibraryCount
    totalPaidCaseDocumentsInLastThirtyDaysCount: MetaOapg.properties.totalPaidCaseDocumentsInLastThirtyDaysCount
    court: 'Court'
    totalCaseCount: MetaOapg.properties.totalCaseCount
    totalCaseDocumentInLibraryInLastThirtyDaysCount: MetaOapg.properties.totalCaseDocumentInLibraryInLastThirtyDaysCount
    totalCasesInLastThirtyDaysCount: MetaOapg.properties.totalCasesInLastThirtyDaysCount
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseClassCoverageArray"]) -> MetaOapg.properties.caseClassCoverageArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["court"]) -> 'Court': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdateCountDate"]) -> MetaOapg.properties.lastUpdateCountDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCaseCount"]) -> MetaOapg.properties.totalCaseCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCaseDocumentInLibraryCount"]) -> MetaOapg.properties.totalCaseDocumentInLibraryCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCaseDocumentInLibraryInLastThirtyDaysCount"]) -> MetaOapg.properties.totalCaseDocumentInLibraryInLastThirtyDaysCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCasesInLastThirtyDaysCount"]) -> MetaOapg.properties.totalCasesInLastThirtyDaysCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalFreeCaseDocumentCount"]) -> MetaOapg.properties.totalFreeCaseDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalFreeCaseDocumentsInLastThirtyDaysCount"]) -> MetaOapg.properties.totalFreeCaseDocumentsInLastThirtyDaysCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPaidCaseDocumentCount"]) -> MetaOapg.properties.totalPaidCaseDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalPaidCaseDocumentsInLastThirtyDaysCount"]) -> MetaOapg.properties.totalPaidCaseDocumentsInLastThirtyDaysCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseClassCoverageArray", "court", "lastUpdateCountDate", "object", "totalCaseCount", "totalCaseDocumentInLibraryCount", "totalCaseDocumentInLibraryInLastThirtyDaysCount", "totalCasesInLastThirtyDaysCount", "totalFreeCaseDocumentCount", "totalFreeCaseDocumentsInLastThirtyDaysCount", "totalPaidCaseDocumentCount", "totalPaidCaseDocumentsInLastThirtyDaysCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseClassCoverageArray"]) -> MetaOapg.properties.caseClassCoverageArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["court"]) -> 'Court': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdateCountDate"]) -> MetaOapg.properties.lastUpdateCountDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCaseCount"]) -> MetaOapg.properties.totalCaseCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCaseDocumentInLibraryCount"]) -> MetaOapg.properties.totalCaseDocumentInLibraryCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCaseDocumentInLibraryInLastThirtyDaysCount"]) -> MetaOapg.properties.totalCaseDocumentInLibraryInLastThirtyDaysCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCasesInLastThirtyDaysCount"]) -> MetaOapg.properties.totalCasesInLastThirtyDaysCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalFreeCaseDocumentCount"]) -> MetaOapg.properties.totalFreeCaseDocumentCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalFreeCaseDocumentsInLastThirtyDaysCount"]) -> MetaOapg.properties.totalFreeCaseDocumentsInLastThirtyDaysCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPaidCaseDocumentCount"]) -> MetaOapg.properties.totalPaidCaseDocumentCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalPaidCaseDocumentsInLastThirtyDaysCount"]) -> MetaOapg.properties.totalPaidCaseDocumentsInLastThirtyDaysCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseClassCoverageArray", "court", "lastUpdateCountDate", "object", "totalCaseCount", "totalCaseDocumentInLibraryCount", "totalCaseDocumentInLibraryInLastThirtyDaysCount", "totalCasesInLastThirtyDaysCount", "totalFreeCaseDocumentCount", "totalFreeCaseDocumentsInLastThirtyDaysCount", "totalPaidCaseDocumentCount", "totalPaidCaseDocumentsInLastThirtyDaysCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CourtCoverage':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.case_class_coverage import CaseClassCoverage
from unicourt_python_sdk.model.court import Court
