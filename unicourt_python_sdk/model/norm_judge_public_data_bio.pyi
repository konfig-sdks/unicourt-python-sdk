# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class NormJudgePublicDataBio(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ethnicity",
            "birthState",
            "deathCity",
            "deathDate",
            "deathState",
            "birthCity",
            "politicalAffiliation",
            "birthDate",
        }
        
        class properties:
            
            
            class birthCity(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'birthCity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class birthDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'birthDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class birthState(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'birthState':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class deathCity(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deathCity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class deathDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deathDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class deathState(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deathState':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class ethnicity(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ethnicity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class politicalAffiliation(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'politicalAffiliation':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "birthCity": birthCity,
                "birthDate": birthDate,
                "birthState": birthState,
                "deathCity": deathCity,
                "deathDate": deathDate,
                "deathState": deathState,
                "ethnicity": ethnicity,
                "politicalAffiliation": politicalAffiliation,
            }
    
    ethnicity: MetaOapg.properties.ethnicity
    birthState: MetaOapg.properties.birthState
    deathCity: MetaOapg.properties.deathCity
    deathDate: MetaOapg.properties.deathDate
    deathState: MetaOapg.properties.deathState
    birthCity: MetaOapg.properties.birthCity
    politicalAffiliation: MetaOapg.properties.politicalAffiliation
    birthDate: MetaOapg.properties.birthDate
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthCity"]) -> MetaOapg.properties.birthCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["birthState"]) -> MetaOapg.properties.birthState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deathCity"]) -> MetaOapg.properties.deathCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deathDate"]) -> MetaOapg.properties.deathDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deathState"]) -> MetaOapg.properties.deathState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicity"]) -> MetaOapg.properties.ethnicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["politicalAffiliation"]) -> MetaOapg.properties.politicalAffiliation: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["birthCity", "birthDate", "birthState", "deathCity", "deathDate", "deathState", "ethnicity", "politicalAffiliation", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthCity"]) -> MetaOapg.properties.birthCity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthDate"]) -> MetaOapg.properties.birthDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["birthState"]) -> MetaOapg.properties.birthState: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deathCity"]) -> MetaOapg.properties.deathCity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deathDate"]) -> MetaOapg.properties.deathDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deathState"]) -> MetaOapg.properties.deathState: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicity"]) -> MetaOapg.properties.ethnicity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["politicalAffiliation"]) -> MetaOapg.properties.politicalAffiliation: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["birthCity", "birthDate", "birthState", "deathCity", "deathDate", "deathState", "ethnicity", "politicalAffiliation", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ethnicity: typing.Union[MetaOapg.properties.ethnicity, None, str, ],
        birthState: typing.Union[MetaOapg.properties.birthState, None, str, ],
        deathCity: typing.Union[MetaOapg.properties.deathCity, None, str, ],
        deathDate: typing.Union[MetaOapg.properties.deathDate, None, str, datetime, ],
        deathState: typing.Union[MetaOapg.properties.deathState, None, str, ],
        birthCity: typing.Union[MetaOapg.properties.birthCity, None, str, ],
        politicalAffiliation: typing.Union[MetaOapg.properties.politicalAffiliation, None, str, ],
        birthDate: typing.Union[MetaOapg.properties.birthDate, None, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NormJudgePublicDataBio':
        return super().__new__(
            cls,
            *args,
            ethnicity=ethnicity,
            birthState=birthState,
            deathCity=deathCity,
            deathDate=deathDate,
            deathState=deathState,
            birthCity=birthCity,
            politicalAffiliation=politicalAffiliation,
            birthDate=birthDate,
            _configuration=_configuration,
            **kwargs,
        )
