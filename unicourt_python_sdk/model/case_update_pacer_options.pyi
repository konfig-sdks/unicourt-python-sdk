# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CaseUpdatePacerOptions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Applicable for PACER cases.
    """


    class MetaOapg:
        required = {
            "pacerUserId",
        }
        
        class properties:
            
            
            class pacerUserId(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def additionalPageArray() -> typing.Type['CaseUpdatePacerOptionsAdditionalPageArray']:
                return CaseUpdatePacerOptionsAdditionalPageArray
            
            
            class fetchParticipantsIfOlderThanDays(
                schemas.IntSchema
            ):
                pass
            
            
            class pacerClientCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pacerClientCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class refreshType(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "fetchNewDocketEntries": "FETCH_NEW_DOCKET_ENTRIES",
                        "fetchAllDocketEntries": "FETCH_ALL_DOCKET_ENTRIES",
                    }
                
                @schemas.classproperty
                def FETCH_NEW_DOCKET_ENTRIES(cls):
                    return cls("fetchNewDocketEntries")
                
                @schemas.classproperty
                def FETCH_ALL_DOCKET_ENTRIES(cls):
                    return cls("fetchAllDocketEntries")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'refreshType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "pacerUserId": pacerUserId,
                "additionalPageArray": additionalPageArray,
                "fetchParticipantsIfOlderThanDays": fetchParticipantsIfOlderThanDays,
                "pacerClientCode": pacerClientCode,
                "refreshType": refreshType,
            }
    
    pacerUserId: MetaOapg.properties.pacerUserId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pacerUserId"]) -> MetaOapg.properties.pacerUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalPageArray"]) -> 'CaseUpdatePacerOptionsAdditionalPageArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fetchParticipantsIfOlderThanDays"]) -> MetaOapg.properties.fetchParticipantsIfOlderThanDays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pacerClientCode"]) -> MetaOapg.properties.pacerClientCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refreshType"]) -> MetaOapg.properties.refreshType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pacerUserId", "additionalPageArray", "fetchParticipantsIfOlderThanDays", "pacerClientCode", "refreshType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pacerUserId"]) -> MetaOapg.properties.pacerUserId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalPageArray"]) -> typing.Union['CaseUpdatePacerOptionsAdditionalPageArray', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fetchParticipantsIfOlderThanDays"]) -> typing.Union[MetaOapg.properties.fetchParticipantsIfOlderThanDays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pacerClientCode"]) -> typing.Union[MetaOapg.properties.pacerClientCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refreshType"]) -> typing.Union[MetaOapg.properties.refreshType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pacerUserId", "additionalPageArray", "fetchParticipantsIfOlderThanDays", "pacerClientCode", "refreshType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pacerUserId: typing.Union[MetaOapg.properties.pacerUserId, str, ],
        additionalPageArray: typing.Union['CaseUpdatePacerOptionsAdditionalPageArray', schemas.Unset] = schemas.unset,
        fetchParticipantsIfOlderThanDays: typing.Union[MetaOapg.properties.fetchParticipantsIfOlderThanDays, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pacerClientCode: typing.Union[MetaOapg.properties.pacerClientCode, None, str, schemas.Unset] = schemas.unset,
        refreshType: typing.Union[MetaOapg.properties.refreshType, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaseUpdatePacerOptions':
        return super().__new__(
            cls,
            *args,
            pacerUserId=pacerUserId,
            additionalPageArray=additionalPageArray,
            fetchParticipantsIfOlderThanDays=fetchParticipantsIfOlderThanDays,
            pacerClientCode=pacerClientCode,
            refreshType=refreshType,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.case_update_pacer_options_additional_page_array import CaseUpdatePacerOptionsAdditionalPageArray
