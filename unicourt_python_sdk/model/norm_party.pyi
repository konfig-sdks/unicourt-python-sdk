# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class NormParty(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Norm Party
    """


    class MetaOapg:
        required = {
            "partyClassificationType",
            "caseSearchAPI",
            "caseAnalyticsAPI",
            "normOrganizationData",
            "name",
            "individualData",
            "partyAnalyticsAPI",
            "relatedNormPartyArray",
            "normPartyId",
            "object",
        }
        
        class properties:
        
            @staticmethod
            def caseAnalyticsAPI() -> typing.Type['CaseAnalyticsAPI']:
                return CaseAnalyticsAPI
            
            
            class caseSearchAPI(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def individualData() -> typing.Type['NormPartyIndividualData']:
                return NormPartyIndividualData
            
            
            class name(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def normOrganizationData() -> typing.Type['NormOrganization']:
                return NormOrganization
            
            
            class normPartyId(
                schemas.StrSchema
            ):
                pass
            
            
            class object(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def partyAnalyticsAPI() -> typing.Type['PartyAnalyticsAPI']:
                return PartyAnalyticsAPI
            
            
            class partyClassificationType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INDIVIDUAL(cls):
                    return cls("Individual")
                
                @schemas.classproperty
                def ORGANIZATION(cls):
                    return cls("Organization")
            
            
            class relatedNormPartyArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RelatedNormParty']:
                        return RelatedNormParty
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['RelatedNormParty'], typing.List['RelatedNormParty']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relatedNormPartyArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RelatedNormParty':
                    return super().__getitem__(i)
            __annotations__ = {
                "caseAnalyticsAPI": caseAnalyticsAPI,
                "caseSearchAPI": caseSearchAPI,
                "individualData": individualData,
                "name": name,
                "normOrganizationData": normOrganizationData,
                "normPartyId": normPartyId,
                "object": object,
                "partyAnalyticsAPI": partyAnalyticsAPI,
                "partyClassificationType": partyClassificationType,
                "relatedNormPartyArray": relatedNormPartyArray,
            }
    
    partyClassificationType: MetaOapg.properties.partyClassificationType
    caseSearchAPI: MetaOapg.properties.caseSearchAPI
    caseAnalyticsAPI: 'CaseAnalyticsAPI'
    normOrganizationData: 'NormOrganization'
    name: MetaOapg.properties.name
    individualData: 'NormPartyIndividualData'
    partyAnalyticsAPI: 'PartyAnalyticsAPI'
    relatedNormPartyArray: MetaOapg.properties.relatedNormPartyArray
    normPartyId: MetaOapg.properties.normPartyId
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseAnalyticsAPI"]) -> 'CaseAnalyticsAPI': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseSearchAPI"]) -> MetaOapg.properties.caseSearchAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["individualData"]) -> 'NormPartyIndividualData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normOrganizationData"]) -> 'NormOrganization': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normPartyId"]) -> MetaOapg.properties.normPartyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partyAnalyticsAPI"]) -> 'PartyAnalyticsAPI': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partyClassificationType"]) -> MetaOapg.properties.partyClassificationType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedNormPartyArray"]) -> MetaOapg.properties.relatedNormPartyArray: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseAnalyticsAPI", "caseSearchAPI", "individualData", "name", "normOrganizationData", "normPartyId", "object", "partyAnalyticsAPI", "partyClassificationType", "relatedNormPartyArray", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseAnalyticsAPI"]) -> 'CaseAnalyticsAPI': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseSearchAPI"]) -> MetaOapg.properties.caseSearchAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["individualData"]) -> 'NormPartyIndividualData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normOrganizationData"]) -> 'NormOrganization': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normPartyId"]) -> MetaOapg.properties.normPartyId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partyAnalyticsAPI"]) -> 'PartyAnalyticsAPI': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partyClassificationType"]) -> MetaOapg.properties.partyClassificationType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedNormPartyArray"]) -> MetaOapg.properties.relatedNormPartyArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseAnalyticsAPI", "caseSearchAPI", "individualData", "name", "normOrganizationData", "normPartyId", "object", "partyAnalyticsAPI", "partyClassificationType", "relatedNormPartyArray", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        partyClassificationType: typing.Union[MetaOapg.properties.partyClassificationType, str, ],
        caseSearchAPI: typing.Union[MetaOapg.properties.caseSearchAPI, str, ],
        caseAnalyticsAPI: 'CaseAnalyticsAPI',
        normOrganizationData: 'NormOrganization',
        name: typing.Union[MetaOapg.properties.name, str, ],
        individualData: 'NormPartyIndividualData',
        partyAnalyticsAPI: 'PartyAnalyticsAPI',
        relatedNormPartyArray: typing.Union[MetaOapg.properties.relatedNormPartyArray, list, tuple, ],
        normPartyId: typing.Union[MetaOapg.properties.normPartyId, str, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NormParty':
        return super().__new__(
            cls,
            *args,
            partyClassificationType=partyClassificationType,
            caseSearchAPI=caseSearchAPI,
            caseAnalyticsAPI=caseAnalyticsAPI,
            normOrganizationData=normOrganizationData,
            name=name,
            individualData=individualData,
            partyAnalyticsAPI=partyAnalyticsAPI,
            relatedNormPartyArray=relatedNormPartyArray,
            normPartyId=normPartyId,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.case_analytics_api import CaseAnalyticsAPI
from unicourt_python_sdk.model.norm_organization import NormOrganization
from unicourt_python_sdk.model.norm_party_individual_data import NormPartyIndividualData
from unicourt_python_sdk.model.party_analytics_api import PartyAnalyticsAPI
from unicourt_python_sdk.model.related_norm_party import RelatedNormParty
