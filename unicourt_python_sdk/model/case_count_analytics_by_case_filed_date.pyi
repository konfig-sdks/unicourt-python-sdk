# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CaseCountAnalyticsByCaseFiledDate(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "caseSearchAPI",
            "weekOfYear",
            "monthInt",
            "year",
            "groupedBy",
            "weekOfMonth",
            "monthString",
            "caseCount",
            "object",
            "quarter",
        }
        
        class properties:
            caseCount = schemas.IntSchema
            
            
            class caseSearchAPI(
                schemas.StrSchema
            ):
                pass
            
            
            class groupedBy(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def YEARLY(cls):
                    return cls("Yearly")
                
                @schemas.classproperty
                def QUARTERLY(cls):
                    return cls("Quarterly")
                
                @schemas.classproperty
                def MONTHLY(cls):
                    return cls("Monthly")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("Weekly")
            
            
            class monthInt(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'monthInt':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class monthString(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "January": "JANUARY",
                        "February": "FEBRUARY",
                        "March": "MARCH",
                        "April": "APRIL",
                        "May": "MAY",
                        "June": "JUNE",
                        "July": "JULY",
                        "August": "AUGUST",
                        "September": "SEPTEMBER",
                        "October": "OCTOBER",
                        "November": "NOVEMBER",
                        "December": "DECEMBER",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def JANUARY(cls):
                    return cls("January")
                
                @schemas.classproperty
                def FEBRUARY(cls):
                    return cls("February")
                
                @schemas.classproperty
                def MARCH(cls):
                    return cls("March")
                
                @schemas.classproperty
                def APRIL(cls):
                    return cls("April")
                
                @schemas.classproperty
                def MAY(cls):
                    return cls("May")
                
                @schemas.classproperty
                def JUNE(cls):
                    return cls("June")
                
                @schemas.classproperty
                def JULY(cls):
                    return cls("July")
                
                @schemas.classproperty
                def AUGUST(cls):
                    return cls("August")
                
                @schemas.classproperty
                def SEPTEMBER(cls):
                    return cls("September")
                
                @schemas.classproperty
                def OCTOBER(cls):
                    return cls("October")
                
                @schemas.classproperty
                def NOVEMBER(cls):
                    return cls("November")
                
                @schemas.classproperty
                def DECEMBER(cls):
                    return cls("December")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'monthString':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            
            
            class quarter(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Q1": "Q1",
                        "Q2": "Q2",
                        "Q3": "Q3",
                        "Q4": "Q4",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def Q1(cls):
                    return cls("Q1")
                
                @schemas.classproperty
                def Q2(cls):
                    return cls("Q2")
                
                @schemas.classproperty
                def Q3(cls):
                    return cls("Q3")
                
                @schemas.classproperty
                def Q4(cls):
                    return cls("Q4")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'quarter':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class weekOfMonth(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'weekOfMonth':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class weekOfYear(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'weekOfYear':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            year = schemas.IntSchema
            __annotations__ = {
                "caseCount": caseCount,
                "caseSearchAPI": caseSearchAPI,
                "groupedBy": groupedBy,
                "monthInt": monthInt,
                "monthString": monthString,
                "object": object,
                "quarter": quarter,
                "weekOfMonth": weekOfMonth,
                "weekOfYear": weekOfYear,
                "year": year,
            }
    
    caseSearchAPI: MetaOapg.properties.caseSearchAPI
    weekOfYear: MetaOapg.properties.weekOfYear
    monthInt: MetaOapg.properties.monthInt
    year: MetaOapg.properties.year
    groupedBy: MetaOapg.properties.groupedBy
    weekOfMonth: MetaOapg.properties.weekOfMonth
    monthString: MetaOapg.properties.monthString
    caseCount: MetaOapg.properties.caseCount
    object: MetaOapg.properties.object
    quarter: MetaOapg.properties.quarter
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCount"]) -> MetaOapg.properties.caseCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseSearchAPI"]) -> MetaOapg.properties.caseSearchAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupedBy"]) -> MetaOapg.properties.groupedBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthInt"]) -> MetaOapg.properties.monthInt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monthString"]) -> MetaOapg.properties.monthString: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quarter"]) -> MetaOapg.properties.quarter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weekOfMonth"]) -> MetaOapg.properties.weekOfMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weekOfYear"]) -> MetaOapg.properties.weekOfYear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseCount", "caseSearchAPI", "groupedBy", "monthInt", "monthString", "object", "quarter", "weekOfMonth", "weekOfYear", "year", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCount"]) -> MetaOapg.properties.caseCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseSearchAPI"]) -> MetaOapg.properties.caseSearchAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupedBy"]) -> MetaOapg.properties.groupedBy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthInt"]) -> MetaOapg.properties.monthInt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monthString"]) -> MetaOapg.properties.monthString: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quarter"]) -> MetaOapg.properties.quarter: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weekOfMonth"]) -> MetaOapg.properties.weekOfMonth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weekOfYear"]) -> MetaOapg.properties.weekOfYear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseCount", "caseSearchAPI", "groupedBy", "monthInt", "monthString", "object", "quarter", "weekOfMonth", "weekOfYear", "year", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        caseSearchAPI: typing.Union[MetaOapg.properties.caseSearchAPI, str, ],
        weekOfYear: typing.Union[MetaOapg.properties.weekOfYear, None, decimal.Decimal, int, ],
        monthInt: typing.Union[MetaOapg.properties.monthInt, None, decimal.Decimal, int, ],
        year: typing.Union[MetaOapg.properties.year, decimal.Decimal, int, ],
        groupedBy: typing.Union[MetaOapg.properties.groupedBy, str, ],
        weekOfMonth: typing.Union[MetaOapg.properties.weekOfMonth, None, decimal.Decimal, int, ],
        monthString: typing.Union[MetaOapg.properties.monthString, None, str, ],
        caseCount: typing.Union[MetaOapg.properties.caseCount, decimal.Decimal, int, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        quarter: typing.Union[MetaOapg.properties.quarter, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaseCountAnalyticsByCaseFiledDate':
        return super().__new__(
            cls,
            *args,
            caseSearchAPI=caseSearchAPI,
            weekOfYear=weekOfYear,
            monthInt=monthInt,
            year=year,
            groupedBy=groupedBy,
            weekOfMonth=weekOfMonth,
            monthString=monthString,
            caseCount=caseCount,
            object=object,
            quarter=quarter,
            _configuration=_configuration,
            **kwargs,
        )
