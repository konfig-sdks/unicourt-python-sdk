# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CaseDocument(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "previewDocument",
            "sourceDataStatus",
            "inLibrary",
            "isPreviewAvailable",
            "description",
            "estimatedOrderDuration",
            "documentFiledDate",
            "addedToLibraryDate",
            "childDocumentIdArray",
            "pages",
            "price",
            "caseDocumentId",
            "sortOrder",
            "name",
            "firstFetchDate",
            "downloadAPI",
            "parentDocumentId",
            "object",
        }
        
        class properties:
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 100000
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class addedToLibraryDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 25
                    min_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addedToLibraryDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class caseDocumentId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
        
            @staticmethod
            def childDocumentIdArray() -> typing.Type['CaseDocumentChildDocumentIdArray']:
                return CaseDocumentChildDocumentIdArray
            
            
            class documentFiledDate(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 25
                    min_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'documentFiledDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class downloadAPI(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'downloadAPI':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class estimatedOrderDuration(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 25
                    min_length = 10
                    enum_value_to_name = {
                        "estimateUnavailable": "ESTIMATE_UNAVAILABLE",
                        "withinMinutes": "WITHIN_MINUTES",
                        "withinHours": "WITHIN_HOURS",
                        "withinDays": "WITHIN_DAYS",
                        "withinWeeks": "WITHIN_WEEKS",
                    }
                
                @schemas.classproperty
                def ESTIMATE_UNAVAILABLE(cls):
                    return cls("estimateUnavailable")
                
                @schemas.classproperty
                def WITHIN_MINUTES(cls):
                    return cls("withinMinutes")
                
                @schemas.classproperty
                def WITHIN_HOURS(cls):
                    return cls("withinHours")
                
                @schemas.classproperty
                def WITHIN_DAYS(cls):
                    return cls("withinDays")
                
                @schemas.classproperty
                def WITHIN_WEEKS(cls):
                    return cls("withinWeeks")
            
            
            class firstFetchDate(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 25
                    min_length = 25
            inLibrary = schemas.BoolSchema
            isPreviewAvailable = schemas.BoolSchema
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 12
                    min_length = 12
            
            
            class pages(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pages':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class parentDocumentId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'parentDocumentId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def previewDocument() -> typing.Type['PreviewDocument']:
                return PreviewDocument
            
            
            class price(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sortOrder(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sortOrder':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sourceDataStatus(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NO_LONGER_AVAILABLE_IN_COURT": "NO_LONGER_AVAILABLE_IN_COURT",
                        "SOURCE_DEPRECATED": "SOURCE_DEPRECATED",
                        "SEALED": "SEALED",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def NO_LONGER_AVAILABLE_IN_COURT(cls):
                    return cls("NO_LONGER_AVAILABLE_IN_COURT")
                
                @schemas.classproperty
                def SOURCE_DEPRECATED(cls):
                    return cls("SOURCE_DEPRECATED")
                
                @schemas.classproperty
                def SEALED(cls):
                    return cls("SEALED")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceDataStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "description": description,
                "addedToLibraryDate": addedToLibraryDate,
                "caseDocumentId": caseDocumentId,
                "childDocumentIdArray": childDocumentIdArray,
                "documentFiledDate": documentFiledDate,
                "downloadAPI": downloadAPI,
                "estimatedOrderDuration": estimatedOrderDuration,
                "firstFetchDate": firstFetchDate,
                "inLibrary": inLibrary,
                "isPreviewAvailable": isPreviewAvailable,
                "name": name,
                "object": object,
                "pages": pages,
                "parentDocumentId": parentDocumentId,
                "previewDocument": previewDocument,
                "price": price,
                "sortOrder": sortOrder,
                "sourceDataStatus": sourceDataStatus,
            }

    
    previewDocument: 'PreviewDocument'
    sourceDataStatus: MetaOapg.properties.sourceDataStatus
    inLibrary: MetaOapg.properties.inLibrary
    isPreviewAvailable: MetaOapg.properties.isPreviewAvailable
    description: MetaOapg.properties.description
    estimatedOrderDuration: MetaOapg.properties.estimatedOrderDuration
    documentFiledDate: MetaOapg.properties.documentFiledDate
    addedToLibraryDate: MetaOapg.properties.addedToLibraryDate
    childDocumentIdArray: 'CaseDocumentChildDocumentIdArray'
    pages: MetaOapg.properties.pages
    price: MetaOapg.properties.price
    caseDocumentId: MetaOapg.properties.caseDocumentId
    sortOrder: MetaOapg.properties.sortOrder
    name: MetaOapg.properties.name
    firstFetchDate: MetaOapg.properties.firstFetchDate
    downloadAPI: MetaOapg.properties.downloadAPI
    parentDocumentId: MetaOapg.properties.parentDocumentId
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addedToLibraryDate"]) -> MetaOapg.properties.addedToLibraryDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseDocumentId"]) -> MetaOapg.properties.caseDocumentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["childDocumentIdArray"]) -> 'CaseDocumentChildDocumentIdArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["documentFiledDate"]) -> MetaOapg.properties.documentFiledDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downloadAPI"]) -> MetaOapg.properties.downloadAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["estimatedOrderDuration"]) -> MetaOapg.properties.estimatedOrderDuration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inLibrary"]) -> MetaOapg.properties.inLibrary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isPreviewAvailable"]) -> MetaOapg.properties.isPreviewAvailable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pages"]) -> MetaOapg.properties.pages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentDocumentId"]) -> MetaOapg.properties.parentDocumentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previewDocument"]) -> 'PreviewDocument': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceDataStatus"]) -> MetaOapg.properties.sourceDataStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "addedToLibraryDate", "caseDocumentId", "childDocumentIdArray", "documentFiledDate", "downloadAPI", "estimatedOrderDuration", "firstFetchDate", "inLibrary", "isPreviewAvailable", "name", "object", "pages", "parentDocumentId", "previewDocument", "price", "sortOrder", "sourceDataStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addedToLibraryDate"]) -> MetaOapg.properties.addedToLibraryDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseDocumentId"]) -> MetaOapg.properties.caseDocumentId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["childDocumentIdArray"]) -> 'CaseDocumentChildDocumentIdArray': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["documentFiledDate"]) -> MetaOapg.properties.documentFiledDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downloadAPI"]) -> MetaOapg.properties.downloadAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["estimatedOrderDuration"]) -> MetaOapg.properties.estimatedOrderDuration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inLibrary"]) -> MetaOapg.properties.inLibrary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isPreviewAvailable"]) -> MetaOapg.properties.isPreviewAvailable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pages"]) -> MetaOapg.properties.pages: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentDocumentId"]) -> MetaOapg.properties.parentDocumentId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previewDocument"]) -> 'PreviewDocument': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sortOrder"]) -> MetaOapg.properties.sortOrder: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceDataStatus"]) -> MetaOapg.properties.sourceDataStatus: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "addedToLibraryDate", "caseDocumentId", "childDocumentIdArray", "documentFiledDate", "downloadAPI", "estimatedOrderDuration", "firstFetchDate", "inLibrary", "isPreviewAvailable", "name", "object", "pages", "parentDocumentId", "previewDocument", "price", "sortOrder", "sourceDataStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaseDocument':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.case_document_child_document_id_array import CaseDocumentChildDocumentIdArray
from unicourt_python_sdk.model.preview_document import PreviewDocument
