# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class SourceCharge(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Source charge data from the source site.
    """


    class MetaOapg:
        required = {
            "lastFetchDate",
            "sourceChargeAdditionalDataArray",
            "sourceStatute",
            "sourceCharge",
            "sourceChargeDegree",
            "isVisible",
            "firstFetchDate",
            "sourceChargeSeverity",
            "object",
            "sourceChargeRaw",
        }
        
        class properties:
            
            
            class firstFetchDate(
                schemas.StrSchema
            ):
                pass
            isVisible = schemas.BoolSchema
            
            
            class lastFetchDate(
                schemas.StrSchema
            ):
                pass
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            
            
            class sourceCharge(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceCharge':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sourceChargeAdditionalDataArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SourceChargeAdditionalData']:
                        return SourceChargeAdditionalData
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SourceChargeAdditionalData'], typing.List['SourceChargeAdditionalData']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceChargeAdditionalDataArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SourceChargeAdditionalData':
                    return super().__getitem__(i)
            
            
            class sourceChargeDegree(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceChargeDegree':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sourceChargeRaw(
                schemas.StrSchema
            ):
                pass
            
            
            class sourceChargeSeverity(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceChargeSeverity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sourceStatute(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceStatute':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "firstFetchDate": firstFetchDate,
                "isVisible": isVisible,
                "lastFetchDate": lastFetchDate,
                "object": object,
                "sourceCharge": sourceCharge,
                "sourceChargeAdditionalDataArray": sourceChargeAdditionalDataArray,
                "sourceChargeDegree": sourceChargeDegree,
                "sourceChargeRaw": sourceChargeRaw,
                "sourceChargeSeverity": sourceChargeSeverity,
                "sourceStatute": sourceStatute,
            }

    
    lastFetchDate: MetaOapg.properties.lastFetchDate
    sourceChargeAdditionalDataArray: MetaOapg.properties.sourceChargeAdditionalDataArray
    sourceStatute: MetaOapg.properties.sourceStatute
    sourceCharge: MetaOapg.properties.sourceCharge
    sourceChargeDegree: MetaOapg.properties.sourceChargeDegree
    isVisible: MetaOapg.properties.isVisible
    firstFetchDate: MetaOapg.properties.firstFetchDate
    sourceChargeSeverity: MetaOapg.properties.sourceChargeSeverity
    object: MetaOapg.properties.object
    sourceChargeRaw: MetaOapg.properties.sourceChargeRaw
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isVisible"]) -> MetaOapg.properties.isVisible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceCharge"]) -> MetaOapg.properties.sourceCharge: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceChargeAdditionalDataArray"]) -> MetaOapg.properties.sourceChargeAdditionalDataArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceChargeDegree"]) -> MetaOapg.properties.sourceChargeDegree: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceChargeRaw"]) -> MetaOapg.properties.sourceChargeRaw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceChargeSeverity"]) -> MetaOapg.properties.sourceChargeSeverity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceStatute"]) -> MetaOapg.properties.sourceStatute: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firstFetchDate", "isVisible", "lastFetchDate", "object", "sourceCharge", "sourceChargeAdditionalDataArray", "sourceChargeDegree", "sourceChargeRaw", "sourceChargeSeverity", "sourceStatute", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isVisible"]) -> MetaOapg.properties.isVisible: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceCharge"]) -> MetaOapg.properties.sourceCharge: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceChargeAdditionalDataArray"]) -> MetaOapg.properties.sourceChargeAdditionalDataArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceChargeDegree"]) -> MetaOapg.properties.sourceChargeDegree: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceChargeRaw"]) -> MetaOapg.properties.sourceChargeRaw: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceChargeSeverity"]) -> MetaOapg.properties.sourceChargeSeverity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceStatute"]) -> MetaOapg.properties.sourceStatute: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firstFetchDate", "isVisible", "lastFetchDate", "object", "sourceCharge", "sourceChargeAdditionalDataArray", "sourceChargeDegree", "sourceChargeRaw", "sourceChargeSeverity", "sourceStatute", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SourceCharge':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.source_charge_additional_data import SourceChargeAdditionalData
