# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CaseClassCoverage(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "freeCaseDocumentCount",
            "paidCaseDocumentCount",
            "courtServiceStatusAPI",
            "freeCaseDocumentsInLastThirtyDaysCount",
            "caseDocumentInLibraryInLastThirtyDaysCount",
            "caseClass",
            "caseCount",
            "caseDocumentInLibraryCount",
            "paidCaseDocumentsInLastThirtyDaysCount",
            "casesInLastThirtyDaysCount",
            "object",
        }
        
        class properties:
        
            @staticmethod
            def caseClass() -> typing.Type['CaseClass']:
                return CaseClass
            caseCount = schemas.IntSchema
            caseDocumentInLibraryCount = schemas.IntSchema
            caseDocumentInLibraryInLastThirtyDaysCount = schemas.IntSchema
            casesInLastThirtyDaysCount = schemas.IntSchema
            
            
            class courtServiceStatusAPI(
                schemas.StrSchema
            ):
                pass
            freeCaseDocumentCount = schemas.IntSchema
            freeCaseDocumentsInLastThirtyDaysCount = schemas.IntSchema
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            paidCaseDocumentCount = schemas.IntSchema
            paidCaseDocumentsInLastThirtyDaysCount = schemas.IntSchema
            __annotations__ = {
                "caseClass": caseClass,
                "caseCount": caseCount,
                "caseDocumentInLibraryCount": caseDocumentInLibraryCount,
                "caseDocumentInLibraryInLastThirtyDaysCount": caseDocumentInLibraryInLastThirtyDaysCount,
                "casesInLastThirtyDaysCount": casesInLastThirtyDaysCount,
                "courtServiceStatusAPI": courtServiceStatusAPI,
                "freeCaseDocumentCount": freeCaseDocumentCount,
                "freeCaseDocumentsInLastThirtyDaysCount": freeCaseDocumentsInLastThirtyDaysCount,
                "object": object,
                "paidCaseDocumentCount": paidCaseDocumentCount,
                "paidCaseDocumentsInLastThirtyDaysCount": paidCaseDocumentsInLastThirtyDaysCount,
            }

    
    freeCaseDocumentCount: MetaOapg.properties.freeCaseDocumentCount
    paidCaseDocumentCount: MetaOapg.properties.paidCaseDocumentCount
    courtServiceStatusAPI: MetaOapg.properties.courtServiceStatusAPI
    freeCaseDocumentsInLastThirtyDaysCount: MetaOapg.properties.freeCaseDocumentsInLastThirtyDaysCount
    caseDocumentInLibraryInLastThirtyDaysCount: MetaOapg.properties.caseDocumentInLibraryInLastThirtyDaysCount
    caseClass: 'CaseClass'
    caseCount: MetaOapg.properties.caseCount
    caseDocumentInLibraryCount: MetaOapg.properties.caseDocumentInLibraryCount
    paidCaseDocumentsInLastThirtyDaysCount: MetaOapg.properties.paidCaseDocumentsInLastThirtyDaysCount
    casesInLastThirtyDaysCount: MetaOapg.properties.casesInLastThirtyDaysCount
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseClass"]) -> 'CaseClass': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCount"]) -> MetaOapg.properties.caseCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseDocumentInLibraryCount"]) -> MetaOapg.properties.caseDocumentInLibraryCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseDocumentInLibraryInLastThirtyDaysCount"]) -> MetaOapg.properties.caseDocumentInLibraryInLastThirtyDaysCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["casesInLastThirtyDaysCount"]) -> MetaOapg.properties.casesInLastThirtyDaysCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtServiceStatusAPI"]) -> MetaOapg.properties.courtServiceStatusAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freeCaseDocumentCount"]) -> MetaOapg.properties.freeCaseDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freeCaseDocumentsInLastThirtyDaysCount"]) -> MetaOapg.properties.freeCaseDocumentsInLastThirtyDaysCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidCaseDocumentCount"]) -> MetaOapg.properties.paidCaseDocumentCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paidCaseDocumentsInLastThirtyDaysCount"]) -> MetaOapg.properties.paidCaseDocumentsInLastThirtyDaysCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseClass", "caseCount", "caseDocumentInLibraryCount", "caseDocumentInLibraryInLastThirtyDaysCount", "casesInLastThirtyDaysCount", "courtServiceStatusAPI", "freeCaseDocumentCount", "freeCaseDocumentsInLastThirtyDaysCount", "object", "paidCaseDocumentCount", "paidCaseDocumentsInLastThirtyDaysCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseClass"]) -> 'CaseClass': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCount"]) -> MetaOapg.properties.caseCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseDocumentInLibraryCount"]) -> MetaOapg.properties.caseDocumentInLibraryCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseDocumentInLibraryInLastThirtyDaysCount"]) -> MetaOapg.properties.caseDocumentInLibraryInLastThirtyDaysCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["casesInLastThirtyDaysCount"]) -> MetaOapg.properties.casesInLastThirtyDaysCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtServiceStatusAPI"]) -> MetaOapg.properties.courtServiceStatusAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freeCaseDocumentCount"]) -> MetaOapg.properties.freeCaseDocumentCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freeCaseDocumentsInLastThirtyDaysCount"]) -> MetaOapg.properties.freeCaseDocumentsInLastThirtyDaysCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidCaseDocumentCount"]) -> MetaOapg.properties.paidCaseDocumentCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paidCaseDocumentsInLastThirtyDaysCount"]) -> MetaOapg.properties.paidCaseDocumentsInLastThirtyDaysCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseClass", "caseCount", "caseDocumentInLibraryCount", "caseDocumentInLibraryInLastThirtyDaysCount", "casesInLastThirtyDaysCount", "courtServiceStatusAPI", "freeCaseDocumentCount", "freeCaseDocumentsInLastThirtyDaysCount", "object", "paidCaseDocumentCount", "paidCaseDocumentsInLastThirtyDaysCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaseClassCoverage':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.case_class import CaseClass
