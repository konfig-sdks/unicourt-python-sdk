# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class CaseAnalyticsAPI(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Provides Court Data per State Jurisdiction for an entity.
    """


    class MetaOapg:
        required = {
            "caseCountAnalyticsByPartyRoleAPI",
            "caseCountAnalyticsByCaseTypeAPI",
            "caseCountAnalyticsByCaseTypeGroupAPI",
            "caseCountAnalyticsByJurisdictionGeoAPI",
            "caseCountAnalyticsByCourtSystemAPI",
            "caseCountAnalyticsByCourtTypeAPI",
            "caseCountAnalyticsByAreaOfLawAPI",
            "caseCountAnalyticsByPartyRoleGroupAPI",
            "caseCountAnalyticsByCourtLocationAPI",
            "caseCountAnalyticsByCaseClassAPI",
            "caseCountAnalyticsByCourtAPI",
            "totalCases",
            "object",
        }
        
        class properties:
            
            
            class caseCountAnalyticsByAreaOfLawAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByCaseClassAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByCaseTypeAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByCaseTypeGroupAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByCourtAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByCourtLocationAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByCourtSystemAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByCourtTypeAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByJurisdictionGeoAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
            class caseCountAnalyticsByPartyRoleAPI(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'caseCountAnalyticsByPartyRoleAPI':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class caseCountAnalyticsByPartyRoleGroupAPI(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 255
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'caseCountAnalyticsByPartyRoleGroupAPI':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 16
            totalCases = schemas.IntSchema
            __annotations__ = {
                "caseCountAnalyticsByAreaOfLawAPI": caseCountAnalyticsByAreaOfLawAPI,
                "caseCountAnalyticsByCaseClassAPI": caseCountAnalyticsByCaseClassAPI,
                "caseCountAnalyticsByCaseTypeAPI": caseCountAnalyticsByCaseTypeAPI,
                "caseCountAnalyticsByCaseTypeGroupAPI": caseCountAnalyticsByCaseTypeGroupAPI,
                "caseCountAnalyticsByCourtAPI": caseCountAnalyticsByCourtAPI,
                "caseCountAnalyticsByCourtLocationAPI": caseCountAnalyticsByCourtLocationAPI,
                "caseCountAnalyticsByCourtSystemAPI": caseCountAnalyticsByCourtSystemAPI,
                "caseCountAnalyticsByCourtTypeAPI": caseCountAnalyticsByCourtTypeAPI,
                "caseCountAnalyticsByJurisdictionGeoAPI": caseCountAnalyticsByJurisdictionGeoAPI,
                "caseCountAnalyticsByPartyRoleAPI": caseCountAnalyticsByPartyRoleAPI,
                "caseCountAnalyticsByPartyRoleGroupAPI": caseCountAnalyticsByPartyRoleGroupAPI,
                "object": object,
                "totalCases": totalCases,
            }
    
    caseCountAnalyticsByPartyRoleAPI: MetaOapg.properties.caseCountAnalyticsByPartyRoleAPI
    caseCountAnalyticsByCaseTypeAPI: MetaOapg.properties.caseCountAnalyticsByCaseTypeAPI
    caseCountAnalyticsByCaseTypeGroupAPI: MetaOapg.properties.caseCountAnalyticsByCaseTypeGroupAPI
    caseCountAnalyticsByJurisdictionGeoAPI: MetaOapg.properties.caseCountAnalyticsByJurisdictionGeoAPI
    caseCountAnalyticsByCourtSystemAPI: MetaOapg.properties.caseCountAnalyticsByCourtSystemAPI
    caseCountAnalyticsByCourtTypeAPI: MetaOapg.properties.caseCountAnalyticsByCourtTypeAPI
    caseCountAnalyticsByAreaOfLawAPI: MetaOapg.properties.caseCountAnalyticsByAreaOfLawAPI
    caseCountAnalyticsByPartyRoleGroupAPI: MetaOapg.properties.caseCountAnalyticsByPartyRoleGroupAPI
    caseCountAnalyticsByCourtLocationAPI: MetaOapg.properties.caseCountAnalyticsByCourtLocationAPI
    caseCountAnalyticsByCaseClassAPI: MetaOapg.properties.caseCountAnalyticsByCaseClassAPI
    caseCountAnalyticsByCourtAPI: MetaOapg.properties.caseCountAnalyticsByCourtAPI
    totalCases: MetaOapg.properties.totalCases
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByAreaOfLawAPI"]) -> MetaOapg.properties.caseCountAnalyticsByAreaOfLawAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByCaseClassAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCaseClassAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByCaseTypeAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCaseTypeAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByCaseTypeGroupAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCaseTypeGroupAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByCourtAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCourtAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByCourtLocationAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCourtLocationAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByCourtSystemAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCourtSystemAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByCourtTypeAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCourtTypeAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByJurisdictionGeoAPI"]) -> MetaOapg.properties.caseCountAnalyticsByJurisdictionGeoAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByPartyRoleAPI"]) -> MetaOapg.properties.caseCountAnalyticsByPartyRoleAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseCountAnalyticsByPartyRoleGroupAPI"]) -> MetaOapg.properties.caseCountAnalyticsByPartyRoleGroupAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalCases"]) -> MetaOapg.properties.totalCases: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["caseCountAnalyticsByAreaOfLawAPI", "caseCountAnalyticsByCaseClassAPI", "caseCountAnalyticsByCaseTypeAPI", "caseCountAnalyticsByCaseTypeGroupAPI", "caseCountAnalyticsByCourtAPI", "caseCountAnalyticsByCourtLocationAPI", "caseCountAnalyticsByCourtSystemAPI", "caseCountAnalyticsByCourtTypeAPI", "caseCountAnalyticsByJurisdictionGeoAPI", "caseCountAnalyticsByPartyRoleAPI", "caseCountAnalyticsByPartyRoleGroupAPI", "object", "totalCases", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByAreaOfLawAPI"]) -> MetaOapg.properties.caseCountAnalyticsByAreaOfLawAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByCaseClassAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCaseClassAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByCaseTypeAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCaseTypeAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByCaseTypeGroupAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCaseTypeGroupAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByCourtAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCourtAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByCourtLocationAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCourtLocationAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByCourtSystemAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCourtSystemAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByCourtTypeAPI"]) -> MetaOapg.properties.caseCountAnalyticsByCourtTypeAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByJurisdictionGeoAPI"]) -> MetaOapg.properties.caseCountAnalyticsByJurisdictionGeoAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByPartyRoleAPI"]) -> MetaOapg.properties.caseCountAnalyticsByPartyRoleAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseCountAnalyticsByPartyRoleGroupAPI"]) -> MetaOapg.properties.caseCountAnalyticsByPartyRoleGroupAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalCases"]) -> MetaOapg.properties.totalCases: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["caseCountAnalyticsByAreaOfLawAPI", "caseCountAnalyticsByCaseClassAPI", "caseCountAnalyticsByCaseTypeAPI", "caseCountAnalyticsByCaseTypeGroupAPI", "caseCountAnalyticsByCourtAPI", "caseCountAnalyticsByCourtLocationAPI", "caseCountAnalyticsByCourtSystemAPI", "caseCountAnalyticsByCourtTypeAPI", "caseCountAnalyticsByJurisdictionGeoAPI", "caseCountAnalyticsByPartyRoleAPI", "caseCountAnalyticsByPartyRoleGroupAPI", "object", "totalCases", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        caseCountAnalyticsByPartyRoleAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByPartyRoleAPI, None, str, ],
        caseCountAnalyticsByCaseTypeAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByCaseTypeAPI, str, ],
        caseCountAnalyticsByCaseTypeGroupAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByCaseTypeGroupAPI, str, ],
        caseCountAnalyticsByJurisdictionGeoAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByJurisdictionGeoAPI, str, ],
        caseCountAnalyticsByCourtSystemAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByCourtSystemAPI, str, ],
        caseCountAnalyticsByCourtTypeAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByCourtTypeAPI, str, ],
        caseCountAnalyticsByAreaOfLawAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByAreaOfLawAPI, str, ],
        caseCountAnalyticsByPartyRoleGroupAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByPartyRoleGroupAPI, None, str, ],
        caseCountAnalyticsByCourtLocationAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByCourtLocationAPI, str, ],
        caseCountAnalyticsByCaseClassAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByCaseClassAPI, str, ],
        caseCountAnalyticsByCourtAPI: typing.Union[MetaOapg.properties.caseCountAnalyticsByCourtAPI, str, ],
        totalCases: typing.Union[MetaOapg.properties.totalCases, decimal.Decimal, int, ],
        object: typing.Union[MetaOapg.properties.object, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CaseAnalyticsAPI':
        return super().__new__(
            cls,
            *args,
            caseCountAnalyticsByPartyRoleAPI=caseCountAnalyticsByPartyRoleAPI,
            caseCountAnalyticsByCaseTypeAPI=caseCountAnalyticsByCaseTypeAPI,
            caseCountAnalyticsByCaseTypeGroupAPI=caseCountAnalyticsByCaseTypeGroupAPI,
            caseCountAnalyticsByJurisdictionGeoAPI=caseCountAnalyticsByJurisdictionGeoAPI,
            caseCountAnalyticsByCourtSystemAPI=caseCountAnalyticsByCourtSystemAPI,
            caseCountAnalyticsByCourtTypeAPI=caseCountAnalyticsByCourtTypeAPI,
            caseCountAnalyticsByAreaOfLawAPI=caseCountAnalyticsByAreaOfLawAPI,
            caseCountAnalyticsByPartyRoleGroupAPI=caseCountAnalyticsByPartyRoleGroupAPI,
            caseCountAnalyticsByCourtLocationAPI=caseCountAnalyticsByCourtLocationAPI,
            caseCountAnalyticsByCaseClassAPI=caseCountAnalyticsByCaseClassAPI,
            caseCountAnalyticsByCourtAPI=caseCountAnalyticsByCourtAPI,
            totalCases=totalCases,
            object=object,
            _configuration=_configuration,
            **kwargs,
        )
