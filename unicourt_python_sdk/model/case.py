# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class Case(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "sourceDataStatus",
            "courtServiceStatusAPI",
            "lastFetchDateWithUpdates",
            "caseStatus",
            "caseDocuments",
            "filedDate",
            "sourceCaseData",
            "caseType",
            "courtServiceStatusId",
            "lastFetchDate",
            "caseNumber",
            "caseId",
            "caseName",
            "caseStats",
            "firstFetchDate",
            "causeOfActionArray",
            "hasDocumentsWithPreview",
            "exportAPI",
            "court",
            "url",
            "hearings",
            "docketEntries",
            "hasOnlyMetaInfo",
            "attorneys",
            "courtLocation",
            "participantsLastFetchDate",
            "parties",
            "relatedCases",
            "chargeArray",
            "judges",
            "object",
        }
        
        class properties:
        
            @staticmethod
            def attorneys() -> typing.Type['Attorneys']:
                return Attorneys
        
            @staticmethod
            def caseDocuments() -> typing.Type['CaseDocuments']:
                return CaseDocuments
            
            
            class caseId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            
            
            class caseName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'caseName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class caseNumber(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 3
        
            @staticmethod
            def caseStats() -> typing.Type['CaseStats']:
                return CaseStats
        
            @staticmethod
            def caseStatus() -> typing.Type['CaseStatus']:
                return CaseStatus
        
            @staticmethod
            def caseType() -> typing.Type['CaseType']:
                return CaseType
            
            
            class causeOfActionArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CaseCauseOfAction']:
                        return CaseCauseOfAction
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CaseCauseOfAction'], typing.List['CaseCauseOfAction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'causeOfActionArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CaseCauseOfAction':
                    return super().__getitem__(i)
            
            
            class chargeArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CaseCharge']:
                        return CaseCharge
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CaseCharge'], typing.List['CaseCharge']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'chargeArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CaseCharge':
                    return super().__getitem__(i)
        
            @staticmethod
            def court() -> typing.Type['Court']:
                return Court
        
            @staticmethod
            def courtLocation() -> typing.Type['CourtLocation']:
                return CourtLocation
            
            
            class courtServiceStatusAPI(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 250
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'courtServiceStatusAPI':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class courtServiceStatusId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 18
                    min_length = 18
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'courtServiceStatusId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def docketEntries() -> typing.Type['DocketEntries']:
                return DocketEntries
            
            
            class exportAPI(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
            
            
            class filedDate(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
                    min_length = 25
            
            
            class firstFetchDate(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
                    min_length = 25
            hasDocumentsWithPreview = schemas.BoolSchema
            hasOnlyMetaInfo = schemas.BoolSchema
        
            @staticmethod
            def hearings() -> typing.Type['Hearings']:
                return Hearings
        
            @staticmethod
            def judges() -> typing.Type['Judges']:
                return Judges
            
            
            class lastFetchDate(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
                    min_length = 25
            
            
            class lastFetchDateWithUpdates(
                schemas.DateTimeSchema
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
                    min_length = 25
            
            
            class object(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4
                    min_length = 4
            
            
            class participantsLastFetchDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
                    max_length = 25
                    min_length = 25
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'participantsLastFetchDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def parties() -> typing.Type['Parties']:
                return Parties
        
            @staticmethod
            def relatedCases() -> typing.Type['RelatedCases']:
                return RelatedCases
        
            @staticmethod
            def sourceCaseData() -> typing.Type['SourceCaseData']:
                return SourceCaseData
            
            
            class sourceDataStatus(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "NO_LONGER_AVAILABLE_IN_COURT": "NO_LONGER_AVAILABLE_IN_COURT",
                        "SOURCE_DEPRECATED": "SOURCE_DEPRECATED",
                        None: "NONE",
                    }
                
                @schemas.classproperty
                def NO_LONGER_AVAILABLE_IN_COURT(cls):
                    return cls("NO_LONGER_AVAILABLE_IN_COURT")
                
                @schemas.classproperty
                def SOURCE_DEPRECATED(cls):
                    return cls("SOURCE_DEPRECATED")
                
                @schemas.classproperty
                def NONE(cls):
                    return cls(None)
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sourceDataStatus':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 500
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "attorneys": attorneys,
                "caseDocuments": caseDocuments,
                "caseId": caseId,
                "caseName": caseName,
                "caseNumber": caseNumber,
                "caseStats": caseStats,
                "caseStatus": caseStatus,
                "caseType": caseType,
                "causeOfActionArray": causeOfActionArray,
                "chargeArray": chargeArray,
                "court": court,
                "courtLocation": courtLocation,
                "courtServiceStatusAPI": courtServiceStatusAPI,
                "courtServiceStatusId": courtServiceStatusId,
                "docketEntries": docketEntries,
                "exportAPI": exportAPI,
                "filedDate": filedDate,
                "firstFetchDate": firstFetchDate,
                "hasDocumentsWithPreview": hasDocumentsWithPreview,
                "hasOnlyMetaInfo": hasOnlyMetaInfo,
                "hearings": hearings,
                "judges": judges,
                "lastFetchDate": lastFetchDate,
                "lastFetchDateWithUpdates": lastFetchDateWithUpdates,
                "object": object,
                "participantsLastFetchDate": participantsLastFetchDate,
                "parties": parties,
                "relatedCases": relatedCases,
                "sourceCaseData": sourceCaseData,
                "sourceDataStatus": sourceDataStatus,
                "url": url,
            }

    
    sourceDataStatus: MetaOapg.properties.sourceDataStatus
    courtServiceStatusAPI: MetaOapg.properties.courtServiceStatusAPI
    lastFetchDateWithUpdates: MetaOapg.properties.lastFetchDateWithUpdates
    caseStatus: 'CaseStatus'
    caseDocuments: 'CaseDocuments'
    filedDate: MetaOapg.properties.filedDate
    sourceCaseData: 'SourceCaseData'
    caseType: 'CaseType'
    courtServiceStatusId: MetaOapg.properties.courtServiceStatusId
    lastFetchDate: MetaOapg.properties.lastFetchDate
    caseNumber: MetaOapg.properties.caseNumber
    caseId: MetaOapg.properties.caseId
    caseName: MetaOapg.properties.caseName
    caseStats: 'CaseStats'
    firstFetchDate: MetaOapg.properties.firstFetchDate
    causeOfActionArray: MetaOapg.properties.causeOfActionArray
    hasDocumentsWithPreview: MetaOapg.properties.hasDocumentsWithPreview
    exportAPI: MetaOapg.properties.exportAPI
    court: 'Court'
    url: MetaOapg.properties.url
    hearings: 'Hearings'
    docketEntries: 'DocketEntries'
    hasOnlyMetaInfo: MetaOapg.properties.hasOnlyMetaInfo
    attorneys: 'Attorneys'
    courtLocation: 'CourtLocation'
    participantsLastFetchDate: MetaOapg.properties.participantsLastFetchDate
    parties: 'Parties'
    relatedCases: 'RelatedCases'
    chargeArray: MetaOapg.properties.chargeArray
    judges: 'Judges'
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attorneys"]) -> 'Attorneys': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseDocuments"]) -> 'CaseDocuments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseId"]) -> MetaOapg.properties.caseId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseName"]) -> MetaOapg.properties.caseName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseNumber"]) -> MetaOapg.properties.caseNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseStats"]) -> 'CaseStats': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseStatus"]) -> 'CaseStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseType"]) -> 'CaseType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["causeOfActionArray"]) -> MetaOapg.properties.causeOfActionArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chargeArray"]) -> MetaOapg.properties.chargeArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["court"]) -> 'Court': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtLocation"]) -> 'CourtLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtServiceStatusAPI"]) -> MetaOapg.properties.courtServiceStatusAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courtServiceStatusId"]) -> MetaOapg.properties.courtServiceStatusId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docketEntries"]) -> 'DocketEntries': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exportAPI"]) -> MetaOapg.properties.exportAPI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filedDate"]) -> MetaOapg.properties.filedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasDocumentsWithPreview"]) -> MetaOapg.properties.hasDocumentsWithPreview: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasOnlyMetaInfo"]) -> MetaOapg.properties.hasOnlyMetaInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hearings"]) -> 'Hearings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["judges"]) -> 'Judges': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDateWithUpdates"]) -> MetaOapg.properties.lastFetchDateWithUpdates: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participantsLastFetchDate"]) -> MetaOapg.properties.participantsLastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parties"]) -> 'Parties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedCases"]) -> 'RelatedCases': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceCaseData"]) -> 'SourceCaseData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceDataStatus"]) -> MetaOapg.properties.sourceDataStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attorneys", "caseDocuments", "caseId", "caseName", "caseNumber", "caseStats", "caseStatus", "caseType", "causeOfActionArray", "chargeArray", "court", "courtLocation", "courtServiceStatusAPI", "courtServiceStatusId", "docketEntries", "exportAPI", "filedDate", "firstFetchDate", "hasDocumentsWithPreview", "hasOnlyMetaInfo", "hearings", "judges", "lastFetchDate", "lastFetchDateWithUpdates", "object", "participantsLastFetchDate", "parties", "relatedCases", "sourceCaseData", "sourceDataStatus", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attorneys"]) -> 'Attorneys': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseDocuments"]) -> 'CaseDocuments': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseId"]) -> MetaOapg.properties.caseId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseName"]) -> MetaOapg.properties.caseName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseNumber"]) -> MetaOapg.properties.caseNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseStats"]) -> 'CaseStats': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseStatus"]) -> 'CaseStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseType"]) -> 'CaseType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["causeOfActionArray"]) -> MetaOapg.properties.causeOfActionArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chargeArray"]) -> MetaOapg.properties.chargeArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["court"]) -> 'Court': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtLocation"]) -> 'CourtLocation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtServiceStatusAPI"]) -> MetaOapg.properties.courtServiceStatusAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courtServiceStatusId"]) -> MetaOapg.properties.courtServiceStatusId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docketEntries"]) -> 'DocketEntries': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exportAPI"]) -> MetaOapg.properties.exportAPI: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filedDate"]) -> MetaOapg.properties.filedDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasDocumentsWithPreview"]) -> MetaOapg.properties.hasDocumentsWithPreview: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasOnlyMetaInfo"]) -> MetaOapg.properties.hasOnlyMetaInfo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hearings"]) -> 'Hearings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["judges"]) -> 'Judges': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDateWithUpdates"]) -> MetaOapg.properties.lastFetchDateWithUpdates: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participantsLastFetchDate"]) -> MetaOapg.properties.participantsLastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parties"]) -> 'Parties': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedCases"]) -> 'RelatedCases': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceCaseData"]) -> 'SourceCaseData': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceDataStatus"]) -> MetaOapg.properties.sourceDataStatus: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attorneys", "caseDocuments", "caseId", "caseName", "caseNumber", "caseStats", "caseStatus", "caseType", "causeOfActionArray", "chargeArray", "court", "courtLocation", "courtServiceStatusAPI", "courtServiceStatusId", "docketEntries", "exportAPI", "filedDate", "firstFetchDate", "hasDocumentsWithPreview", "hasOnlyMetaInfo", "hearings", "judges", "lastFetchDate", "lastFetchDateWithUpdates", "object", "participantsLastFetchDate", "parties", "relatedCases", "sourceCaseData", "sourceDataStatus", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Case':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.attorneys import Attorneys
from unicourt_python_sdk.model.case_cause_of_action import CaseCauseOfAction
from unicourt_python_sdk.model.case_charge import CaseCharge
from unicourt_python_sdk.model.case_documents import CaseDocuments
from unicourt_python_sdk.model.case_stats import CaseStats
from unicourt_python_sdk.model.case_status import CaseStatus
from unicourt_python_sdk.model.case_type import CaseType
from unicourt_python_sdk.model.court import Court
from unicourt_python_sdk.model.court_location import CourtLocation
from unicourt_python_sdk.model.docket_entries import DocketEntries
from unicourt_python_sdk.model.hearings import Hearings
from unicourt_python_sdk.model.judges import Judges
from unicourt_python_sdk.model.parties import Parties
from unicourt_python_sdk.model.related_cases import RelatedCases
from unicourt_python_sdk.model.source_case_data import SourceCaseData
