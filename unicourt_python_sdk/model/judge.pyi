# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401


class Judge(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "lastName",
            "sourceJudgeType",
            "nameSuffix",
            "isVisible",
            "possibleNormJudgeArray",
            "firstName",
            "lastFetchDate",
            "namePrefix",
            "contact",
            "judgeType",
            "name",
            "middleName",
            "firstFetchDate",
            "judgeId",
            "object",
        }
        
        class properties:
        
            @staticmethod
            def contact() -> typing.Type['Contact']:
                return Contact
            
            
            class firstFetchDate(
                schemas.DateTimeSchema
            ):
                pass
            
            
            class firstName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firstName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            isVisible = schemas.BoolSchema
            
            
            class judgeId(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def judgeType() -> typing.Type['JudgeType']:
                return JudgeType
            
            
            class lastFetchDate(
                schemas.DateTimeSchema
            ):
                pass
            
            
            class lastName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lastName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class middleName(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'middleName':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            
            
            class namePrefix(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'namePrefix':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class nameSuffix(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nameSuffix':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class object(
                schemas.StrSchema
            ):
                pass
            
            
            class possibleNormJudgeArray(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PossibleNormJudge']:
                        return PossibleNormJudge
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PossibleNormJudge'], typing.List['PossibleNormJudge']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'possibleNormJudgeArray':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PossibleNormJudge':
                    return super().__getitem__(i)
            
            
            class sourceJudgeType(
                schemas.StrSchema
            ):
                pass
            __annotations__ = {
                "contact": contact,
                "firstFetchDate": firstFetchDate,
                "firstName": firstName,
                "isVisible": isVisible,
                "judgeId": judgeId,
                "judgeType": judgeType,
                "lastFetchDate": lastFetchDate,
                "lastName": lastName,
                "middleName": middleName,
                "name": name,
                "namePrefix": namePrefix,
                "nameSuffix": nameSuffix,
                "object": object,
                "possibleNormJudgeArray": possibleNormJudgeArray,
                "sourceJudgeType": sourceJudgeType,
            }

    
    lastName: MetaOapg.properties.lastName
    sourceJudgeType: MetaOapg.properties.sourceJudgeType
    nameSuffix: MetaOapg.properties.nameSuffix
    isVisible: MetaOapg.properties.isVisible
    possibleNormJudgeArray: MetaOapg.properties.possibleNormJudgeArray
    firstName: MetaOapg.properties.firstName
    lastFetchDate: MetaOapg.properties.lastFetchDate
    namePrefix: MetaOapg.properties.namePrefix
    contact: 'Contact'
    judgeType: 'JudgeType'
    name: MetaOapg.properties.name
    middleName: MetaOapg.properties.middleName
    firstFetchDate: MetaOapg.properties.firstFetchDate
    judgeId: MetaOapg.properties.judgeId
    object: MetaOapg.properties.object
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> 'Contact': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isVisible"]) -> MetaOapg.properties.isVisible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["judgeId"]) -> MetaOapg.properties.judgeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["judgeType"]) -> 'JudgeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namePrefix"]) -> MetaOapg.properties.namePrefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nameSuffix"]) -> MetaOapg.properties.nameSuffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["possibleNormJudgeArray"]) -> MetaOapg.properties.possibleNormJudgeArray: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceJudgeType"]) -> MetaOapg.properties.sourceJudgeType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contact", "firstFetchDate", "firstName", "isVisible", "judgeId", "judgeType", "lastFetchDate", "lastName", "middleName", "name", "namePrefix", "nameSuffix", "object", "possibleNormJudgeArray", "sourceJudgeType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> 'Contact': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstFetchDate"]) -> MetaOapg.properties.firstFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isVisible"]) -> MetaOapg.properties.isVisible: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["judgeId"]) -> MetaOapg.properties.judgeId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["judgeType"]) -> 'JudgeType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFetchDate"]) -> MetaOapg.properties.lastFetchDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["middleName"]) -> MetaOapg.properties.middleName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namePrefix"]) -> MetaOapg.properties.namePrefix: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nameSuffix"]) -> MetaOapg.properties.nameSuffix: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["possibleNormJudgeArray"]) -> MetaOapg.properties.possibleNormJudgeArray: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceJudgeType"]) -> MetaOapg.properties.sourceJudgeType: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contact", "firstFetchDate", "firstName", "isVisible", "judgeId", "judgeType", "lastFetchDate", "lastName", "middleName", "name", "namePrefix", "nameSuffix", "object", "possibleNormJudgeArray", "sourceJudgeType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Judge':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from unicourt_python_sdk.model.contact import Contact
from unicourt_python_sdk.model.judge_type import JudgeType
from unicourt_python_sdk.model.possible_norm_judge import PossibleNormJudge
