# coding: utf-8

"""
    UniCourt Enterprise APIs

    <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from unicourt_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from unicourt_python_sdk.api_response import AsyncGeneratorResponse
from unicourt_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from unicourt_python_sdk import schemas  # noqa: F401

from unicourt_python_sdk.model.pcl_party import PCLParty as PCLPartySchema
from unicourt_python_sdk.model.exception import Exception as ExceptionSchema

from unicourt_python_sdk.type.exception import Exception
from unicourt_python_sdk.type.pcl_party import PCLParty

from ...api_client import Dictionary
from unicourt_python_sdk.pydantic.exception import Exception as ExceptionPydantic
from unicourt_python_sdk.pydantic.pcl_party import PCLParty as PCLPartyPydantic

# Query params


class PacerUserIdSchema(
    schemas.StrSchema
):
    pass


class PacerClientCodeSchema(
    schemas.StrSchema
):
    pass


class CaseNumberSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CaseNumberSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )
PacerCaseIdSchema = schemas.IntSchema


class LastNameSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'LastNameSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class FirstNameSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'FirstNameSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class MiddleNameSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MiddleNameSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class GenerationSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'GenerationSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class PartyTypeSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PartyTypeSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )
PartyExactNameMatchSchema = schemas.BoolSchema


class PartyRoleArraySchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.StrBase,
            schemas.NoneBase,
            schemas.Schema,
            schemas.NoneStrMixin
        ):
        
        
            class MetaOapg:
        
        
            def __new__(
                cls,
                *args: typing.Union[None, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, None, str, ]], typing.List[typing.Union[MetaOapg.items, None, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PartyRoleArraySchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class CaseTitleSchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CaseTitleSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class CaseOfficeSchema(
    schemas.IntSchema
):
    pass


class CaseSequenceNumberSchema(
    schemas.IntSchema
):
    pass


class CaseYearSchema(
    schemas.IntSchema
):
    pass


class CaseTypeArraySchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.StrBase,
            schemas.NoneBase,
            schemas.Schema,
            schemas.NoneStrMixin
        ):
        
        
            class MetaOapg:
        
        
            def __new__(
                cls,
                *args: typing.Union[None, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, None, str, ]], typing.List[typing.Union[MetaOapg.items, None, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CaseTypeArraySchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class CourtRegionIdArraySchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.StrBase,
            schemas.NoneBase,
            schemas.Schema,
            schemas.NoneStrMixin
        ):
        
        
            class MetaOapg:
        
        
            def __new__(
                cls,
                *args: typing.Union[None, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'items':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                )

    def __new__(
        cls,
        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, None, str, ]], typing.List[typing.Union[MetaOapg.items, None, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CourtRegionIdArraySchema':
        return super().__new__(
            cls,
            arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class CaseYearFromSchema(
    schemas.IntSchema
):
    pass


class CaseYearToSchema(
    schemas.IntSchema
):
    pass


class CaseFiledStartDateSchema(
    schemas.DateTimeBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:
        format = 'date-time'


    def __new__(
        cls,
        *args: typing.Union[None, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CaseFiledStartDateSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class CaseFiledEndDateSchema(
    schemas.DateTimeBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:
        format = 'date-time'


    def __new__(
        cls,
        *args: typing.Union[None, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CaseFiledEndDateSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class CaseTerminatedStartDateSchema(
    schemas.DateTimeBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:
        format = 'date-time'


    def __new__(
        cls,
        *args: typing.Union[None, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CaseTerminatedStartDateSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class CaseTerminatedEndDateSchema(
    schemas.DateTimeBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:
        format = 'date-time'


    def __new__(
        cls,
        *args: typing.Union[None, str, datetime, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CaseTerminatedEndDateSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class SortParameterQuerySchema(
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SortParameterQuerySchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )


class CaseStatusSchema(
    schemas.EnumBase,
    schemas.StrBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneStrMixin
):


    class MetaOapg:
        enum_value_to_name = {
            "open": "OPEN",
            "closed": "CLOSED",
        }
    
    @schemas.classproperty
    def OPEN(cls):
        return cls("open")
    
    @schemas.classproperty
    def CLOSED(cls):
        return cls("closed")


    def __new__(
        cls,
        *args: typing.Union[None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CaseStatusSchema':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
        )
PageNumberSchema = schemas.IntSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'pacerUserId': typing.Union[PacerUserIdSchema, str, ],
        'pacerClientCode': typing.Union[PacerClientCodeSchema, str, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'caseNumber': typing.Union[CaseNumberSchema, None, str, ],
        'pacerCaseId': typing.Union[PacerCaseIdSchema, decimal.Decimal, int, ],
        'lastName': typing.Union[LastNameSchema, None, str, ],
        'firstName': typing.Union[FirstNameSchema, None, str, ],
        'middleName': typing.Union[MiddleNameSchema, None, str, ],
        'generation': typing.Union[GenerationSchema, None, str, ],
        'partyType': typing.Union[PartyTypeSchema, None, str, ],
        'partyExactNameMatch': typing.Union[PartyExactNameMatchSchema, bool, ],
        'partyRoleArray': typing.Union[PartyRoleArraySchema, list, tuple, ],
        'caseTitle': typing.Union[CaseTitleSchema, None, str, ],
        'caseOffice': typing.Union[CaseOfficeSchema, decimal.Decimal, int, ],
        'caseSequenceNumber': typing.Union[CaseSequenceNumberSchema, decimal.Decimal, int, ],
        'caseYear': typing.Union[CaseYearSchema, decimal.Decimal, int, ],
        'caseTypeArray': typing.Union[CaseTypeArraySchema, list, tuple, ],
        'courtRegionIdArray': typing.Union[CourtRegionIdArraySchema, list, tuple, ],
        'caseYearFrom': typing.Union[CaseYearFromSchema, decimal.Decimal, int, ],
        'caseYearTo': typing.Union[CaseYearToSchema, decimal.Decimal, int, ],
        'caseFiledStartDate': typing.Union[CaseFiledStartDateSchema, None, str, datetime, ],
        'caseFiledEndDate': typing.Union[CaseFiledEndDateSchema, None, str, datetime, ],
        'caseTerminatedStartDate': typing.Union[CaseTerminatedStartDateSchema, None, str, datetime, ],
        'caseTerminatedEndDate': typing.Union[CaseTerminatedEndDateSchema, None, str, datetime, ],
        'sortParameterQuery': typing.Union[SortParameterQuerySchema, None, str, ],
        'caseStatus': typing.Union[CaseStatusSchema, None, str, ],
        'pageNumber': typing.Union[PageNumberSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_pacer_user_id = api_client.QueryParameter(
    name="pacerUserId",
    style=api_client.ParameterStyle.FORM,
    schema=PacerUserIdSchema,
    required=True,
    explode=True,
)
request_query_pacer_client_code = api_client.QueryParameter(
    name="pacerClientCode",
    style=api_client.ParameterStyle.FORM,
    schema=PacerClientCodeSchema,
    required=True,
    explode=True,
)
request_query_case_number = api_client.QueryParameter(
    name="caseNumber",
    style=api_client.ParameterStyle.FORM,
    schema=CaseNumberSchema,
    explode=True,
)
request_query_pacer_case_id = api_client.QueryParameter(
    name="pacerCaseId",
    style=api_client.ParameterStyle.FORM,
    schema=PacerCaseIdSchema,
    explode=True,
)
request_query_last_name = api_client.QueryParameter(
    name="lastName",
    style=api_client.ParameterStyle.FORM,
    schema=LastNameSchema,
    explode=True,
)
request_query_first_name = api_client.QueryParameter(
    name="firstName",
    style=api_client.ParameterStyle.FORM,
    schema=FirstNameSchema,
    explode=True,
)
request_query_middle_name = api_client.QueryParameter(
    name="middleName",
    style=api_client.ParameterStyle.FORM,
    schema=MiddleNameSchema,
    explode=True,
)
request_query_generation = api_client.QueryParameter(
    name="generation",
    style=api_client.ParameterStyle.FORM,
    schema=GenerationSchema,
    explode=True,
)
request_query_party_type = api_client.QueryParameter(
    name="partyType",
    style=api_client.ParameterStyle.FORM,
    schema=PartyTypeSchema,
    explode=True,
)
request_query_party_exact_name_match = api_client.QueryParameter(
    name="partyExactNameMatch",
    style=api_client.ParameterStyle.FORM,
    schema=PartyExactNameMatchSchema,
    explode=True,
)
request_query_party_role_array = api_client.QueryParameter(
    name="partyRoleArray",
    style=api_client.ParameterStyle.FORM,
    schema=PartyRoleArraySchema,
    explode=True,
)
request_query_case_title = api_client.QueryParameter(
    name="caseTitle",
    style=api_client.ParameterStyle.FORM,
    schema=CaseTitleSchema,
    explode=True,
)
request_query_case_office = api_client.QueryParameter(
    name="caseOffice",
    style=api_client.ParameterStyle.FORM,
    schema=CaseOfficeSchema,
    explode=True,
)
request_query_case_sequence_number = api_client.QueryParameter(
    name="caseSequenceNumber",
    style=api_client.ParameterStyle.FORM,
    schema=CaseSequenceNumberSchema,
    explode=True,
)
request_query_case_year = api_client.QueryParameter(
    name="caseYear",
    style=api_client.ParameterStyle.FORM,
    schema=CaseYearSchema,
    explode=True,
)
request_query_case_type_array = api_client.QueryParameter(
    name="caseTypeArray",
    style=api_client.ParameterStyle.FORM,
    schema=CaseTypeArraySchema,
    explode=True,
)
request_query_court_region_id_array = api_client.QueryParameter(
    name="courtRegionIdArray",
    style=api_client.ParameterStyle.FORM,
    schema=CourtRegionIdArraySchema,
    explode=True,
)
request_query_case_year_from = api_client.QueryParameter(
    name="caseYearFrom",
    style=api_client.ParameterStyle.FORM,
    schema=CaseYearFromSchema,
    explode=True,
)
request_query_case_year_to = api_client.QueryParameter(
    name="caseYearTo",
    style=api_client.ParameterStyle.FORM,
    schema=CaseYearToSchema,
    explode=True,
)
request_query_case_filed_start_date = api_client.QueryParameter(
    name="caseFiledStartDate",
    style=api_client.ParameterStyle.FORM,
    schema=CaseFiledStartDateSchema,
    explode=True,
)
request_query_case_filed_end_date = api_client.QueryParameter(
    name="caseFiledEndDate",
    style=api_client.ParameterStyle.FORM,
    schema=CaseFiledEndDateSchema,
    explode=True,
)
request_query_case_terminated_start_date = api_client.QueryParameter(
    name="caseTerminatedStartDate",
    style=api_client.ParameterStyle.FORM,
    schema=CaseTerminatedStartDateSchema,
    explode=True,
)
request_query_case_terminated_end_date = api_client.QueryParameter(
    name="caseTerminatedEndDate",
    style=api_client.ParameterStyle.FORM,
    schema=CaseTerminatedEndDateSchema,
    explode=True,
)
request_query_sort_parameter_query = api_client.QueryParameter(
    name="sortParameterQuery",
    style=api_client.ParameterStyle.FORM,
    schema=SortParameterQuerySchema,
    explode=True,
)
request_query_case_status = api_client.QueryParameter(
    name="caseStatus",
    style=api_client.ParameterStyle.FORM,
    schema=CaseStatusSchema,
    explode=True,
)
request_query_page_number = api_client.QueryParameter(
    name="pageNumber",
    style=api_client.ParameterStyle.FORM,
    schema=PageNumberSchema,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = PCLPartySchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: PCLParty


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: PCLParty


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = ExceptionSchema


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    body: Exception


@dataclass
class ApiResponseFor400Async(api_client.AsyncApiResponse):
    body: Exception


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    response_cls_async=ApiResponseFor400Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = ExceptionSchema


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    body: Exception


@dataclass
class ApiResponseFor500Async(api_client.AsyncApiResponse):
    body: Exception


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    response_cls_async=ApiResponseFor500Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _search_civil_cases_in_courts_mapped_args(
        self,
        pacer_user_id: str,
        pacer_client_code: str,
        case_number: typing.Optional[typing.Optional[str]] = None,
        pacer_case_id: typing.Optional[int] = None,
        last_name: typing.Optional[typing.Optional[str]] = None,
        first_name: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        generation: typing.Optional[typing.Optional[str]] = None,
        party_type: typing.Optional[typing.Optional[str]] = None,
        party_exact_name_match: typing.Optional[bool] = None,
        party_role_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_title: typing.Optional[typing.Optional[str]] = None,
        case_office: typing.Optional[int] = None,
        case_sequence_number: typing.Optional[int] = None,
        case_year: typing.Optional[int] = None,
        case_type_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        court_region_id_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_year_from: typing.Optional[int] = None,
        case_year_to: typing.Optional[int] = None,
        case_filed_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_filed_end_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_end_date: typing.Optional[typing.Optional[datetime]] = None,
        sort_parameter_query: typing.Optional[typing.Optional[str]] = None,
        case_status: typing.Optional[typing.Optional[str]] = None,
        page_number: typing.Optional[int] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        if pacer_user_id is not None:
            _query_params["pacerUserId"] = pacer_user_id
        if pacer_client_code is not None:
            _query_params["pacerClientCode"] = pacer_client_code
        if case_number is not None:
            _query_params["caseNumber"] = case_number
        if pacer_case_id is not None:
            _query_params["pacerCaseId"] = pacer_case_id
        if last_name is not None:
            _query_params["lastName"] = last_name
        if first_name is not None:
            _query_params["firstName"] = first_name
        if middle_name is not None:
            _query_params["middleName"] = middle_name
        if generation is not None:
            _query_params["generation"] = generation
        if party_type is not None:
            _query_params["partyType"] = party_type
        if party_exact_name_match is not None:
            _query_params["partyExactNameMatch"] = party_exact_name_match
        if party_role_array is not None:
            _query_params["partyRoleArray"] = party_role_array
        if case_title is not None:
            _query_params["caseTitle"] = case_title
        if case_office is not None:
            _query_params["caseOffice"] = case_office
        if case_sequence_number is not None:
            _query_params["caseSequenceNumber"] = case_sequence_number
        if case_year is not None:
            _query_params["caseYear"] = case_year
        if case_type_array is not None:
            _query_params["caseTypeArray"] = case_type_array
        if court_region_id_array is not None:
            _query_params["courtRegionIdArray"] = court_region_id_array
        if case_year_from is not None:
            _query_params["caseYearFrom"] = case_year_from
        if case_year_to is not None:
            _query_params["caseYearTo"] = case_year_to
        if case_filed_start_date is not None:
            _query_params["caseFiledStartDate"] = case_filed_start_date
        if case_filed_end_date is not None:
            _query_params["caseFiledEndDate"] = case_filed_end_date
        if case_terminated_start_date is not None:
            _query_params["caseTerminatedStartDate"] = case_terminated_start_date
        if case_terminated_end_date is not None:
            _query_params["caseTerminatedEndDate"] = case_terminated_end_date
        if sort_parameter_query is not None:
            _query_params["sortParameterQuery"] = sort_parameter_query
        if case_status is not None:
            _query_params["caseStatus"] = case_status
        if page_number is not None:
            _query_params["pageNumber"] = page_number
        args.query = _query_params
        return args

    async def _asearch_civil_cases_in_courts_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        PACER Case Locator Search API for All Courts.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_pacer_user_id,
            request_query_pacer_client_code,
            request_query_case_number,
            request_query_pacer_case_id,
            request_query_last_name,
            request_query_first_name,
            request_query_middle_name,
            request_query_generation,
            request_query_party_type,
            request_query_party_exact_name_match,
            request_query_party_role_array,
            request_query_case_title,
            request_query_case_office,
            request_query_case_sequence_number,
            request_query_case_year,
            request_query_case_type_array,
            request_query_court_region_id_array,
            request_query_case_year_from,
            request_query_case_year_to,
            request_query_case_filed_start_date,
            request_query_case_filed_end_date,
            request_query_case_terminated_start_date,
            request_query_case_terminated_end_date,
            request_query_sort_parameter_query,
            request_query_case_status,
            request_query_page_number,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/pacerCaseLocator/partySearch/civilCourts',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _search_civil_cases_in_courts_oapg(
        self,
            query_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        PACER Case Locator Search API for All Courts.
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_pacer_user_id,
            request_query_pacer_client_code,
            request_query_case_number,
            request_query_pacer_case_id,
            request_query_last_name,
            request_query_first_name,
            request_query_middle_name,
            request_query_generation,
            request_query_party_type,
            request_query_party_exact_name_match,
            request_query_party_role_array,
            request_query_case_title,
            request_query_case_office,
            request_query_case_sequence_number,
            request_query_case_year,
            request_query_case_type_array,
            request_query_court_region_id_array,
            request_query_case_year_from,
            request_query_case_year_to,
            request_query_case_filed_start_date,
            request_query_case_filed_end_date,
            request_query_case_terminated_start_date,
            request_query_case_terminated_end_date,
            request_query_sort_parameter_query,
            request_query_case_status,
            request_query_page_number,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/pacerCaseLocator/partySearch/civilCourts',
            auth_settings=_auth,
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            auth_settings=_auth,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class SearchCivilCasesInCourtsRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def asearch_civil_cases_in_courts(
        self,
        pacer_user_id: str,
        pacer_client_code: str,
        case_number: typing.Optional[typing.Optional[str]] = None,
        pacer_case_id: typing.Optional[int] = None,
        last_name: typing.Optional[typing.Optional[str]] = None,
        first_name: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        generation: typing.Optional[typing.Optional[str]] = None,
        party_type: typing.Optional[typing.Optional[str]] = None,
        party_exact_name_match: typing.Optional[bool] = None,
        party_role_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_title: typing.Optional[typing.Optional[str]] = None,
        case_office: typing.Optional[int] = None,
        case_sequence_number: typing.Optional[int] = None,
        case_year: typing.Optional[int] = None,
        case_type_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        court_region_id_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_year_from: typing.Optional[int] = None,
        case_year_to: typing.Optional[int] = None,
        case_filed_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_filed_end_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_end_date: typing.Optional[typing.Optional[datetime]] = None,
        sort_parameter_query: typing.Optional[typing.Optional[str]] = None,
        case_status: typing.Optional[typing.Optional[str]] = None,
        page_number: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._search_civil_cases_in_courts_mapped_args(
            pacer_user_id=pacer_user_id,
            pacer_client_code=pacer_client_code,
            case_number=case_number,
            pacer_case_id=pacer_case_id,
            last_name=last_name,
            first_name=first_name,
            middle_name=middle_name,
            generation=generation,
            party_type=party_type,
            party_exact_name_match=party_exact_name_match,
            party_role_array=party_role_array,
            case_title=case_title,
            case_office=case_office,
            case_sequence_number=case_sequence_number,
            case_year=case_year,
            case_type_array=case_type_array,
            court_region_id_array=court_region_id_array,
            case_year_from=case_year_from,
            case_year_to=case_year_to,
            case_filed_start_date=case_filed_start_date,
            case_filed_end_date=case_filed_end_date,
            case_terminated_start_date=case_terminated_start_date,
            case_terminated_end_date=case_terminated_end_date,
            sort_parameter_query=sort_parameter_query,
            case_status=case_status,
            page_number=page_number,
        )
        return await self._asearch_civil_cases_in_courts_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def search_civil_cases_in_courts(
        self,
        pacer_user_id: str,
        pacer_client_code: str,
        case_number: typing.Optional[typing.Optional[str]] = None,
        pacer_case_id: typing.Optional[int] = None,
        last_name: typing.Optional[typing.Optional[str]] = None,
        first_name: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        generation: typing.Optional[typing.Optional[str]] = None,
        party_type: typing.Optional[typing.Optional[str]] = None,
        party_exact_name_match: typing.Optional[bool] = None,
        party_role_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_title: typing.Optional[typing.Optional[str]] = None,
        case_office: typing.Optional[int] = None,
        case_sequence_number: typing.Optional[int] = None,
        case_year: typing.Optional[int] = None,
        case_type_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        court_region_id_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_year_from: typing.Optional[int] = None,
        case_year_to: typing.Optional[int] = None,
        case_filed_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_filed_end_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_end_date: typing.Optional[typing.Optional[datetime]] = None,
        sort_parameter_query: typing.Optional[typing.Optional[str]] = None,
        case_status: typing.Optional[typing.Optional[str]] = None,
        page_number: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._search_civil_cases_in_courts_mapped_args(
            pacer_user_id=pacer_user_id,
            pacer_client_code=pacer_client_code,
            case_number=case_number,
            pacer_case_id=pacer_case_id,
            last_name=last_name,
            first_name=first_name,
            middle_name=middle_name,
            generation=generation,
            party_type=party_type,
            party_exact_name_match=party_exact_name_match,
            party_role_array=party_role_array,
            case_title=case_title,
            case_office=case_office,
            case_sequence_number=case_sequence_number,
            case_year=case_year,
            case_type_array=case_type_array,
            court_region_id_array=court_region_id_array,
            case_year_from=case_year_from,
            case_year_to=case_year_to,
            case_filed_start_date=case_filed_start_date,
            case_filed_end_date=case_filed_end_date,
            case_terminated_start_date=case_terminated_start_date,
            case_terminated_end_date=case_terminated_end_date,
            sort_parameter_query=sort_parameter_query,
            case_status=case_status,
            page_number=page_number,
        )
        return self._search_civil_cases_in_courts_oapg(
            query_params=args.query,
        )

class SearchCivilCasesInCourts(BaseApi):

    async def asearch_civil_cases_in_courts(
        self,
        pacer_user_id: str,
        pacer_client_code: str,
        case_number: typing.Optional[typing.Optional[str]] = None,
        pacer_case_id: typing.Optional[int] = None,
        last_name: typing.Optional[typing.Optional[str]] = None,
        first_name: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        generation: typing.Optional[typing.Optional[str]] = None,
        party_type: typing.Optional[typing.Optional[str]] = None,
        party_exact_name_match: typing.Optional[bool] = None,
        party_role_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_title: typing.Optional[typing.Optional[str]] = None,
        case_office: typing.Optional[int] = None,
        case_sequence_number: typing.Optional[int] = None,
        case_year: typing.Optional[int] = None,
        case_type_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        court_region_id_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_year_from: typing.Optional[int] = None,
        case_year_to: typing.Optional[int] = None,
        case_filed_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_filed_end_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_end_date: typing.Optional[typing.Optional[datetime]] = None,
        sort_parameter_query: typing.Optional[typing.Optional[str]] = None,
        case_status: typing.Optional[typing.Optional[str]] = None,
        page_number: typing.Optional[int] = None,
        validate: bool = False,
        **kwargs,
    ) -> PCLPartyPydantic:
        raw_response = await self.raw.asearch_civil_cases_in_courts(
            pacer_user_id=pacer_user_id,
            pacer_client_code=pacer_client_code,
            case_number=case_number,
            pacer_case_id=pacer_case_id,
            last_name=last_name,
            first_name=first_name,
            middle_name=middle_name,
            generation=generation,
            party_type=party_type,
            party_exact_name_match=party_exact_name_match,
            party_role_array=party_role_array,
            case_title=case_title,
            case_office=case_office,
            case_sequence_number=case_sequence_number,
            case_year=case_year,
            case_type_array=case_type_array,
            court_region_id_array=court_region_id_array,
            case_year_from=case_year_from,
            case_year_to=case_year_to,
            case_filed_start_date=case_filed_start_date,
            case_filed_end_date=case_filed_end_date,
            case_terminated_start_date=case_terminated_start_date,
            case_terminated_end_date=case_terminated_end_date,
            sort_parameter_query=sort_parameter_query,
            case_status=case_status,
            page_number=page_number,
            **kwargs,
        )
        if validate:
            return PCLPartyPydantic(**raw_response.body)
        return api_client.construct_model_instance(PCLPartyPydantic, raw_response.body)
    
    
    def search_civil_cases_in_courts(
        self,
        pacer_user_id: str,
        pacer_client_code: str,
        case_number: typing.Optional[typing.Optional[str]] = None,
        pacer_case_id: typing.Optional[int] = None,
        last_name: typing.Optional[typing.Optional[str]] = None,
        first_name: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        generation: typing.Optional[typing.Optional[str]] = None,
        party_type: typing.Optional[typing.Optional[str]] = None,
        party_exact_name_match: typing.Optional[bool] = None,
        party_role_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_title: typing.Optional[typing.Optional[str]] = None,
        case_office: typing.Optional[int] = None,
        case_sequence_number: typing.Optional[int] = None,
        case_year: typing.Optional[int] = None,
        case_type_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        court_region_id_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_year_from: typing.Optional[int] = None,
        case_year_to: typing.Optional[int] = None,
        case_filed_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_filed_end_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_end_date: typing.Optional[typing.Optional[datetime]] = None,
        sort_parameter_query: typing.Optional[typing.Optional[str]] = None,
        case_status: typing.Optional[typing.Optional[str]] = None,
        page_number: typing.Optional[int] = None,
        validate: bool = False,
    ) -> PCLPartyPydantic:
        raw_response = self.raw.search_civil_cases_in_courts(
            pacer_user_id=pacer_user_id,
            pacer_client_code=pacer_client_code,
            case_number=case_number,
            pacer_case_id=pacer_case_id,
            last_name=last_name,
            first_name=first_name,
            middle_name=middle_name,
            generation=generation,
            party_type=party_type,
            party_exact_name_match=party_exact_name_match,
            party_role_array=party_role_array,
            case_title=case_title,
            case_office=case_office,
            case_sequence_number=case_sequence_number,
            case_year=case_year,
            case_type_array=case_type_array,
            court_region_id_array=court_region_id_array,
            case_year_from=case_year_from,
            case_year_to=case_year_to,
            case_filed_start_date=case_filed_start_date,
            case_filed_end_date=case_filed_end_date,
            case_terminated_start_date=case_terminated_start_date,
            case_terminated_end_date=case_terminated_end_date,
            sort_parameter_query=sort_parameter_query,
            case_status=case_status,
            page_number=page_number,
        )
        if validate:
            return PCLPartyPydantic(**raw_response.body)
        return api_client.construct_model_instance(PCLPartyPydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        pacer_user_id: str,
        pacer_client_code: str,
        case_number: typing.Optional[typing.Optional[str]] = None,
        pacer_case_id: typing.Optional[int] = None,
        last_name: typing.Optional[typing.Optional[str]] = None,
        first_name: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        generation: typing.Optional[typing.Optional[str]] = None,
        party_type: typing.Optional[typing.Optional[str]] = None,
        party_exact_name_match: typing.Optional[bool] = None,
        party_role_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_title: typing.Optional[typing.Optional[str]] = None,
        case_office: typing.Optional[int] = None,
        case_sequence_number: typing.Optional[int] = None,
        case_year: typing.Optional[int] = None,
        case_type_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        court_region_id_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_year_from: typing.Optional[int] = None,
        case_year_to: typing.Optional[int] = None,
        case_filed_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_filed_end_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_end_date: typing.Optional[typing.Optional[datetime]] = None,
        sort_parameter_query: typing.Optional[typing.Optional[str]] = None,
        case_status: typing.Optional[typing.Optional[str]] = None,
        page_number: typing.Optional[int] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._search_civil_cases_in_courts_mapped_args(
            pacer_user_id=pacer_user_id,
            pacer_client_code=pacer_client_code,
            case_number=case_number,
            pacer_case_id=pacer_case_id,
            last_name=last_name,
            first_name=first_name,
            middle_name=middle_name,
            generation=generation,
            party_type=party_type,
            party_exact_name_match=party_exact_name_match,
            party_role_array=party_role_array,
            case_title=case_title,
            case_office=case_office,
            case_sequence_number=case_sequence_number,
            case_year=case_year,
            case_type_array=case_type_array,
            court_region_id_array=court_region_id_array,
            case_year_from=case_year_from,
            case_year_to=case_year_to,
            case_filed_start_date=case_filed_start_date,
            case_filed_end_date=case_filed_end_date,
            case_terminated_start_date=case_terminated_start_date,
            case_terminated_end_date=case_terminated_end_date,
            sort_parameter_query=sort_parameter_query,
            case_status=case_status,
            page_number=page_number,
        )
        return await self._asearch_civil_cases_in_courts_oapg(
            query_params=args.query,
            **kwargs,
        )
    
    def get(
        self,
        pacer_user_id: str,
        pacer_client_code: str,
        case_number: typing.Optional[typing.Optional[str]] = None,
        pacer_case_id: typing.Optional[int] = None,
        last_name: typing.Optional[typing.Optional[str]] = None,
        first_name: typing.Optional[typing.Optional[str]] = None,
        middle_name: typing.Optional[typing.Optional[str]] = None,
        generation: typing.Optional[typing.Optional[str]] = None,
        party_type: typing.Optional[typing.Optional[str]] = None,
        party_exact_name_match: typing.Optional[bool] = None,
        party_role_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_title: typing.Optional[typing.Optional[str]] = None,
        case_office: typing.Optional[int] = None,
        case_sequence_number: typing.Optional[int] = None,
        case_year: typing.Optional[int] = None,
        case_type_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        court_region_id_array: typing.Optional[typing.List[typing.Optional[str]]] = None,
        case_year_from: typing.Optional[int] = None,
        case_year_to: typing.Optional[int] = None,
        case_filed_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_filed_end_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_start_date: typing.Optional[typing.Optional[datetime]] = None,
        case_terminated_end_date: typing.Optional[typing.Optional[datetime]] = None,
        sort_parameter_query: typing.Optional[typing.Optional[str]] = None,
        case_status: typing.Optional[typing.Optional[str]] = None,
        page_number: typing.Optional[int] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._search_civil_cases_in_courts_mapped_args(
            pacer_user_id=pacer_user_id,
            pacer_client_code=pacer_client_code,
            case_number=case_number,
            pacer_case_id=pacer_case_id,
            last_name=last_name,
            first_name=first_name,
            middle_name=middle_name,
            generation=generation,
            party_type=party_type,
            party_exact_name_match=party_exact_name_match,
            party_role_array=party_role_array,
            case_title=case_title,
            case_office=case_office,
            case_sequence_number=case_sequence_number,
            case_year=case_year,
            case_type_array=case_type_array,
            court_region_id_array=court_region_id_array,
            case_year_from=case_year_from,
            case_year_to=case_year_to,
            case_filed_start_date=case_filed_start_date,
            case_filed_end_date=case_filed_end_date,
            case_terminated_start_date=case_terminated_start_date,
            case_terminated_end_date=case_terminated_end_date,
            sort_parameter_query=sort_parameter_query,
            case_status=case_status,
            page_number=page_number,
        )
        return self._search_civil_cases_in_courts_oapg(
            query_params=args.query,
        )

